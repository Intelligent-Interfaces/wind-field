{"ast":null,"code":"import * as tslib_1 from \"tslib\";\nimport { Effect } from \"../effect/Effect\";\nimport { LFO } from \"../source/oscillator/LFO\";\nimport { readOnly } from \"../core/util/Interface\";\n/**\n * Base class for LFO-based effects.\n */\n\nvar LFOEffect =\n/** @class */\nfunction (_super) {\n  tslib_1.__extends(LFOEffect, _super);\n\n  function LFOEffect(options) {\n    var _this = _super.call(this, options) || this;\n\n    _this.name = \"LFOEffect\";\n    _this._lfo = new LFO({\n      context: _this.context,\n      frequency: options.frequency,\n      amplitude: options.depth\n    });\n    _this.depth = _this._lfo.amplitude;\n    _this.frequency = _this._lfo.frequency;\n    _this.type = options.type;\n    readOnly(_this, [\"frequency\", \"depth\"]);\n    return _this;\n  }\n\n  LFOEffect.getDefaults = function () {\n    return Object.assign(Effect.getDefaults(), {\n      frequency: 1,\n      type: \"sine\",\n      depth: 1\n    });\n  };\n  /**\n   * Start the effect.\n   */\n\n\n  LFOEffect.prototype.start = function (time) {\n    this._lfo.start(time);\n\n    return this;\n  };\n  /**\n   * Stop the lfo\n   */\n\n\n  LFOEffect.prototype.stop = function (time) {\n    this._lfo.stop(time);\n\n    return this;\n  };\n  /**\n   * Sync the filter to the transport. See [[LFO.sync]]\n   */\n\n\n  LFOEffect.prototype.sync = function () {\n    this._lfo.sync();\n\n    return this;\n  };\n  /**\n   * Unsync the filter from the transport.\n   */\n\n\n  LFOEffect.prototype.unsync = function () {\n    this._lfo.unsync();\n\n    return this;\n  };\n\n  Object.defineProperty(LFOEffect.prototype, \"type\", {\n    /**\n     * The type of the LFO's oscillator: See [[Oscillator.type]]\n     * @example\n     * import { AutoFilter, Noise } from \"tone\";\n     * const autoFilter = new AutoFilter().start().toDestination();\n     * const noise = new Noise().start().connect(autoFilter);\n     * autoFilter.type = \"square\";\n     */\n    get: function () {\n      return this._lfo.type;\n    },\n    set: function (type) {\n      this._lfo.type = type;\n    },\n    enumerable: true,\n    configurable: true\n  });\n\n  LFOEffect.prototype.dispose = function () {\n    _super.prototype.dispose.call(this);\n\n    this._lfo.dispose();\n\n    this.frequency.dispose();\n    this.depth.dispose();\n    return this;\n  };\n\n  return LFOEffect;\n}(Effect);\n\nexport { LFOEffect };","map":{"version":3,"sources":["../../../Tone/effect/LFOEffect.ts"],"names":[],"mappings":";AAAA,SAAS,MAAT,QAAsC,kBAAtC;AAEA,SAAS,GAAT,QAAoB,0BAApB;AAGA,SAAS,QAAT,QAAyB,wBAAzB;AASA;;;;AAGA,IAAA,SAAA;AAAA;AAAA,UAAA,MAAA,EAAA;AAA0E,EAAA,OAAA,CAAA,SAAA,CAAA,SAAA,EAAA,MAAA;;AAoBzE,WAAA,SAAA,CAAY,OAAZ,EAAqC;AAArC,QAAA,KAAA,GAEC,MAAA,CAAA,IAAA,CAAA,IAAA,EAAM,OAAN,KAAc,IAFf;;AAlBS,IAAA,KAAA,CAAA,IAAA,GAAe,WAAf;AAsBR,IAAA,KAAI,CAAC,IAAL,GAAY,IAAI,GAAJ,CAAQ;AACnB,MAAA,OAAO,EAAE,KAAI,CAAC,OADK;AAEnB,MAAA,SAAS,EAAE,OAAO,CAAC,SAFA;AAGnB,MAAA,SAAS,EAAE,OAAO,CAAC;AAHA,KAAR,CAAZ;AAKA,IAAA,KAAI,CAAC,KAAL,GAAa,KAAI,CAAC,IAAL,CAAU,SAAvB;AACA,IAAA,KAAI,CAAC,SAAL,GAAiB,KAAI,CAAC,IAAL,CAAU,SAA3B;AAEA,IAAA,KAAI,CAAC,IAAL,GAAY,OAAO,CAAC,IAApB;AACA,IAAA,QAAQ,CAAC,KAAD,EAAO,CAAC,WAAD,EAAc,OAAd,CAAP,CAAR;;AACA;;AAEM,EAAA,SAAA,CAAA,WAAA,GAAP,YAAA;AACC,WAAO,MAAM,CAAC,MAAP,CAAc,MAAM,CAAC,WAAP,EAAd,EAAoC;AAC1C,MAAA,SAAS,EAAE,CAD+B;AAE1C,MAAA,IAAI,EAAE,MAFoC;AAG1C,MAAA,KAAK,EAAE;AAHmC,KAApC,CAAP;AAKA,GANM;AAQP;;;;;AAGA,EAAA,SAAA,CAAA,SAAA,CAAA,KAAA,GAAA,UAAM,IAAN,EAAiB;AAChB,SAAK,IAAL,CAAU,KAAV,CAAgB,IAAhB;;AACA,WAAO,IAAP;AACA,GAHD;AAKA;;;;;AAGA,EAAA,SAAA,CAAA,SAAA,CAAA,IAAA,GAAA,UAAK,IAAL,EAAgB;AACf,SAAK,IAAL,CAAU,IAAV,CAAe,IAAf;;AACA,WAAO,IAAP;AACA,GAHD;AAKA;;;;;AAGA,EAAA,SAAA,CAAA,SAAA,CAAA,IAAA,GAAA,YAAA;AACC,SAAK,IAAL,CAAU,IAAV;;AACA,WAAO,IAAP;AACA,GAHD;AAKA;;;;;AAGA,EAAA,SAAA,CAAA,SAAA,CAAA,MAAA,GAAA,YAAA;AACC,SAAK,IAAL,CAAU,MAAV;;AACA,WAAO,IAAP;AACA,GAHD;;AAaA,EAAA,MAAA,CAAA,cAAA,CAAI,SAAA,CAAA,SAAJ,EAAI,MAAJ,EAAQ;AARR;;;;;;;;SAQA,YAAA;AACC,aAAO,KAAK,IAAL,CAAU,IAAjB;AACA,KAFO;SAGR,UAAS,IAAT,EAAa;AACZ,WAAK,IAAL,CAAU,IAAV,GAAiB,IAAjB;AACA,KALO;oBAAA;;AAAA,GAAR;;AAOA,EAAA,SAAA,CAAA,SAAA,CAAA,OAAA,GAAA,YAAA;AACC,IAAA,MAAA,CAAA,SAAA,CAAM,OAAN,CAAa,IAAb,CAAa,IAAb;;AACA,SAAK,IAAL,CAAU,OAAV;;AACA,SAAK,SAAL,CAAe,OAAf;AACA,SAAK,KAAL,CAAW,OAAX;AACA,WAAO,IAAP;AACA,GAND;;AAOD,SAAA,SAAA;AAAC,CAlGD,CAA0E,MAA1E,CAAA","sourceRoot":"","sourcesContent":["import * as tslib_1 from \"tslib\";\nimport { Effect } from \"../effect/Effect\";\nimport { LFO } from \"../source/oscillator/LFO\";\nimport { readOnly } from \"../core/util/Interface\";\n/**\n * Base class for LFO-based effects.\n */\nvar LFOEffect = /** @class */ (function (_super) {\n    tslib_1.__extends(LFOEffect, _super);\n    function LFOEffect(options) {\n        var _this = _super.call(this, options) || this;\n        _this.name = \"LFOEffect\";\n        _this._lfo = new LFO({\n            context: _this.context,\n            frequency: options.frequency,\n            amplitude: options.depth,\n        });\n        _this.depth = _this._lfo.amplitude;\n        _this.frequency = _this._lfo.frequency;\n        _this.type = options.type;\n        readOnly(_this, [\"frequency\", \"depth\"]);\n        return _this;\n    }\n    LFOEffect.getDefaults = function () {\n        return Object.assign(Effect.getDefaults(), {\n            frequency: 1,\n            type: \"sine\",\n            depth: 1,\n        });\n    };\n    /**\n     * Start the effect.\n     */\n    LFOEffect.prototype.start = function (time) {\n        this._lfo.start(time);\n        return this;\n    };\n    /**\n     * Stop the lfo\n     */\n    LFOEffect.prototype.stop = function (time) {\n        this._lfo.stop(time);\n        return this;\n    };\n    /**\n     * Sync the filter to the transport. See [[LFO.sync]]\n     */\n    LFOEffect.prototype.sync = function () {\n        this._lfo.sync();\n        return this;\n    };\n    /**\n     * Unsync the filter from the transport.\n     */\n    LFOEffect.prototype.unsync = function () {\n        this._lfo.unsync();\n        return this;\n    };\n    Object.defineProperty(LFOEffect.prototype, \"type\", {\n        /**\n         * The type of the LFO's oscillator: See [[Oscillator.type]]\n         * @example\n         * import { AutoFilter, Noise } from \"tone\";\n         * const autoFilter = new AutoFilter().start().toDestination();\n         * const noise = new Noise().start().connect(autoFilter);\n         * autoFilter.type = \"square\";\n         */\n        get: function () {\n            return this._lfo.type;\n        },\n        set: function (type) {\n            this._lfo.type = type;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    LFOEffect.prototype.dispose = function () {\n        _super.prototype.dispose.call(this);\n        this._lfo.dispose();\n        this.frequency.dispose();\n        this.depth.dispose();\n        return this;\n    };\n    return LFOEffect;\n}(Effect));\nexport { LFOEffect };\n//# sourceMappingURL=LFOEffect.js.map"]},"metadata":{},"sourceType":"module"}