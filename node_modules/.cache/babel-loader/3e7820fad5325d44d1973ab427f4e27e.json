{"ast":null,"code":"import * as tslib_1 from \"tslib\";\nimport { AmplitudeEnvelope } from \"../component/envelope/AmplitudeEnvelope\";\nimport { Envelope } from \"../component/envelope/Envelope\";\nimport { Filter } from \"../component/filter/Filter\";\nimport { omitFromObject, optionsFromArguments } from \"../core/util/Defaults\";\nimport { readOnly } from \"../core/util/Interface\";\nimport { Monophonic } from \"../instrument/Monophonic\";\nimport { OmniOscillator } from \"../source/oscillator/OmniOscillator\";\nimport { Source } from \"../source/Source\";\nimport { FrequencyEnvelope } from \"../component/envelope/FrequencyEnvelope\";\nimport { ToneAudioNode } from \"../core/context/ToneAudioNode\";\n/**\n * MonoSynth is composed of one `oscillator`, one `filter`, and two `envelopes`.\n * The amplitude of the Oscillator and the cutoff frequency of the\n * Filter are controlled by Envelopes.\n * <img src=\"https://docs.google.com/drawings/d/1gaY1DF9_Hzkodqf8JI1Cg2VZfwSElpFQfI94IQwad38/pub?w=924&h=240\">\n * @example\n * import { MonoSynth } from \"tone\";\n * const synth = new MonoSynth({\n * \toscillator: {\n * \t\ttype: \"square\"\n * \t},\n * \tenvelope: {\n * \t\tattack: 0.1\n * \t}\n * }).toDestination();\n * synth.triggerAttackRelease(\"C4\", \"8n\");\n * @category Instrument\n */\n\nvar MonoSynth =\n/** @class */\nfunction (_super) {\n  tslib_1.__extends(MonoSynth, _super);\n\n  function MonoSynth() {\n    var _this = _super.call(this, optionsFromArguments(MonoSynth.getDefaults(), arguments)) || this;\n\n    _this.name = \"MonoSynth\";\n    var options = optionsFromArguments(MonoSynth.getDefaults(), arguments);\n    _this.oscillator = new OmniOscillator(Object.assign(options.oscillator, {\n      context: _this.context,\n      detune: options.detune,\n      onstop: function () {\n        return _this.onsilence(_this);\n      }\n    }));\n    _this.frequency = _this.oscillator.frequency;\n    _this.detune = _this.oscillator.detune;\n    _this.filter = new Filter(Object.assign(options.filter, {\n      context: _this.context\n    }));\n    _this.filterEnvelope = new FrequencyEnvelope(Object.assign(options.filterEnvelope, {\n      context: _this.context\n    }));\n    _this.envelope = new AmplitudeEnvelope(Object.assign(options.envelope, {\n      context: _this.context\n    })); // connect the oscillators to the output\n\n    _this.oscillator.chain(_this.filter, _this.envelope, _this.output); // connect the filter envelope\n\n\n    _this.filterEnvelope.connect(_this.filter.frequency);\n\n    readOnly(_this, [\"oscillator\", \"frequency\", \"detune\", \"filter\", \"filterEnvelope\", \"envelope\"]);\n    return _this;\n  }\n\n  MonoSynth.getDefaults = function () {\n    return Object.assign(Monophonic.getDefaults(), {\n      envelope: Object.assign(omitFromObject(Envelope.getDefaults(), Object.keys(ToneAudioNode.getDefaults())), {\n        attack: 0.005,\n        decay: 0.1,\n        release: 1,\n        sustain: 0.9\n      }),\n      filter: Object.assign(omitFromObject(Filter.getDefaults(), Object.keys(ToneAudioNode.getDefaults())), {\n        Q: 1,\n        rolloff: -12,\n        type: \"lowpass\"\n      }),\n      filterEnvelope: Object.assign(omitFromObject(FrequencyEnvelope.getDefaults(), Object.keys(ToneAudioNode.getDefaults())), {\n        attack: 0.6,\n        baseFrequency: 200,\n        decay: 0.2,\n        exponent: 2,\n        octaves: 3,\n        release: 2,\n        sustain: 0.5\n      }),\n      oscillator: Object.assign(omitFromObject(OmniOscillator.getDefaults(), Object.keys(Source.getDefaults())), {\n        type: \"sawtooth\"\n      })\n    });\n  };\n  /**\n   * start the attack portion of the envelope\n   * @param time the time the attack should start\n   * @param velocity the velocity of the note (0-1)\n   */\n\n\n  MonoSynth.prototype._triggerEnvelopeAttack = function (time, velocity) {\n    if (velocity === void 0) {\n      velocity = 1;\n    }\n\n    this.envelope.triggerAttack(time, velocity);\n    this.filterEnvelope.triggerAttack(time);\n    this.oscillator.start(time);\n\n    if (this.envelope.sustain === 0) {\n      var computedAttack = this.toSeconds(this.envelope.attack);\n      var computedDecay = this.toSeconds(this.envelope.decay);\n      this.oscillator.stop(time + computedAttack + computedDecay);\n    }\n  };\n  /**\n   * start the release portion of the envelope\n   * @param time the time the release should start\n   */\n\n\n  MonoSynth.prototype._triggerEnvelopeRelease = function (time) {\n    this.envelope.triggerRelease(time);\n    this.filterEnvelope.triggerRelease(time);\n    this.oscillator.stop(time + this.toSeconds(this.envelope.release));\n  };\n\n  MonoSynth.prototype.getLevelAtTime = function (time) {\n    time = this.toSeconds(time);\n    return this.envelope.getValueAtTime(time);\n  };\n\n  MonoSynth.prototype.dispose = function () {\n    _super.prototype.dispose.call(this);\n\n    this.oscillator.dispose();\n    this.envelope.dispose();\n    this.filterEnvelope.dispose();\n    this.filter.dispose();\n    return this;\n  };\n\n  return MonoSynth;\n}(Monophonic);\n\nexport { MonoSynth };","map":{"version":3,"sources":["../../../Tone/instrument/MonoSynth.ts"],"names":[],"mappings":"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","sourceRoot":"","sourcesContent":["import * as tslib_1 from \"tslib\";\nimport { AmplitudeEnvelope } from \"../component/envelope/AmplitudeEnvelope\";\nimport { Envelope } from \"../component/envelope/Envelope\";\nimport { Filter } from \"../component/filter/Filter\";\nimport { omitFromObject, optionsFromArguments } from \"../core/util/Defaults\";\nimport { readOnly } from \"../core/util/Interface\";\nimport { Monophonic } from \"../instrument/Monophonic\";\nimport { OmniOscillator } from \"../source/oscillator/OmniOscillator\";\nimport { Source } from \"../source/Source\";\nimport { FrequencyEnvelope } from \"../component/envelope/FrequencyEnvelope\";\nimport { ToneAudioNode } from \"../core/context/ToneAudioNode\";\n/**\n * MonoSynth is composed of one `oscillator`, one `filter`, and two `envelopes`.\n * The amplitude of the Oscillator and the cutoff frequency of the\n * Filter are controlled by Envelopes.\n * <img src=\"https://docs.google.com/drawings/d/1gaY1DF9_Hzkodqf8JI1Cg2VZfwSElpFQfI94IQwad38/pub?w=924&h=240\">\n * @example\n * import { MonoSynth } from \"tone\";\n * const synth = new MonoSynth({\n * \toscillator: {\n * \t\ttype: \"square\"\n * \t},\n * \tenvelope: {\n * \t\tattack: 0.1\n * \t}\n * }).toDestination();\n * synth.triggerAttackRelease(\"C4\", \"8n\");\n * @category Instrument\n */\nvar MonoSynth = /** @class */ (function (_super) {\n    tslib_1.__extends(MonoSynth, _super);\n    function MonoSynth() {\n        var _this = _super.call(this, optionsFromArguments(MonoSynth.getDefaults(), arguments)) || this;\n        _this.name = \"MonoSynth\";\n        var options = optionsFromArguments(MonoSynth.getDefaults(), arguments);\n        _this.oscillator = new OmniOscillator(Object.assign(options.oscillator, {\n            context: _this.context,\n            detune: options.detune,\n            onstop: function () { return _this.onsilence(_this); },\n        }));\n        _this.frequency = _this.oscillator.frequency;\n        _this.detune = _this.oscillator.detune;\n        _this.filter = new Filter(Object.assign(options.filter, { context: _this.context }));\n        _this.filterEnvelope = new FrequencyEnvelope(Object.assign(options.filterEnvelope, { context: _this.context }));\n        _this.envelope = new AmplitudeEnvelope(Object.assign(options.envelope, { context: _this.context }));\n        // connect the oscillators to the output\n        _this.oscillator.chain(_this.filter, _this.envelope, _this.output);\n        // connect the filter envelope\n        _this.filterEnvelope.connect(_this.filter.frequency);\n        readOnly(_this, [\"oscillator\", \"frequency\", \"detune\", \"filter\", \"filterEnvelope\", \"envelope\"]);\n        return _this;\n    }\n    MonoSynth.getDefaults = function () {\n        return Object.assign(Monophonic.getDefaults(), {\n            envelope: Object.assign(omitFromObject(Envelope.getDefaults(), Object.keys(ToneAudioNode.getDefaults())), {\n                attack: 0.005,\n                decay: 0.1,\n                release: 1,\n                sustain: 0.9,\n            }),\n            filter: Object.assign(omitFromObject(Filter.getDefaults(), Object.keys(ToneAudioNode.getDefaults())), {\n                Q: 1,\n                rolloff: -12,\n                type: \"lowpass\",\n            }),\n            filterEnvelope: Object.assign(omitFromObject(FrequencyEnvelope.getDefaults(), Object.keys(ToneAudioNode.getDefaults())), {\n                attack: 0.6,\n                baseFrequency: 200,\n                decay: 0.2,\n                exponent: 2,\n                octaves: 3,\n                release: 2,\n                sustain: 0.5,\n            }),\n            oscillator: Object.assign(omitFromObject(OmniOscillator.getDefaults(), Object.keys(Source.getDefaults())), {\n                type: \"sawtooth\",\n            }),\n        });\n    };\n    /**\n     * start the attack portion of the envelope\n     * @param time the time the attack should start\n     * @param velocity the velocity of the note (0-1)\n     */\n    MonoSynth.prototype._triggerEnvelopeAttack = function (time, velocity) {\n        if (velocity === void 0) { velocity = 1; }\n        this.envelope.triggerAttack(time, velocity);\n        this.filterEnvelope.triggerAttack(time);\n        this.oscillator.start(time);\n        if (this.envelope.sustain === 0) {\n            var computedAttack = this.toSeconds(this.envelope.attack);\n            var computedDecay = this.toSeconds(this.envelope.decay);\n            this.oscillator.stop(time + computedAttack + computedDecay);\n        }\n    };\n    /**\n     * start the release portion of the envelope\n     * @param time the time the release should start\n     */\n    MonoSynth.prototype._triggerEnvelopeRelease = function (time) {\n        this.envelope.triggerRelease(time);\n        this.filterEnvelope.triggerRelease(time);\n        this.oscillator.stop(time + this.toSeconds(this.envelope.release));\n    };\n    MonoSynth.prototype.getLevelAtTime = function (time) {\n        time = this.toSeconds(time);\n        return this.envelope.getValueAtTime(time);\n    };\n    MonoSynth.prototype.dispose = function () {\n        _super.prototype.dispose.call(this);\n        this.oscillator.dispose();\n        this.envelope.dispose();\n        this.filterEnvelope.dispose();\n        this.filter.dispose();\n        return this;\n    };\n    return MonoSynth;\n}(Monophonic));\nexport { MonoSynth };\n//# sourceMappingURL=MonoSynth.js.map"]},"metadata":{},"sourceType":"module"}