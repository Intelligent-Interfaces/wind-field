{"ast":null,"code":"/**\n * A class which provides a reliable callback using either\n * a Web Worker, or if that isn't supported, falls back to setTimeout.\n */\nvar Ticker =\n/** @class */\nfunction () {\n  function Ticker(callback, type, updateInterval) {\n    this._callback = callback;\n    this._type = type;\n    this._updateInterval = updateInterval; // create the clock source for the first time\n\n    this._createClock();\n  }\n  /**\n   * Generate a web worker\n   */\n\n\n  Ticker.prototype._createWorker = function () {\n    var blob = new Blob([\n    /* javascript */\n    \"\\n\\t\\t\\t// the initial timeout time\\n\\t\\t\\tlet timeoutTime =  \" + (this._updateInterval * 1000).toFixed(1) + \";\\n\\t\\t\\t// onmessage callback\\n\\t\\t\\tself.onmessage = function(msg){\\n\\t\\t\\t\\ttimeoutTime = parseInt(msg.data);\\n\\t\\t\\t};\\n\\t\\t\\t// the tick function which posts a message\\n\\t\\t\\t// and schedules a new tick\\n\\t\\t\\tfunction tick(){\\n\\t\\t\\t\\tsetTimeout(tick, timeoutTime);\\n\\t\\t\\t\\tself.postMessage('tick');\\n\\t\\t\\t}\\n\\t\\t\\t// call tick initially\\n\\t\\t\\ttick();\\n\\t\\t\\t\"], {\n      type: \"text/javascript\"\n    });\n    var blobUrl = URL.createObjectURL(blob);\n    var worker = new Worker(blobUrl);\n    worker.onmessage = this._callback.bind(this);\n    this._worker = worker;\n  };\n  /**\n   * Create a timeout loop\n   */\n\n\n  Ticker.prototype._createTimeout = function () {\n    var _this = this;\n\n    this._timeout = setTimeout(function () {\n      _this._createTimeout();\n\n      _this._callback();\n    }, this._updateInterval * 1000);\n  };\n  /**\n   * Create the clock source.\n   */\n\n\n  Ticker.prototype._createClock = function () {\n    if (this._type === \"worker\") {\n      try {\n        this._createWorker();\n      } catch (e) {\n        // workers not supported, fallback to timeout\n        this._type = \"timeout\";\n\n        this._createClock();\n      }\n    } else if (this._type === \"timeout\") {\n      this._createTimeout();\n    }\n  };\n  /**\n   * Clean up the current clock source\n   */\n\n\n  Ticker.prototype._disposeClock = function () {\n    if (this._timeout) {\n      clearTimeout(this._timeout);\n      this._timeout = 0;\n    }\n\n    if (this._worker) {\n      this._worker.terminate();\n\n      this._worker.onmessage = null;\n    }\n  };\n\n  Object.defineProperty(Ticker.prototype, \"updateInterval\", {\n    /**\n     * The rate in seconds the ticker will update\n     */\n    get: function () {\n      return this._updateInterval;\n    },\n    set: function (interval) {\n      this._updateInterval = Math.max(interval, 128 / 44100);\n\n      if (this._type === \"worker\") {\n        this._worker.postMessage(Math.max(interval * 1000, 1));\n      }\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(Ticker.prototype, \"type\", {\n    /**\n     * The type of the ticker, either a worker or a timeout\n     */\n    get: function () {\n      return this._type;\n    },\n    set: function (type) {\n      this._disposeClock();\n\n      this._type = type;\n\n      this._createClock();\n    },\n    enumerable: true,\n    configurable: true\n  });\n  /**\n   * Clean up\n   */\n\n  Ticker.prototype.dispose = function () {\n    this._disposeClock();\n  };\n\n  return Ticker;\n}();\n\nexport { Ticker };","map":{"version":3,"sources":["../../../../Tone/core/clock/Ticker.ts"],"names":[],"mappings":"AAIA;;;;AAIA,IAAA,MAAA;AAAA;AAAA,YAAA;AA2BC,WAAA,MAAA,CAAY,QAAZ,EAAkC,IAAlC,EAA2D,cAA3D,EAAkF;AAEjF,SAAK,SAAL,GAAiB,QAAjB;AACA,SAAK,KAAL,GAAa,IAAb;AACA,SAAK,eAAL,GAAuB,cAAvB,CAJiF,CAMjF;;AACA,SAAK,YAAL;AACA;AAED;;;;;AAGQ,EAAA,MAAA,CAAA,SAAA,CAAA,aAAA,GAAR,YAAA;AAEC,QAAM,IAAI,GAAG,IAAI,IAAJ,CAAS;AACrB;AAAgB,uEAEK,CAAC,KAAK,eAAL,GAAuB,IAAxB,EAA8B,OAA9B,CAAsC,CAAtC,CAFL,GAE6C,kXAHxC,CAAT,EAiBV;AAAE,MAAA,IAAI,EAAE;AAAR,KAjBU,CAAb;AAkBA,QAAM,OAAO,GAAG,GAAG,CAAC,eAAJ,CAAoB,IAApB,CAAhB;AACA,QAAM,MAAM,GAAG,IAAI,MAAJ,CAAW,OAAX,CAAf;AAEA,IAAA,MAAM,CAAC,SAAP,GAAmB,KAAK,SAAL,CAAe,IAAf,CAAoB,IAApB,CAAnB;AAEA,SAAK,OAAL,GAAe,MAAf;AACA,GA1BO;AA4BR;;;;;AAGQ,EAAA,MAAA,CAAA,SAAA,CAAA,cAAA,GAAR,YAAA;AAAA,QAAA,KAAA,GAAA,IAAA;;AACC,SAAK,QAAL,GAAgB,UAAU,CAAC,YAAA;AAC1B,MAAA,KAAI,CAAC,cAAL;;AACA,MAAA,KAAI,CAAC,SAAL;AACA,KAHyB,EAGvB,KAAK,eAAL,GAAuB,IAHA,CAA1B;AAIA,GALO;AAOR;;;;;AAGQ,EAAA,MAAA,CAAA,SAAA,CAAA,YAAA,GAAR,YAAA;AACC,QAAI,KAAK,KAAL,KAAe,QAAnB,EAA6B;AAC5B,UAAI;AACH,aAAK,aAAL;AACA,OAFD,CAEE,OAAO,CAAP,EAAU;AACX;AACA,aAAK,KAAL,GAAa,SAAb;;AACA,aAAK,YAAL;AACA;AACD,KARD,MAQO,IAAI,KAAK,KAAL,KAAe,SAAnB,EAA8B;AACpC,WAAK,cAAL;AACA;AACD,GAZO;AAcR;;;;;AAGQ,EAAA,MAAA,CAAA,SAAA,CAAA,aAAA,GAAR,YAAA;AACC,QAAI,KAAK,QAAT,EAAmB;AAClB,MAAA,YAAY,CAAC,KAAK,QAAN,CAAZ;AACA,WAAK,QAAL,GAAgB,CAAhB;AACA;;AACD,QAAI,KAAK,OAAT,EAAkB;AACjB,WAAK,OAAL,CAAa,SAAb;;AACA,WAAK,OAAL,CAAa,SAAb,GAAyB,IAAzB;AACA;AACD,GATO;;AAcR,EAAA,MAAA,CAAA,cAAA,CAAI,MAAA,CAAA,SAAJ,EAAI,gBAAJ,EAAkB;AAHlB;;;SAGA,YAAA;AACC,aAAO,KAAK,eAAZ;AACA,KAFiB;SAGlB,UAAmB,QAAnB,EAAoC;AACnC,WAAK,eAAL,GAAuB,IAAI,CAAC,GAAL,CAAS,QAAT,EAAmB,MAAM,KAAzB,CAAvB;;AACA,UAAI,KAAK,KAAL,KAAe,QAAnB,EAA6B;AAC5B,aAAK,OAAL,CAAa,WAAb,CAAyB,IAAI,CAAC,GAAL,CAAS,QAAQ,GAAG,IAApB,EAA0B,CAA1B,CAAzB;AACA;AACD,KARiB;oBAAA;;AAAA,GAAlB;AAaA,EAAA,MAAA,CAAA,cAAA,CAAI,MAAA,CAAA,SAAJ,EAAI,MAAJ,EAAQ;AAHR;;;SAGA,YAAA;AACC,aAAO,KAAK,KAAZ;AACA,KAFO;SAGR,UAAS,IAAT,EAAgC;AAC/B,WAAK,aAAL;;AACA,WAAK,KAAL,GAAa,IAAb;;AACA,WAAK,YAAL;AACA,KAPO;oBAAA;;AAAA,GAAR;AASA;;;;AAGA,EAAA,MAAA,CAAA,SAAA,CAAA,OAAA,GAAA,YAAA;AACC,SAAK,aAAL;AACA,GAFD;;AAGD,SAAA,MAAA;AAAC,CA5ID,EAAA","sourceRoot":"","sourcesContent":["/**\n * A class which provides a reliable callback using either\n * a Web Worker, or if that isn't supported, falls back to setTimeout.\n */\nvar Ticker = /** @class */ (function () {\n    function Ticker(callback, type, updateInterval) {\n        this._callback = callback;\n        this._type = type;\n        this._updateInterval = updateInterval;\n        // create the clock source for the first time\n        this._createClock();\n    }\n    /**\n     * Generate a web worker\n     */\n    Ticker.prototype._createWorker = function () {\n        var blob = new Blob([\n            /* javascript */ \"\\n\\t\\t\\t// the initial timeout time\\n\\t\\t\\tlet timeoutTime =  \" + (this._updateInterval * 1000).toFixed(1) + \";\\n\\t\\t\\t// onmessage callback\\n\\t\\t\\tself.onmessage = function(msg){\\n\\t\\t\\t\\ttimeoutTime = parseInt(msg.data);\\n\\t\\t\\t};\\n\\t\\t\\t// the tick function which posts a message\\n\\t\\t\\t// and schedules a new tick\\n\\t\\t\\tfunction tick(){\\n\\t\\t\\t\\tsetTimeout(tick, timeoutTime);\\n\\t\\t\\t\\tself.postMessage('tick');\\n\\t\\t\\t}\\n\\t\\t\\t// call tick initially\\n\\t\\t\\ttick();\\n\\t\\t\\t\"\n        ], { type: \"text/javascript\" });\n        var blobUrl = URL.createObjectURL(blob);\n        var worker = new Worker(blobUrl);\n        worker.onmessage = this._callback.bind(this);\n        this._worker = worker;\n    };\n    /**\n     * Create a timeout loop\n     */\n    Ticker.prototype._createTimeout = function () {\n        var _this = this;\n        this._timeout = setTimeout(function () {\n            _this._createTimeout();\n            _this._callback();\n        }, this._updateInterval * 1000);\n    };\n    /**\n     * Create the clock source.\n     */\n    Ticker.prototype._createClock = function () {\n        if (this._type === \"worker\") {\n            try {\n                this._createWorker();\n            }\n            catch (e) {\n                // workers not supported, fallback to timeout\n                this._type = \"timeout\";\n                this._createClock();\n            }\n        }\n        else if (this._type === \"timeout\") {\n            this._createTimeout();\n        }\n    };\n    /**\n     * Clean up the current clock source\n     */\n    Ticker.prototype._disposeClock = function () {\n        if (this._timeout) {\n            clearTimeout(this._timeout);\n            this._timeout = 0;\n        }\n        if (this._worker) {\n            this._worker.terminate();\n            this._worker.onmessage = null;\n        }\n    };\n    Object.defineProperty(Ticker.prototype, \"updateInterval\", {\n        /**\n         * The rate in seconds the ticker will update\n         */\n        get: function () {\n            return this._updateInterval;\n        },\n        set: function (interval) {\n            this._updateInterval = Math.max(interval, 128 / 44100);\n            if (this._type === \"worker\") {\n                this._worker.postMessage(Math.max(interval * 1000, 1));\n            }\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(Ticker.prototype, \"type\", {\n        /**\n         * The type of the ticker, either a worker or a timeout\n         */\n        get: function () {\n            return this._type;\n        },\n        set: function (type) {\n            this._disposeClock();\n            this._type = type;\n            this._createClock();\n        },\n        enumerable: true,\n        configurable: true\n    });\n    /**\n     * Clean up\n     */\n    Ticker.prototype.dispose = function () {\n        this._disposeClock();\n    };\n    return Ticker;\n}());\nexport { Ticker };\n//# sourceMappingURL=Ticker.js.map"]},"metadata":{},"sourceType":"module"}