{"ast":null,"code":"import * as tslib_1 from \"tslib\";\nimport { connect } from \"../../core/context/ToneAudioNode\";\nimport { Param } from \"../../core/context/Param\";\nimport { optionsFromArguments } from \"../../core/util/Defaults\";\nimport { OneShotSource } from \"../OneShotSource\";\n/**\n * Wrapper around the native fire-and-forget OscillatorNode.\n * Adds the ability to reschedule the stop method.\n * ***[[Oscillator]] is better for most use-cases***\n * @category Source\n */\n\nvar ToneOscillatorNode =\n/** @class */\nfunction (_super) {\n  tslib_1.__extends(ToneOscillatorNode, _super);\n\n  function ToneOscillatorNode() {\n    var _this = _super.call(this, optionsFromArguments(ToneOscillatorNode.getDefaults(), arguments, [\"frequency\", \"type\"])) || this;\n\n    _this.name = \"ToneOscillatorNode\";\n    /**\n     * The oscillator\n     */\n\n    _this._oscillator = _this.context.createOscillator();\n    _this._internalChannels = [_this._oscillator];\n    var options = optionsFromArguments(ToneOscillatorNode.getDefaults(), arguments, [\"frequency\", \"type\"]);\n    connect(_this._oscillator, _this._gainNode);\n    _this.type = options.type;\n    _this.frequency = new Param({\n      context: _this.context,\n      param: _this._oscillator.frequency,\n      units: \"frequency\",\n      value: options.frequency\n    });\n    _this.detune = new Param({\n      context: _this.context,\n      param: _this._oscillator.detune,\n      units: \"cents\",\n      value: options.detune\n    });\n    return _this;\n  }\n\n  ToneOscillatorNode.getDefaults = function () {\n    return Object.assign(OneShotSource.getDefaults(), {\n      detune: 0,\n      frequency: 440,\n      type: \"sine\"\n    });\n  };\n  /**\n   * Start the oscillator node at the given time\n   * @param  time When to start the oscillator\n   */\n\n\n  ToneOscillatorNode.prototype.start = function (time) {\n    var computedTime = this.toSeconds(time);\n    this.log(\"start\", computedTime);\n\n    this._startGain(computedTime);\n\n    this._oscillator.start(computedTime);\n\n    return this;\n  };\n\n  ToneOscillatorNode.prototype._stopSource = function (time) {\n    this._oscillator.stop(time);\n  };\n  /**\n   * Sets an arbitrary custom periodic waveform given a PeriodicWave.\n   * @param  periodicWave PeriodicWave should be created with context.createPeriodicWave\n   */\n\n\n  ToneOscillatorNode.prototype.setPeriodicWave = function (periodicWave) {\n    this._oscillator.setPeriodicWave(periodicWave);\n\n    return this;\n  };\n\n  Object.defineProperty(ToneOscillatorNode.prototype, \"type\", {\n    /**\n     * The oscillator type. Either 'sine', 'sawtooth', 'square', or 'triangle'\n     */\n    get: function () {\n      return this._oscillator.type;\n    },\n    set: function (type) {\n      this._oscillator.type = type;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  /**\n   * Clean up.\n   */\n\n  ToneOscillatorNode.prototype.dispose = function () {\n    _super.prototype.dispose.call(this);\n\n    if (this.state === \"started\") {\n      this.stop();\n    }\n\n    this._oscillator.disconnect();\n\n    this.frequency.dispose();\n    this.detune.dispose();\n    return this;\n  };\n\n  return ToneOscillatorNode;\n}(OneShotSource);\n\nexport { ToneOscillatorNode };","map":{"version":3,"sources":["../../../../Tone/source/oscillator/ToneOscillatorNode.ts"],"names":[],"mappings":"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","sourceRoot":"","sourcesContent":["import * as tslib_1 from \"tslib\";\nimport { connect } from \"../../core/context/ToneAudioNode\";\nimport { Param } from \"../../core/context/Param\";\nimport { optionsFromArguments } from \"../../core/util/Defaults\";\nimport { OneShotSource } from \"../OneShotSource\";\n/**\n * Wrapper around the native fire-and-forget OscillatorNode.\n * Adds the ability to reschedule the stop method.\n * ***[[Oscillator]] is better for most use-cases***\n * @category Source\n */\nvar ToneOscillatorNode = /** @class */ (function (_super) {\n    tslib_1.__extends(ToneOscillatorNode, _super);\n    function ToneOscillatorNode() {\n        var _this = _super.call(this, optionsFromArguments(ToneOscillatorNode.getDefaults(), arguments, [\"frequency\", \"type\"])) || this;\n        _this.name = \"ToneOscillatorNode\";\n        /**\n         * The oscillator\n         */\n        _this._oscillator = _this.context.createOscillator();\n        _this._internalChannels = [_this._oscillator];\n        var options = optionsFromArguments(ToneOscillatorNode.getDefaults(), arguments, [\"frequency\", \"type\"]);\n        connect(_this._oscillator, _this._gainNode);\n        _this.type = options.type;\n        _this.frequency = new Param({\n            context: _this.context,\n            param: _this._oscillator.frequency,\n            units: \"frequency\",\n            value: options.frequency,\n        });\n        _this.detune = new Param({\n            context: _this.context,\n            param: _this._oscillator.detune,\n            units: \"cents\",\n            value: options.detune,\n        });\n        return _this;\n    }\n    ToneOscillatorNode.getDefaults = function () {\n        return Object.assign(OneShotSource.getDefaults(), {\n            detune: 0,\n            frequency: 440,\n            type: \"sine\",\n        });\n    };\n    /**\n     * Start the oscillator node at the given time\n     * @param  time When to start the oscillator\n     */\n    ToneOscillatorNode.prototype.start = function (time) {\n        var computedTime = this.toSeconds(time);\n        this.log(\"start\", computedTime);\n        this._startGain(computedTime);\n        this._oscillator.start(computedTime);\n        return this;\n    };\n    ToneOscillatorNode.prototype._stopSource = function (time) {\n        this._oscillator.stop(time);\n    };\n    /**\n     * Sets an arbitrary custom periodic waveform given a PeriodicWave.\n     * @param  periodicWave PeriodicWave should be created with context.createPeriodicWave\n     */\n    ToneOscillatorNode.prototype.setPeriodicWave = function (periodicWave) {\n        this._oscillator.setPeriodicWave(periodicWave);\n        return this;\n    };\n    Object.defineProperty(ToneOscillatorNode.prototype, \"type\", {\n        /**\n         * The oscillator type. Either 'sine', 'sawtooth', 'square', or 'triangle'\n         */\n        get: function () {\n            return this._oscillator.type;\n        },\n        set: function (type) {\n            this._oscillator.type = type;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    /**\n     * Clean up.\n     */\n    ToneOscillatorNode.prototype.dispose = function () {\n        _super.prototype.dispose.call(this);\n        if (this.state === \"started\") {\n            this.stop();\n        }\n        this._oscillator.disconnect();\n        this.frequency.dispose();\n        this.detune.dispose();\n        return this;\n    };\n    return ToneOscillatorNode;\n}(OneShotSource));\nexport { ToneOscillatorNode };\n//# sourceMappingURL=ToneOscillatorNode.js.map"]},"metadata":{},"sourceType":"module"}