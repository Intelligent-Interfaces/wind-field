{"ast":null,"code":"import * as tslib_1 from \"tslib\";\nimport { Volume } from \"../../component/channel/Volume\";\nimport { ToneAudioBuffers } from \"../../core/context/ToneAudioBuffers\";\nimport { ToneAudioNode } from \"../../core/context/ToneAudioNode\";\nimport { optionsFromArguments } from \"../../core/util/Defaults\";\nimport { assert } from \"../../core/util/Debug\";\nimport { noOp, readOnly } from \"../../core/util/Interface\";\nimport { Source } from \"../Source\";\nimport { Player } from \"./Player\";\n/**\n * Players combines multiple [[Player]] objects.\n * @category Source\n */\n\nvar Players =\n/** @class */\nfunction (_super) {\n  tslib_1.__extends(Players, _super);\n\n  function Players() {\n    var _this = _super.call(this, optionsFromArguments(Players.getDefaults(), arguments, [\"urls\", \"onload\"], \"urls\")) || this;\n\n    _this.name = \"Players\";\n    /**\n     * Players has no input.\n     */\n\n    _this.input = undefined;\n    /**\n     * The container of all of the players\n     */\n\n    _this._players = new Map();\n    var options = optionsFromArguments(Players.getDefaults(), arguments, [\"urls\", \"onload\"], \"urls\");\n    /**\n     * The output volume node\n     */\n\n    _this._volume = _this.output = new Volume({\n      context: _this.context,\n      volume: options.volume\n    });\n    _this.volume = _this._volume.volume;\n    readOnly(_this, \"volume\");\n    _this._buffers = new ToneAudioBuffers(options.urls, options.onload, options.baseUrl); // mute initially\n\n    _this.mute = options.mute;\n    _this._fadeIn = options.fadeIn;\n    _this._fadeOut = options.fadeOut;\n    return _this;\n  }\n\n  Players.getDefaults = function () {\n    return Object.assign(Source.getDefaults(), {\n      baseUrl: \"\",\n      fadeIn: 0,\n      fadeOut: 0,\n      mute: false,\n      onload: noOp,\n      urls: {},\n      volume: 0\n    });\n  };\n\n  Object.defineProperty(Players.prototype, \"mute\", {\n    /**\n     * Mute the output.\n     */\n    get: function () {\n      return this._volume.mute;\n    },\n    set: function (mute) {\n      this._volume.mute = mute;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(Players.prototype, \"fadeIn\", {\n    /**\n     * The fadeIn time of the envelope applied to the source.\n     */\n    get: function () {\n      return this._fadeIn;\n    },\n    set: function (fadeIn) {\n      this._fadeIn = fadeIn;\n\n      this._players.forEach(function (player) {\n        player.fadeIn = fadeIn;\n      });\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(Players.prototype, \"fadeOut\", {\n    /**\n     * The fadeOut time of the each of the sources.\n     */\n    get: function () {\n      return this._fadeOut;\n    },\n    set: function (fadeOut) {\n      this._fadeOut = fadeOut;\n\n      this._players.forEach(function (player) {\n        player.fadeOut = fadeOut;\n      });\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(Players.prototype, \"state\", {\n    /**\n     * The state of the players object. Returns \"started\" if any of the players are playing.\n     */\n    get: function () {\n      var playing = Array.from(this._players).some(function (_a) {\n        var _b = tslib_1.__read(_a, 2),\n            _ = _b[0],\n            player = _b[1];\n\n        return player.state === \"started\";\n      });\n      return playing ? \"started\" : \"stopped\";\n    },\n    enumerable: true,\n    configurable: true\n  });\n  /**\n   * True if the buffers object has a buffer by that name.\n   * @param name  The key or index of the buffer.\n   */\n\n  Players.prototype.has = function (name) {\n    return this._buffers.has(name);\n  };\n  /**\n   * Get a player by name.\n   * @param  name  The players name as defined in the constructor object or `add` method.\n   */\n\n\n  Players.prototype.player = function (name) {\n    assert(this.has(name), \"No Player with the name \" + name + \" exists on this object\");\n\n    if (!this._players.has(name)) {\n      var player = new Player({\n        context: this.context,\n        fadeIn: this._fadeIn,\n        fadeOut: this._fadeOut,\n        url: this._buffers.get(name)\n      }).connect(this.output);\n\n      this._players.set(name, player);\n    }\n\n    return this._players.get(name);\n  };\n\n  Object.defineProperty(Players.prototype, \"loaded\", {\n    /**\n     * If all the buffers are loaded or not\n     */\n    get: function () {\n      return this._buffers.loaded;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  /**\n   * Add a player by name and url to the Players\n   * @param  name A unique name to give the player\n   * @param  url  Either the url of the bufer or a buffer which will be added with the given name.\n   * @param callback  The callback to invoke when the url is loaded.\n   */\n\n  Players.prototype.add = function (name, url, callback) {\n    assert(!this._buffers.has(name), \"A buffer with that name already exists on this object\");\n\n    this._buffers.add(name, url, callback);\n\n    return this;\n  };\n  /**\n   * Stop all of the players at the given time\n   * @param time The time to stop all of the players.\n   */\n\n\n  Players.prototype.stopAll = function (time) {\n    this._players.forEach(function (player) {\n      return player.stop(time);\n    });\n\n    return this;\n  };\n\n  Players.prototype.dispose = function () {\n    _super.prototype.dispose.call(this);\n\n    this._volume.dispose();\n\n    this.volume.dispose();\n\n    this._players.forEach(function (player) {\n      return player.dispose();\n    });\n\n    this._buffers.dispose();\n\n    return this;\n  };\n\n  return Players;\n}(ToneAudioNode);\n\nexport { Players };","map":{"version":3,"sources":["../../../../Tone/source/buffer/Players.ts"],"names":[],"mappings":"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","sourceRoot":"","sourcesContent":["import * as tslib_1 from \"tslib\";\nimport { Volume } from \"../../component/channel/Volume\";\nimport { ToneAudioBuffers } from \"../../core/context/ToneAudioBuffers\";\nimport { ToneAudioNode } from \"../../core/context/ToneAudioNode\";\nimport { optionsFromArguments } from \"../../core/util/Defaults\";\nimport { assert } from \"../../core/util/Debug\";\nimport { noOp, readOnly } from \"../../core/util/Interface\";\nimport { Source } from \"../Source\";\nimport { Player } from \"./Player\";\n/**\n * Players combines multiple [[Player]] objects.\n * @category Source\n */\nvar Players = /** @class */ (function (_super) {\n    tslib_1.__extends(Players, _super);\n    function Players() {\n        var _this = _super.call(this, optionsFromArguments(Players.getDefaults(), arguments, [\"urls\", \"onload\"], \"urls\")) || this;\n        _this.name = \"Players\";\n        /**\n         * Players has no input.\n         */\n        _this.input = undefined;\n        /**\n         * The container of all of the players\n         */\n        _this._players = new Map();\n        var options = optionsFromArguments(Players.getDefaults(), arguments, [\"urls\", \"onload\"], \"urls\");\n        /**\n         * The output volume node\n         */\n        _this._volume = _this.output = new Volume({\n            context: _this.context,\n            volume: options.volume,\n        });\n        _this.volume = _this._volume.volume;\n        readOnly(_this, \"volume\");\n        _this._buffers = new ToneAudioBuffers(options.urls, options.onload, options.baseUrl);\n        // mute initially\n        _this.mute = options.mute;\n        _this._fadeIn = options.fadeIn;\n        _this._fadeOut = options.fadeOut;\n        return _this;\n    }\n    Players.getDefaults = function () {\n        return Object.assign(Source.getDefaults(), {\n            baseUrl: \"\",\n            fadeIn: 0,\n            fadeOut: 0,\n            mute: false,\n            onload: noOp,\n            urls: {},\n            volume: 0,\n        });\n    };\n    Object.defineProperty(Players.prototype, \"mute\", {\n        /**\n         * Mute the output.\n         */\n        get: function () {\n            return this._volume.mute;\n        },\n        set: function (mute) {\n            this._volume.mute = mute;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(Players.prototype, \"fadeIn\", {\n        /**\n         * The fadeIn time of the envelope applied to the source.\n         */\n        get: function () {\n            return this._fadeIn;\n        },\n        set: function (fadeIn) {\n            this._fadeIn = fadeIn;\n            this._players.forEach(function (player) {\n                player.fadeIn = fadeIn;\n            });\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(Players.prototype, \"fadeOut\", {\n        /**\n         * The fadeOut time of the each of the sources.\n         */\n        get: function () {\n            return this._fadeOut;\n        },\n        set: function (fadeOut) {\n            this._fadeOut = fadeOut;\n            this._players.forEach(function (player) {\n                player.fadeOut = fadeOut;\n            });\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(Players.prototype, \"state\", {\n        /**\n         * The state of the players object. Returns \"started\" if any of the players are playing.\n         */\n        get: function () {\n            var playing = Array.from(this._players).some(function (_a) {\n                var _b = tslib_1.__read(_a, 2), _ = _b[0], player = _b[1];\n                return player.state === \"started\";\n            });\n            return playing ? \"started\" : \"stopped\";\n        },\n        enumerable: true,\n        configurable: true\n    });\n    /**\n     * True if the buffers object has a buffer by that name.\n     * @param name  The key or index of the buffer.\n     */\n    Players.prototype.has = function (name) {\n        return this._buffers.has(name);\n    };\n    /**\n     * Get a player by name.\n     * @param  name  The players name as defined in the constructor object or `add` method.\n     */\n    Players.prototype.player = function (name) {\n        assert(this.has(name), \"No Player with the name \" + name + \" exists on this object\");\n        if (!this._players.has(name)) {\n            var player = new Player({\n                context: this.context,\n                fadeIn: this._fadeIn,\n                fadeOut: this._fadeOut,\n                url: this._buffers.get(name),\n            }).connect(this.output);\n            this._players.set(name, player);\n        }\n        return this._players.get(name);\n    };\n    Object.defineProperty(Players.prototype, \"loaded\", {\n        /**\n         * If all the buffers are loaded or not\n         */\n        get: function () {\n            return this._buffers.loaded;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    /**\n     * Add a player by name and url to the Players\n     * @param  name A unique name to give the player\n     * @param  url  Either the url of the bufer or a buffer which will be added with the given name.\n     * @param callback  The callback to invoke when the url is loaded.\n     */\n    Players.prototype.add = function (name, url, callback) {\n        assert(!this._buffers.has(name), \"A buffer with that name already exists on this object\");\n        this._buffers.add(name, url, callback);\n        return this;\n    };\n    /**\n     * Stop all of the players at the given time\n     * @param time The time to stop all of the players.\n     */\n    Players.prototype.stopAll = function (time) {\n        this._players.forEach(function (player) { return player.stop(time); });\n        return this;\n    };\n    Players.prototype.dispose = function () {\n        _super.prototype.dispose.call(this);\n        this._volume.dispose();\n        this.volume.dispose();\n        this._players.forEach(function (player) { return player.dispose(); });\n        this._buffers.dispose();\n        return this;\n    };\n    return Players;\n}(ToneAudioNode));\nexport { Players };\n//# sourceMappingURL=Players.js.map"]},"metadata":{},"sourceType":"module"}