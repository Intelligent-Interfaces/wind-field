{"ast":null,"code":"import * as tslib_1 from \"tslib\";\nimport { gainToDb } from \"../../core/type/Conversions\";\nimport { optionsFromArguments } from \"../../core/util/Defaults\";\nimport { MeterBase } from \"./MeterBase\";\nimport { warn } from \"../../core/util/Debug\";\nimport { Analyser } from \"./Analyser\";\n/**\n * Meter gets the [RMS](https://en.wikipedia.org/wiki/Root_mean_square)\n * of an input signal. It can also get the raw value of the input signal.\n *\n * @example\n * import { Meter, UserMedia } from \"tone\";\n * const meter = new Meter();\n * const mic = new UserMedia();\n * mic.open();\n * // connect mic to the meter\n * mic.connect(meter);\n * // the current level of the mic\n * const level = meter.getValue();\n * @category Component\n */\n\nvar Meter =\n/** @class */\nfunction (_super) {\n  tslib_1.__extends(Meter, _super);\n\n  function Meter() {\n    var _this = _super.call(this, optionsFromArguments(Meter.getDefaults(), arguments, [\"smoothing\"])) || this;\n\n    _this.name = \"Meter\";\n    /**\n     * The previous frame's value\n     */\n\n    _this._rms = 0;\n    var options = optionsFromArguments(Meter.getDefaults(), arguments, [\"smoothing\"]);\n    _this.input = _this.output = _this._analyser = new Analyser({\n      context: _this.context,\n      size: 256,\n      type: \"waveform\",\n      channels: options.channels\n    });\n    _this.smoothing = options.smoothing, _this.normalRange = options.normalRange;\n    return _this;\n  }\n\n  Meter.getDefaults = function () {\n    return Object.assign(MeterBase.getDefaults(), {\n      smoothing: 0.8,\n      normalRange: false,\n      channels: 1\n    });\n  };\n  /**\n   * Use [[getValue]] instead. For the previous getValue behavior, use DCMeter.\n   * @deprecated\n   */\n\n\n  Meter.prototype.getLevel = function () {\n    warn(\"'getLevel' has been changed to 'getValue'\");\n    return this.getValue();\n  };\n  /**\n   * Get the current value of the incoming signal.\n   * Output is in decibels when [[normalRange]] is `false`.\n   * If [[channels]] = 1, then the output is a single number\n   * representing the value of the input signal. When [[channels]] > 1,\n   * then each channel is returned as a value in a number array.\n   */\n\n\n  Meter.prototype.getValue = function () {\n    var _this = this;\n\n    var aValues = this._analyser.getValue();\n\n    var channelValues = this.channels === 1 ? [aValues] : aValues;\n    var vals = channelValues.map(function (values) {\n      var totalSquared = values.reduce(function (total, current) {\n        return total + current * current;\n      }, 0);\n      var rms = Math.sqrt(totalSquared / values.length); // the rms can only fall at the rate of the smoothing\n      // but can jump up instantly\n\n      _this._rms = Math.max(rms, _this._rms * _this.smoothing);\n      return _this.normalRange ? _this._rms : gainToDb(_this._rms);\n    });\n\n    if (this.channels === 1) {\n      return vals[0];\n    } else {\n      return vals;\n    }\n  };\n\n  Object.defineProperty(Meter.prototype, \"channels\", {\n    /**\n     * The number of channels of analysis.\n     */\n    get: function () {\n      return this._analyser.channels;\n    },\n    enumerable: true,\n    configurable: true\n  });\n\n  Meter.prototype.dispose = function () {\n    _super.prototype.dispose.call(this);\n\n    this._analyser.dispose();\n\n    return this;\n  };\n\n  return Meter;\n}(MeterBase);\n\nexport { Meter };","map":{"version":3,"sources":["../../../../Tone/component/analysis/Meter.ts"],"names":[],"mappings":"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","sourceRoot":"","sourcesContent":["import * as tslib_1 from \"tslib\";\nimport { gainToDb } from \"../../core/type/Conversions\";\nimport { optionsFromArguments } from \"../../core/util/Defaults\";\nimport { MeterBase } from \"./MeterBase\";\nimport { warn } from \"../../core/util/Debug\";\nimport { Analyser } from \"./Analyser\";\n/**\n * Meter gets the [RMS](https://en.wikipedia.org/wiki/Root_mean_square)\n * of an input signal. It can also get the raw value of the input signal.\n *\n * @example\n * import { Meter, UserMedia } from \"tone\";\n * const meter = new Meter();\n * const mic = new UserMedia();\n * mic.open();\n * // connect mic to the meter\n * mic.connect(meter);\n * // the current level of the mic\n * const level = meter.getValue();\n * @category Component\n */\nvar Meter = /** @class */ (function (_super) {\n    tslib_1.__extends(Meter, _super);\n    function Meter() {\n        var _this = _super.call(this, optionsFromArguments(Meter.getDefaults(), arguments, [\"smoothing\"])) || this;\n        _this.name = \"Meter\";\n        /**\n         * The previous frame's value\n         */\n        _this._rms = 0;\n        var options = optionsFromArguments(Meter.getDefaults(), arguments, [\"smoothing\"]);\n        _this.input = _this.output = _this._analyser = new Analyser({\n            context: _this.context,\n            size: 256,\n            type: \"waveform\",\n            channels: options.channels,\n        });\n        _this.smoothing = options.smoothing,\n            _this.normalRange = options.normalRange;\n        return _this;\n    }\n    Meter.getDefaults = function () {\n        return Object.assign(MeterBase.getDefaults(), {\n            smoothing: 0.8,\n            normalRange: false,\n            channels: 1,\n        });\n    };\n    /**\n     * Use [[getValue]] instead. For the previous getValue behavior, use DCMeter.\n     * @deprecated\n     */\n    Meter.prototype.getLevel = function () {\n        warn(\"'getLevel' has been changed to 'getValue'\");\n        return this.getValue();\n    };\n    /**\n     * Get the current value of the incoming signal.\n     * Output is in decibels when [[normalRange]] is `false`.\n     * If [[channels]] = 1, then the output is a single number\n     * representing the value of the input signal. When [[channels]] > 1,\n     * then each channel is returned as a value in a number array.\n     */\n    Meter.prototype.getValue = function () {\n        var _this = this;\n        var aValues = this._analyser.getValue();\n        var channelValues = this.channels === 1 ? [aValues] : aValues;\n        var vals = channelValues.map(function (values) {\n            var totalSquared = values.reduce(function (total, current) { return total + current * current; }, 0);\n            var rms = Math.sqrt(totalSquared / values.length);\n            // the rms can only fall at the rate of the smoothing\n            // but can jump up instantly\n            _this._rms = Math.max(rms, _this._rms * _this.smoothing);\n            return _this.normalRange ? _this._rms : gainToDb(_this._rms);\n        });\n        if (this.channels === 1) {\n            return vals[0];\n        }\n        else {\n            return vals;\n        }\n    };\n    Object.defineProperty(Meter.prototype, \"channels\", {\n        /**\n         * The number of channels of analysis.\n         */\n        get: function () {\n            return this._analyser.channels;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Meter.prototype.dispose = function () {\n        _super.prototype.dispose.call(this);\n        this._analyser.dispose();\n        return this;\n    };\n    return Meter;\n}(MeterBase));\nexport { Meter };\n//# sourceMappingURL=Meter.js.map"]},"metadata":{},"sourceType":"module"}