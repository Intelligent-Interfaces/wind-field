{"ast":null,"code":"/*! Source code licensed under Apache License 2.0. Copyright Â© 2017-current William Ngan and contributors. (https://github.com/williamngan/pts) */\nimport { Pt, Group } from \"./Pt\";\nimport { Line, Triangle } from \"./Op\";\nimport { Const } from \"./Util\";\nimport { Num, Geom } from \"./Num\";\nimport { Vec } from \"./LinearAlgebra\";\nexport class Create {\n  static distributeRandom(bound, count, dimensions = 2) {\n    let pts = new Group();\n\n    for (let i = 0; i < count; i++) {\n      let p = [bound.x + Math.random() * bound.width];\n      if (dimensions > 1) p.push(bound.y + Math.random() * bound.height);\n      if (dimensions > 2) p.push(bound.z + Math.random() * bound.depth);\n      pts.push(new Pt(p));\n    }\n\n    return pts;\n  }\n\n  static distributeLinear(line, count) {\n    let ln = Line.subpoints(line, count - 2);\n    ln.unshift(line[0]);\n    ln.push(line[line.length - 1]);\n    return ln;\n  }\n\n  static gridPts(bound, columns, rows, orientation = [0.5, 0.5]) {\n    if (columns === 0 || rows === 0) throw new Error(\"grid columns and rows cannot be 0\");\n    let unit = bound.size.$subtract(1).$divide(columns, rows);\n    let offset = unit.$multiply(orientation);\n    let g = new Group();\n\n    for (let r = 0; r < rows; r++) {\n      for (let c = 0; c < columns; c++) {\n        g.push(bound.topLeft.$add(unit.$multiply(c, r)).add(offset));\n      }\n    }\n\n    return g;\n  }\n\n  static gridCells(bound, columns, rows) {\n    if (columns === 0 || rows === 0) throw new Error(\"grid columns and rows cannot be 0\");\n    let unit = bound.size.$subtract(1).divide(columns, rows);\n    let g = [];\n\n    for (let r = 0; r < rows; r++) {\n      for (let c = 0; c < columns; c++) {\n        g.push(new Group(bound.topLeft.$add(unit.$multiply(c, r)), bound.topLeft.$add(unit.$multiply(c, r).add(unit))));\n      }\n    }\n\n    return g;\n  }\n\n  static radialPts(center, radius, count, angleOffset = -Const.half_pi) {\n    let g = new Group();\n    let a = Const.two_pi / count;\n\n    for (let i = 0; i < count; i++) {\n      g.push(new Pt(center).toAngle(a * i + angleOffset, radius, true));\n    }\n\n    return g;\n  }\n\n  static noisePts(pts, dx = 0.01, dy = 0.01, rows = 0, columns = 0) {\n    let seed = Math.random();\n    let g = new Group();\n\n    for (let i = 0, len = pts.length; i < len; i++) {\n      let np = new Noise(pts[i]);\n      let r = rows && rows > 0 ? Math.floor(i / rows) : i;\n      let c = columns && columns > 0 ? i % columns : i;\n      np.initNoise(dx * c, dy * r);\n      np.seed(seed);\n      g.push(np);\n    }\n\n    return g;\n  }\n\n  static delaunay(pts) {\n    return Delaunay.from(pts);\n  }\n\n}\nconst grad3 = [[1, 1, 0], [-1, 1, 0], [1, -1, 0], [-1, -1, 0], [1, 0, 1], [-1, 0, 1], [1, 0, -1], [-1, 0, -1], [0, 1, 1], [0, -1, 1], [0, 1, -1], [0, -1, -1]];\nconst permTable = [151, 160, 137, 91, 90, 15, 131, 13, 201, 95, 96, 53, 194, 233, 7, 225, 140, 36, 103, 30, 69, 142, 8, 99, 37, 240, 21, 10, 23, 190, 6, 148, 247, 120, 234, 75, 0, 26, 197, 62, 94, 252, 219, 203, 117, 35, 11, 32, 57, 177, 33, 88, 237, 149, 56, 87, 174, 20, 125, 136, 171, 168, 68, 175, 74, 165, 71, 134, 139, 48, 27, 166, 77, 146, 158, 231, 83, 111, 229, 122, 60, 211, 133, 230, 220, 105, 92, 41, 55, 46, 245, 40, 244, 102, 143, 54, 65, 25, 63, 161, 1, 216, 80, 73, 209, 76, 132, 187, 208, 89, 18, 169, 200, 196, 135, 130, 116, 188, 159, 86, 164, 100, 109, 198, 173, 186, 3, 64, 52, 217, 226, 250, 124, 123, 5, 202, 38, 147, 118, 126, 255, 82, 85, 212, 207, 206, 59, 227, 47, 16, 58, 17, 182, 189, 28, 42, 223, 183, 170, 213, 119, 248, 152, 2, 44, 154, 163, 70, 221, 153, 101, 155, 167, 43, 172, 9, 129, 22, 39, 253, 9, 98, 108, 110, 79, 113, 224, 232, 178, 185, 112, 104, 218, 246, 97, 228, 251, 34, 242, 193, 238, 210, 144, 12, 191, 179, 162, 241, 81, 51, 145, 235, 249, 14, 239, 107, 49, 192, 214, 31, 181, 199, 106, 157, 184, 84, 204, 176, 115, 121, 50, 45, 127, 4, 150, 254, 138, 236, 205, 93, 222, 114, 67, 29, 24, 72, 243, 141, 128, 195, 78, 66, 215, 61, 156, 180];\nexport class Noise extends Pt {\n  constructor(...args) {\n    super(...args);\n    this.perm = [];\n    this._n = new Pt(0.01, 0.01);\n    this.perm = permTable.concat(permTable);\n  }\n\n  initNoise(...args) {\n    this._n = new Pt(...args);\n  }\n\n  step(x = 0, y = 0) {\n    this._n.add(x, y);\n  }\n\n  seed(s) {\n    if (s > 0 && s < 1) s *= 65536;\n    s = Math.floor(s);\n    if (s < 256) s |= s << 8;\n\n    for (let i = 0; i < 255; i++) {\n      let v = i & 1 ? permTable[i] ^ s & 255 : permTable[i] ^ s >> 8 & 255;\n      this.perm[i] = this.perm[i + 256] = v;\n    }\n  }\n\n  noise2D() {\n    let i = Math.max(0, Math.floor(this._n[0])) % 255;\n    let j = Math.max(0, Math.floor(this._n[1])) % 255;\n    let x = this._n[0] % 255 - i;\n    let y = this._n[1] % 255 - j;\n    let n00 = Vec.dot(grad3[(i + this.perm[j]) % 12], [x, y, 0]);\n    let n01 = Vec.dot(grad3[(i + this.perm[j + 1]) % 12], [x, y - 1, 0]);\n    let n10 = Vec.dot(grad3[(i + 1 + this.perm[j]) % 12], [x - 1, y, 0]);\n    let n11 = Vec.dot(grad3[(i + 1 + this.perm[j + 1]) % 12], [x - 1, y - 1, 0]);\n\n    let _fade = f => f * f * f * (f * (f * 6 - 15) + 10);\n\n    let tx = _fade(x);\n\n    return Num.lerp(Num.lerp(n00, n10, tx), Num.lerp(n01, n11, tx), _fade(y));\n  }\n\n}\nexport class Delaunay extends Group {\n  constructor() {\n    super(...arguments);\n    this._mesh = [];\n  }\n\n  delaunay(triangleOnly = true) {\n    if (this.length < 3) return [];\n    this._mesh = [];\n    let n = this.length;\n    let indices = [];\n\n    for (let i = 0; i < n; i++) indices[i] = i;\n\n    indices.sort((i, j) => this[j][0] - this[i][0]);\n    let pts = this.slice();\n\n    let st = this._superTriangle();\n\n    pts = pts.concat(st);\n    let opened = [this._circum(n, n + 1, n + 2, st)];\n    let closed = [];\n    let tris = [];\n\n    for (let i = 0, len = indices.length; i < len; i++) {\n      let c = indices[i];\n      let edges = [];\n      let j = opened.length;\n      if (!this._mesh[c]) this._mesh[c] = {};\n\n      while (j--) {\n        let circum = opened[j];\n        let radius = circum.circle[1][0];\n        let d = pts[c].$subtract(circum.circle[0]);\n\n        if (d[0] > 0 && d[0] * d[0] > radius * radius) {\n          closed.push(circum);\n          tris.push(circum.triangle);\n          opened.splice(j, 1);\n          continue;\n        }\n\n        if (d[0] * d[0] + d[1] * d[1] - radius * radius > Const.epsilon) {\n          continue;\n        }\n\n        edges.push(circum.i, circum.j, circum.j, circum.k, circum.k, circum.i);\n        opened.splice(j, 1);\n      }\n\n      Delaunay._dedupe(edges);\n\n      j = edges.length;\n\n      while (j > 1) {\n        opened.push(this._circum(edges[--j], edges[--j], c, false, pts));\n      }\n    }\n\n    for (let i = 0, len = opened.length; i < len; i++) {\n      let o = opened[i];\n\n      if (o.i < n && o.j < n && o.k < n) {\n        closed.push(o);\n        tris.push(o.triangle);\n\n        this._cache(o);\n      }\n    }\n\n    return triangleOnly ? tris : closed;\n  }\n\n  voronoi() {\n    let vs = [];\n    let n = this._mesh;\n\n    for (let i = 0, len = n.length; i < len; i++) {\n      vs.push(this.neighborPts(i, true));\n    }\n\n    return vs;\n  }\n\n  mesh() {\n    return this._mesh;\n  }\n\n  neighborPts(i, sort = false) {\n    let cs = new Group();\n    let n = this._mesh;\n\n    for (let k in n[i]) {\n      if (n[i].hasOwnProperty(k)) cs.push(n[i][k].circle[0]);\n    }\n\n    return sort ? Geom.sortEdges(cs) : cs;\n  }\n\n  neighbors(i) {\n    let cs = [];\n    let n = this._mesh;\n\n    for (let k in n[i]) {\n      if (n[i].hasOwnProperty(k)) cs.push(n[i][k]);\n    }\n\n    return cs;\n  }\n\n  _cache(o) {\n    this._mesh[o.i][`${Math.min(o.j, o.k)}-${Math.max(o.j, o.k)}`] = o;\n    this._mesh[o.j][`${Math.min(o.i, o.k)}-${Math.max(o.i, o.k)}`] = o;\n    this._mesh[o.k][`${Math.min(o.i, o.j)}-${Math.max(o.i, o.j)}`] = o;\n  }\n\n  _superTriangle() {\n    let minPt = this[0];\n    let maxPt = this[0];\n\n    for (let i = 1, len = this.length; i < len; i++) {\n      minPt = minPt.$min(this[i]);\n      maxPt = maxPt.$max(this[i]);\n    }\n\n    let d = maxPt.$subtract(minPt);\n    let mid = minPt.$add(maxPt).divide(2);\n    let dmax = Math.max(d[0], d[1]);\n    return new Group(mid.$subtract(20 * dmax, dmax), mid.$add(0, 20 * dmax), mid.$add(20 * dmax, -dmax));\n  }\n\n  _triangle(i, j, k, pts = this) {\n    return new Group(pts[i], pts[j], pts[k]);\n  }\n\n  _circum(i, j, k, tri, pts = this) {\n    let t = tri || this._triangle(i, j, k, pts);\n\n    return {\n      i: i,\n      j: j,\n      k: k,\n      triangle: t,\n      circle: Triangle.circumcircle(t)\n    };\n  }\n\n  static _dedupe(edges) {\n    let j = edges.length;\n\n    while (j > 1) {\n      let b = edges[--j];\n      let a = edges[--j];\n      let i = j;\n\n      while (i > 1) {\n        let n = edges[--i];\n        let m = edges[--i];\n\n        if (a == m && b == n || a == n && b == m) {\n          edges.splice(j, 2);\n          edges.splice(i, 2);\n          break;\n        }\n      }\n    }\n\n    return edges;\n  }\n\n}","map":{"version":3,"sources":["/Users/erickoduniyi/Desktop/affective_chaos_control/Emulators/wind-field/node_modules/pts/dist/es2015/Create.js"],"names":["Pt","Group","Line","Triangle","Const","Num","Geom","Vec","Create","distributeRandom","bound","count","dimensions","pts","i","p","x","Math","random","width","push","y","height","z","depth","distributeLinear","line","ln","subpoints","unshift","length","gridPts","columns","rows","orientation","Error","unit","size","$subtract","$divide","offset","$multiply","g","r","c","topLeft","$add","add","gridCells","divide","radialPts","center","radius","angleOffset","half_pi","a","two_pi","toAngle","noisePts","dx","dy","seed","len","np","Noise","floor","initNoise","delaunay","Delaunay","from","grad3","permTable","constructor","args","perm","_n","concat","step","s","v","noise2D","max","j","n00","dot","n01","n10","n11","_fade","f","tx","lerp","arguments","_mesh","triangleOnly","n","indices","sort","slice","st","_superTriangle","opened","_circum","closed","tris","edges","circum","circle","d","triangle","splice","epsilon","k","_dedupe","o","_cache","voronoi","vs","neighborPts","mesh","cs","hasOwnProperty","sortEdges","neighbors","min","minPt","maxPt","$min","$max","mid","dmax","_triangle","tri","t","circumcircle","b","m"],"mappings":"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","sourcesContent":["/*! Source code licensed under Apache License 2.0. Copyright Â© 2017-current William Ngan and contributors. (https://github.com/williamngan/pts) */\nimport { Pt, Group } from \"./Pt\";\nimport { Line, Triangle } from \"./Op\";\nimport { Const } from \"./Util\";\nimport { Num, Geom } from \"./Num\";\nimport { Vec } from \"./LinearAlgebra\";\nexport class Create {\n    static distributeRandom(bound, count, dimensions = 2) {\n        let pts = new Group();\n        for (let i = 0; i < count; i++) {\n            let p = [bound.x + Math.random() * bound.width];\n            if (dimensions > 1)\n                p.push(bound.y + Math.random() * bound.height);\n            if (dimensions > 2)\n                p.push(bound.z + Math.random() * bound.depth);\n            pts.push(new Pt(p));\n        }\n        return pts;\n    }\n    static distributeLinear(line, count) {\n        let ln = Line.subpoints(line, count - 2);\n        ln.unshift(line[0]);\n        ln.push(line[line.length - 1]);\n        return ln;\n    }\n    static gridPts(bound, columns, rows, orientation = [0.5, 0.5]) {\n        if (columns === 0 || rows === 0)\n            throw new Error(\"grid columns and rows cannot be 0\");\n        let unit = bound.size.$subtract(1).$divide(columns, rows);\n        let offset = unit.$multiply(orientation);\n        let g = new Group();\n        for (let r = 0; r < rows; r++) {\n            for (let c = 0; c < columns; c++) {\n                g.push(bound.topLeft.$add(unit.$multiply(c, r)).add(offset));\n            }\n        }\n        return g;\n    }\n    static gridCells(bound, columns, rows) {\n        if (columns === 0 || rows === 0)\n            throw new Error(\"grid columns and rows cannot be 0\");\n        let unit = bound.size.$subtract(1).divide(columns, rows);\n        let g = [];\n        for (let r = 0; r < rows; r++) {\n            for (let c = 0; c < columns; c++) {\n                g.push(new Group(bound.topLeft.$add(unit.$multiply(c, r)), bound.topLeft.$add(unit.$multiply(c, r).add(unit))));\n            }\n        }\n        return g;\n    }\n    static radialPts(center, radius, count, angleOffset = -Const.half_pi) {\n        let g = new Group();\n        let a = Const.two_pi / count;\n        for (let i = 0; i < count; i++) {\n            g.push(new Pt(center).toAngle(a * i + angleOffset, radius, true));\n        }\n        return g;\n    }\n    static noisePts(pts, dx = 0.01, dy = 0.01, rows = 0, columns = 0) {\n        let seed = Math.random();\n        let g = new Group();\n        for (let i = 0, len = pts.length; i < len; i++) {\n            let np = new Noise(pts[i]);\n            let r = (rows && rows > 0) ? Math.floor(i / rows) : i;\n            let c = (columns && columns > 0) ? i % columns : i;\n            np.initNoise(dx * c, dy * r);\n            np.seed(seed);\n            g.push(np);\n        }\n        return g;\n    }\n    static delaunay(pts) {\n        return Delaunay.from(pts);\n    }\n}\nconst grad3 = [\n    [1, 1, 0], [-1, 1, 0], [1, -1, 0], [-1, -1, 0],\n    [1, 0, 1], [-1, 0, 1], [1, 0, -1], [-1, 0, -1],\n    [0, 1, 1], [0, -1, 1], [0, 1, -1], [0, -1, -1]\n];\nconst permTable = [151, 160, 137, 91, 90, 15,\n    131, 13, 201, 95, 96, 53, 194, 233, 7, 225, 140, 36, 103, 30, 69, 142, 8, 99, 37, 240, 21, 10, 23,\n    190, 6, 148, 247, 120, 234, 75, 0, 26, 197, 62, 94, 252, 219, 203, 117, 35, 11, 32, 57, 177, 33,\n    88, 237, 149, 56, 87, 174, 20, 125, 136, 171, 168, 68, 175, 74, 165, 71, 134, 139, 48, 27, 166,\n    77, 146, 158, 231, 83, 111, 229, 122, 60, 211, 133, 230, 220, 105, 92, 41, 55, 46, 245, 40, 244,\n    102, 143, 54, 65, 25, 63, 161, 1, 216, 80, 73, 209, 76, 132, 187, 208, 89, 18, 169, 200, 196,\n    135, 130, 116, 188, 159, 86, 164, 100, 109, 198, 173, 186, 3, 64, 52, 217, 226, 250, 124, 123,\n    5, 202, 38, 147, 118, 126, 255, 82, 85, 212, 207, 206, 59, 227, 47, 16, 58, 17, 182, 189, 28, 42,\n    223, 183, 170, 213, 119, 248, 152, 2, 44, 154, 163, 70, 221, 153, 101, 155, 167, 43, 172, 9,\n    129, 22, 39, 253, 9, 98, 108, 110, 79, 113, 224, 232, 178, 185, 112, 104, 218, 246, 97, 228,\n    251, 34, 242, 193, 238, 210, 144, 12, 191, 179, 162, 241, 81, 51, 145, 235, 249, 14, 239, 107,\n    49, 192, 214, 31, 181, 199, 106, 157, 184, 84, 204, 176, 115, 121, 50, 45, 127, 4, 150, 254,\n    138, 236, 205, 93, 222, 114, 67, 29, 24, 72, 243, 141, 128, 195, 78, 66, 215, 61, 156, 180\n];\nexport class Noise extends Pt {\n    constructor(...args) {\n        super(...args);\n        this.perm = [];\n        this._n = new Pt(0.01, 0.01);\n        this.perm = permTable.concat(permTable);\n    }\n    initNoise(...args) {\n        this._n = new Pt(...args);\n    }\n    step(x = 0, y = 0) {\n        this._n.add(x, y);\n    }\n    seed(s) {\n        if (s > 0 && s < 1)\n            s *= 65536;\n        s = Math.floor(s);\n        if (s < 256)\n            s |= s << 8;\n        for (let i = 0; i < 255; i++) {\n            let v = (i & 1) ? permTable[i] ^ (s & 255) : permTable[i] ^ ((s >> 8) & 255);\n            this.perm[i] = this.perm[i + 256] = v;\n        }\n    }\n    noise2D() {\n        let i = Math.max(0, Math.floor(this._n[0])) % 255;\n        let j = Math.max(0, Math.floor(this._n[1])) % 255;\n        let x = (this._n[0] % 255) - i;\n        let y = (this._n[1] % 255) - j;\n        let n00 = Vec.dot(grad3[(i + this.perm[j]) % 12], [x, y, 0]);\n        let n01 = Vec.dot(grad3[(i + this.perm[j + 1]) % 12], [x, y - 1, 0]);\n        let n10 = Vec.dot(grad3[(i + 1 + this.perm[j]) % 12], [x - 1, y, 0]);\n        let n11 = Vec.dot(grad3[(i + 1 + this.perm[j + 1]) % 12], [x - 1, y - 1, 0]);\n        let _fade = (f) => f * f * f * (f * (f * 6 - 15) + 10);\n        let tx = _fade(x);\n        return Num.lerp(Num.lerp(n00, n10, tx), Num.lerp(n01, n11, tx), _fade(y));\n    }\n}\nexport class Delaunay extends Group {\n    constructor() {\n        super(...arguments);\n        this._mesh = [];\n    }\n    delaunay(triangleOnly = true) {\n        if (this.length < 3)\n            return [];\n        this._mesh = [];\n        let n = this.length;\n        let indices = [];\n        for (let i = 0; i < n; i++)\n            indices[i] = i;\n        indices.sort((i, j) => this[j][0] - this[i][0]);\n        let pts = this.slice();\n        let st = this._superTriangle();\n        pts = pts.concat(st);\n        let opened = [this._circum(n, n + 1, n + 2, st)];\n        let closed = [];\n        let tris = [];\n        for (let i = 0, len = indices.length; i < len; i++) {\n            let c = indices[i];\n            let edges = [];\n            let j = opened.length;\n            if (!this._mesh[c])\n                this._mesh[c] = {};\n            while (j--) {\n                let circum = opened[j];\n                let radius = circum.circle[1][0];\n                let d = pts[c].$subtract(circum.circle[0]);\n                if (d[0] > 0 && d[0] * d[0] > radius * radius) {\n                    closed.push(circum);\n                    tris.push(circum.triangle);\n                    opened.splice(j, 1);\n                    continue;\n                }\n                if (d[0] * d[0] + d[1] * d[1] - radius * radius > Const.epsilon) {\n                    continue;\n                }\n                edges.push(circum.i, circum.j, circum.j, circum.k, circum.k, circum.i);\n                opened.splice(j, 1);\n            }\n            Delaunay._dedupe(edges);\n            j = edges.length;\n            while (j > 1) {\n                opened.push(this._circum(edges[--j], edges[--j], c, false, pts));\n            }\n        }\n        for (let i = 0, len = opened.length; i < len; i++) {\n            let o = opened[i];\n            if (o.i < n && o.j < n && o.k < n) {\n                closed.push(o);\n                tris.push(o.triangle);\n                this._cache(o);\n            }\n        }\n        return (triangleOnly) ? tris : closed;\n    }\n    voronoi() {\n        let vs = [];\n        let n = this._mesh;\n        for (let i = 0, len = n.length; i < len; i++) {\n            vs.push(this.neighborPts(i, true));\n        }\n        return vs;\n    }\n    mesh() {\n        return this._mesh;\n    }\n    neighborPts(i, sort = false) {\n        let cs = new Group();\n        let n = this._mesh;\n        for (let k in n[i]) {\n            if (n[i].hasOwnProperty(k))\n                cs.push(n[i][k].circle[0]);\n        }\n        return (sort) ? Geom.sortEdges(cs) : cs;\n    }\n    neighbors(i) {\n        let cs = [];\n        let n = this._mesh;\n        for (let k in n[i]) {\n            if (n[i].hasOwnProperty(k))\n                cs.push(n[i][k]);\n        }\n        return cs;\n    }\n    _cache(o) {\n        this._mesh[o.i][`${Math.min(o.j, o.k)}-${Math.max(o.j, o.k)}`] = o;\n        this._mesh[o.j][`${Math.min(o.i, o.k)}-${Math.max(o.i, o.k)}`] = o;\n        this._mesh[o.k][`${Math.min(o.i, o.j)}-${Math.max(o.i, o.j)}`] = o;\n    }\n    _superTriangle() {\n        let minPt = this[0];\n        let maxPt = this[0];\n        for (let i = 1, len = this.length; i < len; i++) {\n            minPt = minPt.$min(this[i]);\n            maxPt = maxPt.$max(this[i]);\n        }\n        let d = maxPt.$subtract(minPt);\n        let mid = minPt.$add(maxPt).divide(2);\n        let dmax = Math.max(d[0], d[1]);\n        return new Group(mid.$subtract(20 * dmax, dmax), mid.$add(0, 20 * dmax), mid.$add(20 * dmax, -dmax));\n    }\n    _triangle(i, j, k, pts = this) {\n        return new Group(pts[i], pts[j], pts[k]);\n    }\n    _circum(i, j, k, tri, pts = this) {\n        let t = tri || this._triangle(i, j, k, pts);\n        return {\n            i: i,\n            j: j,\n            k: k,\n            triangle: t,\n            circle: Triangle.circumcircle(t)\n        };\n    }\n    static _dedupe(edges) {\n        let j = edges.length;\n        while (j > 1) {\n            let b = edges[--j];\n            let a = edges[--j];\n            let i = j;\n            while (i > 1) {\n                let n = edges[--i];\n                let m = edges[--i];\n                if ((a == m && b == n) || (a == n && b == m)) {\n                    edges.splice(j, 2);\n                    edges.splice(i, 2);\n                    break;\n                }\n            }\n        }\n        return edges;\n    }\n}\n//# sourceMappingURL=Create.js.map"]},"metadata":{},"sourceType":"module"}