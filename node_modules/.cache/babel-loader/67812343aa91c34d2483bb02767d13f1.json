{"ast":null,"code":"import * as tslib_1 from \"tslib\";\nimport { Volume } from \"../../component/channel/Volume\";\nimport { optionsFromArguments } from \"../util/Defaults\";\nimport { onContextClose, onContextInit } from \"./ContextInitialization\";\nimport { Gain } from \"./Gain\";\nimport { connectSeries, ToneAudioNode } from \"./ToneAudioNode\";\n/**\n * A single master output which is connected to the\n * AudioDestinationNode (aka your speakers).\n * It provides useful conveniences such as the ability\n * to set the volume and mute the entire application.\n * It also gives you the ability to apply master effects to your application.\n *\n * @example\n * import { Destination, Oscillator } from \"tone\";\n * const oscillator = new Oscillator().start();\n * // the audio will go from the oscillator to the speakers\n * oscillator.connect(Destination);\n * // a convenience for connecting to the master output is also provided:\n * oscillator.toDestination();\n * // these two are equivalent.\n * @category Core\n */\n\nvar Destination =\n/** @class */\nfunction (_super) {\n  tslib_1.__extends(Destination, _super);\n\n  function Destination() {\n    var _this = _super.call(this, optionsFromArguments(Destination.getDefaults(), arguments)) || this;\n\n    _this.name = \"Destination\";\n    _this.input = new Volume({\n      context: _this.context\n    });\n    _this.output = new Gain({\n      context: _this.context\n    });\n    /**\n     * The volume of the master output.\n     */\n\n    _this.volume = _this.input.volume;\n    var options = optionsFromArguments(Destination.getDefaults(), arguments);\n    connectSeries(_this.input, _this.output, _this.context.rawContext.destination);\n    _this.mute = options.mute;\n    return _this;\n  }\n\n  Destination.getDefaults = function () {\n    return Object.assign(ToneAudioNode.getDefaults(), {\n      mute: false,\n      volume: 0\n    });\n  };\n\n  Object.defineProperty(Destination.prototype, \"mute\", {\n    /**\n     * Mute the output.\n     * @example\n     * import { Destination, Oscillator } from \"tone\";\n     * const oscillator = new Oscillator().start().toDestination();\n     * // mute the output\n     * Destination.mute = true;\n     */\n    get: function () {\n      return this.input.mute;\n    },\n    set: function (mute) {\n      this.input.mute = mute;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  /**\n   * Add a master effects chain. NOTE: this will disconnect any nodes which were previously\n   * chained in the master effects chain.\n   * @param args All arguments will be connected in a row and the Master will be routed through it.\n   * @return  {Destination}  this\n   * @example\n   * import { Compressor, Destination, Filter } from \"tone\";\n   * // some overall compression to keep the levels in check\n   * const masterCompressor = new Compressor({\n   * \tthreshold: -6,\n   * \tratio: 3,\n   * \tattack: 0.5,\n   * \trelease: 0.1\n   * });\n   * // give a little boost to the lows\n   * const lowBump = new Filter(200, \"lowshelf\");\n   * // route everything through the filter and compressor before going to the speakers\n   * Destination.chain(lowBump, masterCompressor);\n   */\n\n  Destination.prototype.chain = function () {\n    var args = [];\n\n    for (var _i = 0; _i < arguments.length; _i++) {\n      args[_i] = arguments[_i];\n    }\n\n    this.input.disconnect();\n    args.unshift(this.input);\n    args.push(this.output);\n    connectSeries.apply(void 0, tslib_1.__spread(args));\n    return this;\n  };\n  /**\n   * Clean up\n   */\n\n\n  Destination.prototype.dispose = function () {\n    _super.prototype.dispose.call(this);\n\n    this.volume.dispose();\n    return this;\n  };\n\n  return Destination;\n}(ToneAudioNode);\n\nexport { Destination }; //-------------------------------------\n// \tINITIALIZATION\n//-------------------------------------\n\nonContextInit(function (context) {\n  context.destination = new Destination({\n    context: context\n  });\n});\nonContextClose(function (context) {\n  context.destination.dispose();\n});","map":{"version":3,"sources":["../../../../Tone/core/context/Destination.ts"],"names":[],"mappings":"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","sourceRoot":"","sourcesContent":["import * as tslib_1 from \"tslib\";\nimport { Volume } from \"../../component/channel/Volume\";\nimport { optionsFromArguments } from \"../util/Defaults\";\nimport { onContextClose, onContextInit } from \"./ContextInitialization\";\nimport { Gain } from \"./Gain\";\nimport { connectSeries, ToneAudioNode } from \"./ToneAudioNode\";\n/**\n * A single master output which is connected to the\n * AudioDestinationNode (aka your speakers).\n * It provides useful conveniences such as the ability\n * to set the volume and mute the entire application.\n * It also gives you the ability to apply master effects to your application.\n *\n * @example\n * import { Destination, Oscillator } from \"tone\";\n * const oscillator = new Oscillator().start();\n * // the audio will go from the oscillator to the speakers\n * oscillator.connect(Destination);\n * // a convenience for connecting to the master output is also provided:\n * oscillator.toDestination();\n * // these two are equivalent.\n * @category Core\n */\nvar Destination = /** @class */ (function (_super) {\n    tslib_1.__extends(Destination, _super);\n    function Destination() {\n        var _this = _super.call(this, optionsFromArguments(Destination.getDefaults(), arguments)) || this;\n        _this.name = \"Destination\";\n        _this.input = new Volume({ context: _this.context });\n        _this.output = new Gain({ context: _this.context });\n        /**\n         * The volume of the master output.\n         */\n        _this.volume = _this.input.volume;\n        var options = optionsFromArguments(Destination.getDefaults(), arguments);\n        connectSeries(_this.input, _this.output, _this.context.rawContext.destination);\n        _this.mute = options.mute;\n        return _this;\n    }\n    Destination.getDefaults = function () {\n        return Object.assign(ToneAudioNode.getDefaults(), {\n            mute: false,\n            volume: 0,\n        });\n    };\n    Object.defineProperty(Destination.prototype, \"mute\", {\n        /**\n         * Mute the output.\n         * @example\n         * import { Destination, Oscillator } from \"tone\";\n         * const oscillator = new Oscillator().start().toDestination();\n         * // mute the output\n         * Destination.mute = true;\n         */\n        get: function () {\n            return this.input.mute;\n        },\n        set: function (mute) {\n            this.input.mute = mute;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    /**\n     * Add a master effects chain. NOTE: this will disconnect any nodes which were previously\n     * chained in the master effects chain.\n     * @param args All arguments will be connected in a row and the Master will be routed through it.\n     * @return  {Destination}  this\n     * @example\n     * import { Compressor, Destination, Filter } from \"tone\";\n     * // some overall compression to keep the levels in check\n     * const masterCompressor = new Compressor({\n     * \tthreshold: -6,\n     * \tratio: 3,\n     * \tattack: 0.5,\n     * \trelease: 0.1\n     * });\n     * // give a little boost to the lows\n     * const lowBump = new Filter(200, \"lowshelf\");\n     * // route everything through the filter and compressor before going to the speakers\n     * Destination.chain(lowBump, masterCompressor);\n     */\n    Destination.prototype.chain = function () {\n        var args = [];\n        for (var _i = 0; _i < arguments.length; _i++) {\n            args[_i] = arguments[_i];\n        }\n        this.input.disconnect();\n        args.unshift(this.input);\n        args.push(this.output);\n        connectSeries.apply(void 0, tslib_1.__spread(args));\n        return this;\n    };\n    /**\n     * Clean up\n     */\n    Destination.prototype.dispose = function () {\n        _super.prototype.dispose.call(this);\n        this.volume.dispose();\n        return this;\n    };\n    return Destination;\n}(ToneAudioNode));\nexport { Destination };\n//-------------------------------------\n// \tINITIALIZATION\n//-------------------------------------\nonContextInit(function (context) {\n    context.destination = new Destination({ context: context });\n});\nonContextClose(function (context) {\n    context.destination.dispose();\n});\n//# sourceMappingURL=Destination.js.map"]},"metadata":{},"sourceType":"module"}