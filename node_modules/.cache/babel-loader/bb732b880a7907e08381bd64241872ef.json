{"ast":null,"code":"import * as tslib_1 from \"tslib\";\nimport { Gain } from \"../../core/context/Gain\";\nimport { optionsFromArguments } from \"../../core/util/Defaults\";\nimport { readOnly } from \"../../core/util/Interface\";\nimport { Signal } from \"../../signal/Signal\";\nimport { WaveShaper } from \"../../signal/WaveShaper\";\nimport { Source } from \"../Source\";\nimport { Oscillator } from \"./Oscillator\";\nimport { generateWaveform } from \"./OscillatorInterface\";\n/**\n * PulseOscillator is an oscillator with control over pulse width,\n * also known as the duty cycle. At 50% duty cycle (width = 0) the wave is\n * a square wave.\n * [Read more](https://wigglewave.wordpress.com/2014/08/16/pulse-waveforms-and-harmonics/).\n * ```\n *    width = -0.25        width = 0.0          width = 0.25\n *\n *   +-----+            +-------+       +    +-------+     +-+\n *   |     |            |       |       |            |     |\n *   |     |            |       |       |            |     |\n * +-+     +-------+    +       +-------+            +-----+\n *\n *\n *    width = -0.5                              width = 0.5\n *\n *     +---+                                 +-------+   +---+\n *     |   |                                         |   |\n *     |   |                                         |   |\n * +---+   +-------+                                 +---+\n *\n *\n *    width = -0.75                             width = 0.75\n *\n *       +-+                                 +-------+ +-----+\n *       | |                                         | |\n *       | |                                         | |\n * +-----+ +-------+                                 +-+\n * ```\n * @example\n * import { PulseOscillator } from \"tone\";\n * const pulse = new PulseOscillator(\"E5\", 0.4).toDestination().start();\n * @category Source\n */\n\nvar PulseOscillator =\n/** @class */\nfunction (_super) {\n  tslib_1.__extends(PulseOscillator, _super);\n\n  function PulseOscillator() {\n    var _this = _super.call(this, optionsFromArguments(PulseOscillator.getDefaults(), arguments, [\"frequency\", \"width\"])) || this;\n\n    _this.name = \"PulseOscillator\";\n    /**\n     * gate the width amount\n     */\n\n    _this._widthGate = new Gain({\n      context: _this.context,\n      gain: 0\n    });\n    /**\n     * Threshold the signal to turn it into a square\n     */\n\n    _this._thresh = new WaveShaper({\n      context: _this.context,\n      mapping: function (val) {\n        return val <= 0 ? -1 : 1;\n      }\n    });\n    var options = optionsFromArguments(PulseOscillator.getDefaults(), arguments, [\"frequency\", \"width\"]);\n    _this.width = new Signal({\n      context: _this.context,\n      units: \"audioRange\",\n      value: options.width\n    });\n    _this._sawtooth = new Oscillator({\n      context: _this.context,\n      detune: options.detune,\n      frequency: options.frequency,\n      onstop: function () {\n        return _this.onstop(_this);\n      },\n      phase: options.phase,\n      type: \"sawtooth\"\n    });\n    _this.frequency = _this._sawtooth.frequency;\n    _this.detune = _this._sawtooth.detune; // connections\n\n    _this._sawtooth.chain(_this._thresh, _this.output);\n\n    _this.width.chain(_this._widthGate, _this._thresh);\n\n    readOnly(_this, [\"width\", \"frequency\", \"detune\"]);\n    return _this;\n  }\n\n  PulseOscillator.getDefaults = function () {\n    return Object.assign(Source.getDefaults(), {\n      detune: 0,\n      frequency: 440,\n      phase: 0,\n      type: \"pulse\",\n      width: 0.2\n    });\n  };\n  /**\n   * start the oscillator\n   */\n\n\n  PulseOscillator.prototype._start = function (time) {\n    time = this.toSeconds(time);\n\n    this._sawtooth.start(time);\n\n    this._widthGate.gain.setValueAtTime(1, time);\n  };\n  /**\n   * stop the oscillator\n   */\n\n\n  PulseOscillator.prototype._stop = function (time) {\n    time = this.toSeconds(time);\n\n    this._sawtooth.stop(time); // the width is still connected to the output.\n    // that needs to be stopped also\n\n\n    this._widthGate.gain.cancelScheduledValues(time);\n\n    this._widthGate.gain.setValueAtTime(0, time);\n  };\n\n  PulseOscillator.prototype._restart = function (time) {\n    this._sawtooth.restart(time);\n\n    this._widthGate.gain.cancelScheduledValues(time);\n\n    this._widthGate.gain.setValueAtTime(1, time);\n  };\n\n  Object.defineProperty(PulseOscillator.prototype, \"phase\", {\n    /**\n     * The phase of the oscillator in degrees.\n     */\n    get: function () {\n      return this._sawtooth.phase;\n    },\n    set: function (phase) {\n      this._sawtooth.phase = phase;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(PulseOscillator.prototype, \"type\", {\n    /**\n     * The type of the oscillator. Always returns \"pulse\".\n     */\n    get: function () {\n      return \"pulse\";\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(PulseOscillator.prototype, \"baseType\", {\n    /**\n     * The baseType of the oscillator. Always returns \"pulse\".\n     */\n    get: function () {\n      return \"pulse\";\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(PulseOscillator.prototype, \"partials\", {\n    /**\n     * The partials of the waveform. Cannot set partials for this waveform type\n     */\n    get: function () {\n      return [];\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(PulseOscillator.prototype, \"partialCount\", {\n    /**\n     * No partials for this waveform type.\n     */\n    get: function () {\n      return 0;\n    },\n    enumerable: true,\n    configurable: true\n  });\n\n  PulseOscillator.prototype.asArray = function (length) {\n    if (length === void 0) {\n      length = 1024;\n    }\n\n    return tslib_1.__awaiter(this, void 0, void 0, function () {\n      return tslib_1.__generator(this, function (_a) {\n        return [2\n        /*return*/\n        , generateWaveform(this, length)];\n      });\n    });\n  };\n  /**\n   * Clean up method.\n   */\n\n\n  PulseOscillator.prototype.dispose = function () {\n    _super.prototype.dispose.call(this);\n\n    this._sawtooth.dispose();\n\n    this.width.dispose();\n\n    this._widthGate.dispose();\n\n    this._thresh.dispose();\n\n    return this;\n  };\n\n  return PulseOscillator;\n}(Source);\n\nexport { PulseOscillator };","map":{"version":3,"sources":["../../../../Tone/source/oscillator/PulseOscillator.ts"],"names":[],"mappings":"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","sourceRoot":"","sourcesContent":["import * as tslib_1 from \"tslib\";\nimport { Gain } from \"../../core/context/Gain\";\nimport { optionsFromArguments } from \"../../core/util/Defaults\";\nimport { readOnly } from \"../../core/util/Interface\";\nimport { Signal } from \"../../signal/Signal\";\nimport { WaveShaper } from \"../../signal/WaveShaper\";\nimport { Source } from \"../Source\";\nimport { Oscillator } from \"./Oscillator\";\nimport { generateWaveform } from \"./OscillatorInterface\";\n/**\n * PulseOscillator is an oscillator with control over pulse width,\n * also known as the duty cycle. At 50% duty cycle (width = 0) the wave is\n * a square wave.\n * [Read more](https://wigglewave.wordpress.com/2014/08/16/pulse-waveforms-and-harmonics/).\n * ```\n *    width = -0.25        width = 0.0          width = 0.25\n *\n *   +-----+            +-------+       +    +-------+     +-+\n *   |     |            |       |       |            |     |\n *   |     |            |       |       |            |     |\n * +-+     +-------+    +       +-------+            +-----+\n *\n *\n *    width = -0.5                              width = 0.5\n *\n *     +---+                                 +-------+   +---+\n *     |   |                                         |   |\n *     |   |                                         |   |\n * +---+   +-------+                                 +---+\n *\n *\n *    width = -0.75                             width = 0.75\n *\n *       +-+                                 +-------+ +-----+\n *       | |                                         | |\n *       | |                                         | |\n * +-----+ +-------+                                 +-+\n * ```\n * @example\n * import { PulseOscillator } from \"tone\";\n * const pulse = new PulseOscillator(\"E5\", 0.4).toDestination().start();\n * @category Source\n */\nvar PulseOscillator = /** @class */ (function (_super) {\n    tslib_1.__extends(PulseOscillator, _super);\n    function PulseOscillator() {\n        var _this = _super.call(this, optionsFromArguments(PulseOscillator.getDefaults(), arguments, [\"frequency\", \"width\"])) || this;\n        _this.name = \"PulseOscillator\";\n        /**\n         * gate the width amount\n         */\n        _this._widthGate = new Gain({\n            context: _this.context,\n            gain: 0,\n        });\n        /**\n         * Threshold the signal to turn it into a square\n         */\n        _this._thresh = new WaveShaper({\n            context: _this.context,\n            mapping: function (val) { return val <= 0 ? -1 : 1; },\n        });\n        var options = optionsFromArguments(PulseOscillator.getDefaults(), arguments, [\"frequency\", \"width\"]);\n        _this.width = new Signal({\n            context: _this.context,\n            units: \"audioRange\",\n            value: options.width,\n        });\n        _this._sawtooth = new Oscillator({\n            context: _this.context,\n            detune: options.detune,\n            frequency: options.frequency,\n            onstop: function () { return _this.onstop(_this); },\n            phase: options.phase,\n            type: \"sawtooth\",\n        });\n        _this.frequency = _this._sawtooth.frequency;\n        _this.detune = _this._sawtooth.detune;\n        // connections\n        _this._sawtooth.chain(_this._thresh, _this.output);\n        _this.width.chain(_this._widthGate, _this._thresh);\n        readOnly(_this, [\"width\", \"frequency\", \"detune\"]);\n        return _this;\n    }\n    PulseOscillator.getDefaults = function () {\n        return Object.assign(Source.getDefaults(), {\n            detune: 0,\n            frequency: 440,\n            phase: 0,\n            type: \"pulse\",\n            width: 0.2,\n        });\n    };\n    /**\n     * start the oscillator\n     */\n    PulseOscillator.prototype._start = function (time) {\n        time = this.toSeconds(time);\n        this._sawtooth.start(time);\n        this._widthGate.gain.setValueAtTime(1, time);\n    };\n    /**\n     * stop the oscillator\n     */\n    PulseOscillator.prototype._stop = function (time) {\n        time = this.toSeconds(time);\n        this._sawtooth.stop(time);\n        // the width is still connected to the output.\n        // that needs to be stopped also\n        this._widthGate.gain.cancelScheduledValues(time);\n        this._widthGate.gain.setValueAtTime(0, time);\n    };\n    PulseOscillator.prototype._restart = function (time) {\n        this._sawtooth.restart(time);\n        this._widthGate.gain.cancelScheduledValues(time);\n        this._widthGate.gain.setValueAtTime(1, time);\n    };\n    Object.defineProperty(PulseOscillator.prototype, \"phase\", {\n        /**\n         * The phase of the oscillator in degrees.\n         */\n        get: function () {\n            return this._sawtooth.phase;\n        },\n        set: function (phase) {\n            this._sawtooth.phase = phase;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(PulseOscillator.prototype, \"type\", {\n        /**\n         * The type of the oscillator. Always returns \"pulse\".\n         */\n        get: function () {\n            return \"pulse\";\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(PulseOscillator.prototype, \"baseType\", {\n        /**\n         * The baseType of the oscillator. Always returns \"pulse\".\n         */\n        get: function () {\n            return \"pulse\";\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(PulseOscillator.prototype, \"partials\", {\n        /**\n         * The partials of the waveform. Cannot set partials for this waveform type\n         */\n        get: function () {\n            return [];\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(PulseOscillator.prototype, \"partialCount\", {\n        /**\n         * No partials for this waveform type.\n         */\n        get: function () {\n            return 0;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    PulseOscillator.prototype.asArray = function (length) {\n        if (length === void 0) { length = 1024; }\n        return tslib_1.__awaiter(this, void 0, void 0, function () {\n            return tslib_1.__generator(this, function (_a) {\n                return [2 /*return*/, generateWaveform(this, length)];\n            });\n        });\n    };\n    /**\n     * Clean up method.\n     */\n    PulseOscillator.prototype.dispose = function () {\n        _super.prototype.dispose.call(this);\n        this._sawtooth.dispose();\n        this.width.dispose();\n        this._widthGate.dispose();\n        this._thresh.dispose();\n        return this;\n    };\n    return PulseOscillator;\n}(Source));\nexport { PulseOscillator };\n//# sourceMappingURL=PulseOscillator.js.map"]},"metadata":{},"sourceType":"module"}