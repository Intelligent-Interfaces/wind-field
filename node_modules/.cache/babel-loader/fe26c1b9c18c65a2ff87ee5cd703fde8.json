{"ast":null,"code":"import * as tslib_1 from \"tslib\";\nimport { optionsFromArguments } from \"../core/util/Defaults\";\nimport { isArray, isFunction } from \"../core/util/TypeCheck\";\nimport { assert } from \"../core/util/Debug\";\nimport { Signal } from \"./Signal\";\nimport { SignalOperator } from \"./SignalOperator\";\n/**\n * Wraps the native Web Audio API\n * [WaveShaperNode](http://webaudio.github.io/web-audio-api/#the-waveshapernode-interface).\n *\n * @example\n * import { Oscillator, Signal, WaveShaper } from \"tone\";\n * const osc = new Oscillator().toDestination().start();\n * // multiply the output of the signal by 2 using the waveshaper's function\n * const timesTwo = new WaveShaper((val) => val * 2, 2048).connect(osc.frequency);\n * const signal = new Signal(440).connect(timesTwo);\n * @category Signal\n */\n\nvar WaveShaper =\n/** @class */\nfunction (_super) {\n  tslib_1.__extends(WaveShaper, _super);\n\n  function WaveShaper() {\n    var _this = _super.call(this, Object.assign(optionsFromArguments(WaveShaper.getDefaults(), arguments, [\"mapping\", \"length\"]))) || this;\n\n    _this.name = \"WaveShaper\";\n    /**\n     * the waveshaper node\n     */\n\n    _this._shaper = _this.context.createWaveShaper();\n    /**\n     * The input to the waveshaper node.\n     */\n\n    _this.input = _this._shaper;\n    /**\n     * The output from the waveshaper node\n     */\n\n    _this.output = _this._shaper;\n    var options = optionsFromArguments(WaveShaper.getDefaults(), arguments, [\"mapping\", \"length\"]);\n\n    if (isArray(options.mapping) || options.mapping instanceof Float32Array) {\n      _this.curve = Float32Array.from(options.mapping);\n    } else if (isFunction(options.mapping)) {\n      _this.setMap(options.mapping, options.length);\n    }\n\n    return _this;\n  }\n\n  WaveShaper.getDefaults = function () {\n    return Object.assign(Signal.getDefaults(), {\n      length: 1024\n    });\n  };\n  /**\n   * Uses a mapping function to set the value of the curve.\n   * @param mapping The function used to define the values.\n   *                The mapping function take two arguments:\n   *                the first is the value at the current position\n   *                which goes from -1 to 1 over the number of elements\n   *                in the curve array. The second argument is the array position.\n   * @example\n   * import { WaveShaper } from \"tone\";\n   * const shaper = new WaveShaper();\n   * // map the input signal from [-1, 1] to [0, 10]\n   * shaper.setMap((val, index) => (val + 1) * 5);\n   */\n\n\n  WaveShaper.prototype.setMap = function (mapping, length) {\n    if (length === void 0) {\n      length = 1024;\n    }\n\n    var array = new Float32Array(length);\n\n    for (var i = 0, len = length; i < len; i++) {\n      var normalized = i / (len - 1) * 2 - 1;\n      array[i] = mapping(normalized, i);\n    }\n\n    this.curve = array;\n    return this;\n  };\n\n  Object.defineProperty(WaveShaper.prototype, \"curve\", {\n    /**\n     * The array to set as the waveshaper curve. For linear curves\n     * array length does not make much difference, but for complex curves\n     * longer arrays will provide smoother interpolation.\n     */\n    get: function () {\n      return this._shaper.curve;\n    },\n    set: function (mapping) {\n      this._shaper.curve = mapping;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(WaveShaper.prototype, \"oversample\", {\n    /**\n     * Specifies what type of oversampling (if any) should be used when\n     * applying the shaping curve. Can either be \"none\", \"2x\" or \"4x\".\n     */\n    get: function () {\n      return this._shaper.oversample;\n    },\n    set: function (oversampling) {\n      var isOverSampleType = [\"none\", \"2x\", \"4x\"].some(function (str) {\n        return str.includes(oversampling);\n      });\n      assert(isOverSampleType, \"oversampling must be either 'none', '2x', or '4x'\");\n      this._shaper.oversample = oversampling;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  /**\n   * Clean up.\n   */\n\n  WaveShaper.prototype.dispose = function () {\n    _super.prototype.dispose.call(this);\n\n    this._shaper.disconnect();\n\n    return this;\n  };\n\n  return WaveShaper;\n}(SignalOperator);\n\nexport { WaveShaper };","map":{"version":3,"sources":["../../../Tone/signal/WaveShaper.ts"],"names":[],"mappings":"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","sourceRoot":"","sourcesContent":["import * as tslib_1 from \"tslib\";\nimport { optionsFromArguments } from \"../core/util/Defaults\";\nimport { isArray, isFunction } from \"../core/util/TypeCheck\";\nimport { assert } from \"../core/util/Debug\";\nimport { Signal } from \"./Signal\";\nimport { SignalOperator } from \"./SignalOperator\";\n/**\n * Wraps the native Web Audio API\n * [WaveShaperNode](http://webaudio.github.io/web-audio-api/#the-waveshapernode-interface).\n *\n * @example\n * import { Oscillator, Signal, WaveShaper } from \"tone\";\n * const osc = new Oscillator().toDestination().start();\n * // multiply the output of the signal by 2 using the waveshaper's function\n * const timesTwo = new WaveShaper((val) => val * 2, 2048).connect(osc.frequency);\n * const signal = new Signal(440).connect(timesTwo);\n * @category Signal\n */\nvar WaveShaper = /** @class */ (function (_super) {\n    tslib_1.__extends(WaveShaper, _super);\n    function WaveShaper() {\n        var _this = _super.call(this, Object.assign(optionsFromArguments(WaveShaper.getDefaults(), arguments, [\"mapping\", \"length\"]))) || this;\n        _this.name = \"WaveShaper\";\n        /**\n         * the waveshaper node\n         */\n        _this._shaper = _this.context.createWaveShaper();\n        /**\n         * The input to the waveshaper node.\n         */\n        _this.input = _this._shaper;\n        /**\n         * The output from the waveshaper node\n         */\n        _this.output = _this._shaper;\n        var options = optionsFromArguments(WaveShaper.getDefaults(), arguments, [\"mapping\", \"length\"]);\n        if (isArray(options.mapping) || options.mapping instanceof Float32Array) {\n            _this.curve = Float32Array.from(options.mapping);\n        }\n        else if (isFunction(options.mapping)) {\n            _this.setMap(options.mapping, options.length);\n        }\n        return _this;\n    }\n    WaveShaper.getDefaults = function () {\n        return Object.assign(Signal.getDefaults(), {\n            length: 1024,\n        });\n    };\n    /**\n     * Uses a mapping function to set the value of the curve.\n     * @param mapping The function used to define the values.\n     *                The mapping function take two arguments:\n     *                the first is the value at the current position\n     *                which goes from -1 to 1 over the number of elements\n     *                in the curve array. The second argument is the array position.\n     * @example\n     * import { WaveShaper } from \"tone\";\n     * const shaper = new WaveShaper();\n     * // map the input signal from [-1, 1] to [0, 10]\n     * shaper.setMap((val, index) => (val + 1) * 5);\n     */\n    WaveShaper.prototype.setMap = function (mapping, length) {\n        if (length === void 0) { length = 1024; }\n        var array = new Float32Array(length);\n        for (var i = 0, len = length; i < len; i++) {\n            var normalized = (i / (len - 1)) * 2 - 1;\n            array[i] = mapping(normalized, i);\n        }\n        this.curve = array;\n        return this;\n    };\n    Object.defineProperty(WaveShaper.prototype, \"curve\", {\n        /**\n         * The array to set as the waveshaper curve. For linear curves\n         * array length does not make much difference, but for complex curves\n         * longer arrays will provide smoother interpolation.\n         */\n        get: function () {\n            return this._shaper.curve;\n        },\n        set: function (mapping) {\n            this._shaper.curve = mapping;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(WaveShaper.prototype, \"oversample\", {\n        /**\n         * Specifies what type of oversampling (if any) should be used when\n         * applying the shaping curve. Can either be \"none\", \"2x\" or \"4x\".\n         */\n        get: function () {\n            return this._shaper.oversample;\n        },\n        set: function (oversampling) {\n            var isOverSampleType = [\"none\", \"2x\", \"4x\"].some(function (str) { return str.includes(oversampling); });\n            assert(isOverSampleType, \"oversampling must be either 'none', '2x', or '4x'\");\n            this._shaper.oversample = oversampling;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    /**\n     * Clean up.\n     */\n    WaveShaper.prototype.dispose = function () {\n        _super.prototype.dispose.call(this);\n        this._shaper.disconnect();\n        return this;\n    };\n    return WaveShaper;\n}(SignalOperator));\nexport { WaveShaper };\n//# sourceMappingURL=WaveShaper.js.map"]},"metadata":{},"sourceType":"module"}