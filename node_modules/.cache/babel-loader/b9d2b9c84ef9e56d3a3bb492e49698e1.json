{"ast":null,"code":"import * as tslib_1 from \"tslib\";\nimport { getContext } from \"../Global\";\nimport { ftom } from \"./Conversions\";\nimport { TimeBaseClass } from \"./TimeBase\";\n/**\n * TimeClass is a primitive type for encoding and decoding Time values.\n * TimeClass can be passed into the parameter of any method which takes time as an argument.\n * @param  val    The time value.\n * @param  units  The units of the value.\n * @example\n * import { Time } from \"tone\";\n * const time = Time(\"4n\"); // a quarter note\n * @category Unit\n */\n\nvar TimeClass =\n/** @class */\nfunction (_super) {\n  tslib_1.__extends(TimeClass, _super);\n\n  function TimeClass() {\n    var _this = _super !== null && _super.apply(this, arguments) || this;\n\n    _this.name = \"TimeClass\";\n    return _this;\n  }\n\n  TimeClass.prototype._getExpressions = function () {\n    var _this = this;\n\n    return Object.assign(_super.prototype._getExpressions.call(this), {\n      now: {\n        method: function (capture) {\n          return _this._now() + new _this.constructor(_this.context, capture).valueOf();\n        },\n        regexp: /^\\+(.+)/\n      },\n      quantize: {\n        method: function (capture) {\n          var quantTo = new TimeClass(_this.context, capture).valueOf();\n          return _this._secondsToUnits(_this.context.transport.nextSubdivision(quantTo));\n        },\n        regexp: /^@(.+)/\n      }\n    });\n  };\n  /**\n   * Quantize the time by the given subdivision. Optionally add a\n   * percentage which will move the time value towards the ideal\n   * quantized value by that percentage.\n   * @param  subdiv    The subdivision to quantize to\n   * @param  percent  Move the time value towards the quantized value by a percentage.\n   * @example\n   * import { Time } from \"tone\";\n   * Time(21).quantize(2); // returns 22\n   * Time(0.6).quantize(\"4n\", 0.5); // returns 0.55\n   */\n\n\n  TimeClass.prototype.quantize = function (subdiv, percent) {\n    if (percent === void 0) {\n      percent = 1;\n    }\n\n    var subdivision = new this.constructor(this.context, subdiv).valueOf();\n    var value = this.valueOf();\n    var multiple = Math.round(value / subdivision);\n    var ideal = multiple * subdivision;\n    var diff = ideal - value;\n    return value + diff * percent;\n  }; //-------------------------------------\n  // CONVERSIONS\n  //-------------------------------------\n\n  /**\n   * Convert a Time to Notation. The notation values are will be the\n   * closest representation between 1m to 128th note.\n   * @return {Notation}\n   * @example\n   * import { Time } from \"tone\";\n   * // if the Transport is at 120bpm:\n   * Time(2).toNotation(); // returns \"1m\"\n   */\n\n\n  TimeClass.prototype.toNotation = function () {\n    var _this = this;\n\n    var time = this.toSeconds();\n    var testNotations = [\"1m\"];\n\n    for (var power = 1; power < 9; power++) {\n      var subdiv = Math.pow(2, power);\n      testNotations.push(subdiv + \"n.\");\n      testNotations.push(subdiv + \"n\");\n      testNotations.push(subdiv + \"t\");\n    }\n\n    testNotations.push(\"0\"); // find the closets notation representation\n\n    var closest = testNotations[0];\n    var closestSeconds = new TimeClass(this.context, testNotations[0]).toSeconds();\n    testNotations.forEach(function (notation) {\n      var notationSeconds = new TimeClass(_this.context, notation).toSeconds();\n\n      if (Math.abs(notationSeconds - time) < Math.abs(closestSeconds - time)) {\n        closest = notation;\n        closestSeconds = notationSeconds;\n      }\n    });\n    return closest;\n  };\n  /**\n   * Return the time encoded as Bars:Beats:Sixteenths.\n   */\n\n\n  TimeClass.prototype.toBarsBeatsSixteenths = function () {\n    var quarterTime = this._beatsToUnits(1);\n\n    var quarters = this.valueOf() / quarterTime;\n    quarters = parseFloat(quarters.toFixed(4));\n    var measures = Math.floor(quarters / this._getTimeSignature());\n    var sixteenths = quarters % 1 * 4;\n    quarters = Math.floor(quarters) % this._getTimeSignature();\n    var sixteenthString = sixteenths.toString();\n\n    if (sixteenthString.length > 3) {\n      // the additional parseFloat removes insignificant trailing zeroes\n      sixteenths = parseFloat(parseFloat(sixteenthString).toFixed(3));\n    }\n\n    var progress = [measures, quarters, sixteenths];\n    return progress.join(\":\");\n  };\n  /**\n   * Return the time in ticks.\n   */\n\n\n  TimeClass.prototype.toTicks = function () {\n    var quarterTime = this._beatsToUnits(1);\n\n    var quarters = this.valueOf() / quarterTime;\n    return Math.round(quarters * this._getPPQ());\n  };\n  /**\n   * Return the time in seconds.\n   */\n\n\n  TimeClass.prototype.toSeconds = function () {\n    return this.valueOf();\n  };\n  /**\n   * Return the value as a midi note.\n   */\n\n\n  TimeClass.prototype.toMidi = function () {\n    return ftom(this.toFrequency());\n  };\n\n  TimeClass.prototype._now = function () {\n    return this.context.now();\n  };\n\n  return TimeClass;\n}(TimeBaseClass);\n\nexport { TimeClass };\n/**\n * Create a TimeClass from a time string or number.\n * @param value A value which reprsents time\n * @param units The value's units if they can't be inferred by the value.\n * @category Unit\n */\n\nexport function Time(value, units) {\n  return new TimeClass(getContext(), value, units);\n}","map":{"version":3,"sources":["../../../../Tone/core/type/Time.ts"],"names":[],"mappings":"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","sourceRoot":"","sourcesContent":["import * as tslib_1 from \"tslib\";\nimport { getContext } from \"../Global\";\nimport { ftom } from \"./Conversions\";\nimport { TimeBaseClass } from \"./TimeBase\";\n/**\n * TimeClass is a primitive type for encoding and decoding Time values.\n * TimeClass can be passed into the parameter of any method which takes time as an argument.\n * @param  val    The time value.\n * @param  units  The units of the value.\n * @example\n * import { Time } from \"tone\";\n * const time = Time(\"4n\"); // a quarter note\n * @category Unit\n */\nvar TimeClass = /** @class */ (function (_super) {\n    tslib_1.__extends(TimeClass, _super);\n    function TimeClass() {\n        var _this = _super !== null && _super.apply(this, arguments) || this;\n        _this.name = \"TimeClass\";\n        return _this;\n    }\n    TimeClass.prototype._getExpressions = function () {\n        var _this = this;\n        return Object.assign(_super.prototype._getExpressions.call(this), {\n            now: {\n                method: function (capture) {\n                    return _this._now() + new _this.constructor(_this.context, capture).valueOf();\n                },\n                regexp: /^\\+(.+)/,\n            },\n            quantize: {\n                method: function (capture) {\n                    var quantTo = new TimeClass(_this.context, capture).valueOf();\n                    return _this._secondsToUnits(_this.context.transport.nextSubdivision(quantTo));\n                },\n                regexp: /^@(.+)/,\n            },\n        });\n    };\n    /**\n     * Quantize the time by the given subdivision. Optionally add a\n     * percentage which will move the time value towards the ideal\n     * quantized value by that percentage.\n     * @param  subdiv    The subdivision to quantize to\n     * @param  percent  Move the time value towards the quantized value by a percentage.\n     * @example\n     * import { Time } from \"tone\";\n     * Time(21).quantize(2); // returns 22\n     * Time(0.6).quantize(\"4n\", 0.5); // returns 0.55\n     */\n    TimeClass.prototype.quantize = function (subdiv, percent) {\n        if (percent === void 0) { percent = 1; }\n        var subdivision = new this.constructor(this.context, subdiv).valueOf();\n        var value = this.valueOf();\n        var multiple = Math.round(value / subdivision);\n        var ideal = multiple * subdivision;\n        var diff = ideal - value;\n        return value + diff * percent;\n    };\n    //-------------------------------------\n    // CONVERSIONS\n    //-------------------------------------\n    /**\n     * Convert a Time to Notation. The notation values are will be the\n     * closest representation between 1m to 128th note.\n     * @return {Notation}\n     * @example\n     * import { Time } from \"tone\";\n     * // if the Transport is at 120bpm:\n     * Time(2).toNotation(); // returns \"1m\"\n     */\n    TimeClass.prototype.toNotation = function () {\n        var _this = this;\n        var time = this.toSeconds();\n        var testNotations = [\"1m\"];\n        for (var power = 1; power < 9; power++) {\n            var subdiv = Math.pow(2, power);\n            testNotations.push(subdiv + \"n.\");\n            testNotations.push(subdiv + \"n\");\n            testNotations.push(subdiv + \"t\");\n        }\n        testNotations.push(\"0\");\n        // find the closets notation representation\n        var closest = testNotations[0];\n        var closestSeconds = new TimeClass(this.context, testNotations[0]).toSeconds();\n        testNotations.forEach(function (notation) {\n            var notationSeconds = new TimeClass(_this.context, notation).toSeconds();\n            if (Math.abs(notationSeconds - time) < Math.abs(closestSeconds - time)) {\n                closest = notation;\n                closestSeconds = notationSeconds;\n            }\n        });\n        return closest;\n    };\n    /**\n     * Return the time encoded as Bars:Beats:Sixteenths.\n     */\n    TimeClass.prototype.toBarsBeatsSixteenths = function () {\n        var quarterTime = this._beatsToUnits(1);\n        var quarters = this.valueOf() / quarterTime;\n        quarters = parseFloat(quarters.toFixed(4));\n        var measures = Math.floor(quarters / this._getTimeSignature());\n        var sixteenths = (quarters % 1) * 4;\n        quarters = Math.floor(quarters) % this._getTimeSignature();\n        var sixteenthString = sixteenths.toString();\n        if (sixteenthString.length > 3) {\n            // the additional parseFloat removes insignificant trailing zeroes\n            sixteenths = parseFloat(parseFloat(sixteenthString).toFixed(3));\n        }\n        var progress = [measures, quarters, sixteenths];\n        return progress.join(\":\");\n    };\n    /**\n     * Return the time in ticks.\n     */\n    TimeClass.prototype.toTicks = function () {\n        var quarterTime = this._beatsToUnits(1);\n        var quarters = this.valueOf() / quarterTime;\n        return Math.round(quarters * this._getPPQ());\n    };\n    /**\n     * Return the time in seconds.\n     */\n    TimeClass.prototype.toSeconds = function () {\n        return this.valueOf();\n    };\n    /**\n     * Return the value as a midi note.\n     */\n    TimeClass.prototype.toMidi = function () {\n        return ftom(this.toFrequency());\n    };\n    TimeClass.prototype._now = function () {\n        return this.context.now();\n    };\n    return TimeClass;\n}(TimeBaseClass));\nexport { TimeClass };\n/**\n * Create a TimeClass from a time string or number.\n * @param value A value which reprsents time\n * @param units The value's units if they can't be inferred by the value.\n * @category Unit\n */\nexport function Time(value, units) {\n    return new TimeClass(getContext(), value, units);\n}\n//# sourceMappingURL=Time.js.map"]},"metadata":{},"sourceType":"module"}