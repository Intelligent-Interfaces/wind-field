{"ast":null,"code":"import * as tslib_1 from \"tslib\";\nimport { getContext } from \"../Global\";\nimport { ftom, mtof } from \"./Conversions\";\nimport { FrequencyClass } from \"./Frequency\";\n/**\n * Midi is a primitive type for encoding Time values.\n * Midi can be constructed with or without the `new` keyword. Midi can be passed\n * into the parameter of any method which takes time as an argument.\n * @category Unit\n */\n\nvar MidiClass =\n/** @class */\nfunction (_super) {\n  tslib_1.__extends(MidiClass, _super);\n\n  function MidiClass() {\n    var _this = _super !== null && _super.apply(this, arguments) || this;\n\n    _this.name = \"MidiClass\";\n    _this.defaultUnits = \"midi\";\n    return _this;\n  }\n  /**\n   * Returns the value of a frequency in the current units\n   */\n\n\n  MidiClass.prototype._frequencyToUnits = function (freq) {\n    return ftom(_super.prototype._frequencyToUnits.call(this, freq));\n  };\n  /**\n   * Returns the value of a tick in the current time units\n   */\n\n\n  MidiClass.prototype._ticksToUnits = function (ticks) {\n    return ftom(_super.prototype._ticksToUnits.call(this, ticks));\n  };\n  /**\n   * Return the value of the beats in the current units\n   */\n\n\n  MidiClass.prototype._beatsToUnits = function (beats) {\n    return ftom(_super.prototype._beatsToUnits.call(this, beats));\n  };\n  /**\n   * Returns the value of a second in the current units\n   */\n\n\n  MidiClass.prototype._secondsToUnits = function (seconds) {\n    return ftom(_super.prototype._secondsToUnits.call(this, seconds));\n  };\n  /**\n   * Return the value of the frequency as a MIDI note\n   * @example\n   * import { Midi } from \"tone\";\n   * Midi(60).toMidi(); // 60\n   */\n\n\n  MidiClass.prototype.toMidi = function () {\n    return this.valueOf();\n  };\n  /**\n   * Return the value of the frequency as a MIDI note\n   * @example\n   * import { Midi } from \"tone\";\n   * Midi(60).toFrequency(); // 261.6255653005986\n   */\n\n\n  MidiClass.prototype.toFrequency = function () {\n    return mtof(this.toMidi());\n  };\n  /**\n   * Transposes the frequency by the given number of semitones.\n   * @return A new transposed MidiClass\n   * @example\n   * import { Midi } from \"tone\";\n   * Midi(\"A4\").transpose(3); // \"C5\"\n   */\n\n\n  MidiClass.prototype.transpose = function (interval) {\n    return new MidiClass(this.context, this.toMidi() + interval);\n  };\n\n  return MidiClass;\n}(FrequencyClass);\n\nexport { MidiClass };\n/**\n * Convert a value into a FrequencyClass object.\n * @category Unit\n */\n\nexport function Midi(value, units) {\n  return new MidiClass(getContext(), value, units);\n}","map":{"version":3,"sources":["../../../../Tone/core/type/Midi.ts"],"names":[],"mappings":";AAAA,SAAS,UAAT,QAA2B,WAA3B;AACA,SAAS,IAAT,EAAe,IAAf,QAA2B,eAA3B;AACA,SAAS,cAAT,QAA8C,aAA9C;AAIA;;;;;;;AAMA,IAAA,SAAA;AAAA;AAAA,UAAA,MAAA,EAAA;AAA+B,EAAA,OAAA,CAAA,SAAA,CAAA,SAAA,EAAA,MAAA;;AAA/B,WAAA,SAAA,GAAA;AAAA,QAAA,KAAA,GAAA,MAAA,KAAA,IAAA,IAAA,MAAA,CAAA,KAAA,CAAA,IAAA,EAAA,SAAA,CAAA,IAAA,IAAA;;AAEU,IAAA,KAAA,CAAA,IAAA,GAAe,WAAf;AAEA,IAAA,KAAA,CAAA,YAAA,GAAe,MAAf;;AA4DT;AA1DA;;;;;AAGU,EAAA,SAAA,CAAA,SAAA,CAAA,iBAAA,GAAV,UAA4B,IAA5B,EAAuC;AACtC,WAAO,IAAI,CAAC,MAAA,CAAA,SAAA,CAAM,iBAAN,CAAuB,IAAvB,CAAuB,IAAvB,EAAwB,IAAxB,CAAD,CAAX;AACA,GAFS;AAIV;;;;;AAGU,EAAA,SAAA,CAAA,SAAA,CAAA,aAAA,GAAV,UAAwB,KAAxB,EAAoC;AACnC,WAAO,IAAI,CAAC,MAAA,CAAA,SAAA,CAAM,aAAN,CAAmB,IAAnB,CAAmB,IAAnB,EAAoB,KAApB,CAAD,CAAX;AACA,GAFS;AAIV;;;;;AAGU,EAAA,SAAA,CAAA,SAAA,CAAA,aAAA,GAAV,UAAwB,KAAxB,EAAqC;AACpC,WAAO,IAAI,CAAC,MAAA,CAAA,SAAA,CAAM,aAAN,CAAmB,IAAnB,CAAmB,IAAnB,EAAoB,KAApB,CAAD,CAAX;AACA,GAFS;AAIV;;;;;AAGU,EAAA,SAAA,CAAA,SAAA,CAAA,eAAA,GAAV,UAA0B,OAA1B,EAA0C;AACzC,WAAO,IAAI,CAAC,MAAA,CAAA,SAAA,CAAM,eAAN,CAAqB,IAArB,CAAqB,IAArB,EAAsB,OAAtB,CAAD,CAAX;AACA,GAFS;AAIV;;;;;;;;AAMA,EAAA,SAAA,CAAA,SAAA,CAAA,MAAA,GAAA,YAAA;AACC,WAAO,KAAK,OAAL,EAAP;AACA,GAFD;AAIA;;;;;;;;AAMA,EAAA,SAAA,CAAA,SAAA,CAAA,WAAA,GAAA,YAAA;AACC,WAAO,IAAI,CAAC,KAAK,MAAL,EAAD,CAAX;AACA,GAFD;AAIA;;;;;;;;;AAOA,EAAA,SAAA,CAAA,SAAA,CAAA,SAAA,GAAA,UAAU,QAAV,EAA4B;AAC3B,WAAO,IAAI,SAAJ,CAAc,KAAK,OAAnB,EAA4B,KAAK,MAAL,KAAgB,QAA5C,CAAP;AACA,GAFD;;AAGD,SAAA,SAAA;AAAC,CAhED,CAA+B,cAA/B,CAAA;;;AAkEA;;;;;AAIA,OAAM,SAAU,IAAV,CAAe,KAAf,EAAkC,KAAlC,EAAuD;AAC5D,SAAO,IAAI,SAAJ,CAAc,UAAU,EAAxB,EAA4B,KAA5B,EAAmC,KAAnC,CAAP;AACA","sourceRoot":"","sourcesContent":["import * as tslib_1 from \"tslib\";\nimport { getContext } from \"../Global\";\nimport { ftom, mtof } from \"./Conversions\";\nimport { FrequencyClass } from \"./Frequency\";\n/**\n * Midi is a primitive type for encoding Time values.\n * Midi can be constructed with or without the `new` keyword. Midi can be passed\n * into the parameter of any method which takes time as an argument.\n * @category Unit\n */\nvar MidiClass = /** @class */ (function (_super) {\n    tslib_1.__extends(MidiClass, _super);\n    function MidiClass() {\n        var _this = _super !== null && _super.apply(this, arguments) || this;\n        _this.name = \"MidiClass\";\n        _this.defaultUnits = \"midi\";\n        return _this;\n    }\n    /**\n     * Returns the value of a frequency in the current units\n     */\n    MidiClass.prototype._frequencyToUnits = function (freq) {\n        return ftom(_super.prototype._frequencyToUnits.call(this, freq));\n    };\n    /**\n     * Returns the value of a tick in the current time units\n     */\n    MidiClass.prototype._ticksToUnits = function (ticks) {\n        return ftom(_super.prototype._ticksToUnits.call(this, ticks));\n    };\n    /**\n     * Return the value of the beats in the current units\n     */\n    MidiClass.prototype._beatsToUnits = function (beats) {\n        return ftom(_super.prototype._beatsToUnits.call(this, beats));\n    };\n    /**\n     * Returns the value of a second in the current units\n     */\n    MidiClass.prototype._secondsToUnits = function (seconds) {\n        return ftom(_super.prototype._secondsToUnits.call(this, seconds));\n    };\n    /**\n     * Return the value of the frequency as a MIDI note\n     * @example\n     * import { Midi } from \"tone\";\n     * Midi(60).toMidi(); // 60\n     */\n    MidiClass.prototype.toMidi = function () {\n        return this.valueOf();\n    };\n    /**\n     * Return the value of the frequency as a MIDI note\n     * @example\n     * import { Midi } from \"tone\";\n     * Midi(60).toFrequency(); // 261.6255653005986\n     */\n    MidiClass.prototype.toFrequency = function () {\n        return mtof(this.toMidi());\n    };\n    /**\n     * Transposes the frequency by the given number of semitones.\n     * @return A new transposed MidiClass\n     * @example\n     * import { Midi } from \"tone\";\n     * Midi(\"A4\").transpose(3); // \"C5\"\n     */\n    MidiClass.prototype.transpose = function (interval) {\n        return new MidiClass(this.context, this.toMidi() + interval);\n    };\n    return MidiClass;\n}(FrequencyClass));\nexport { MidiClass };\n/**\n * Convert a value into a FrequencyClass object.\n * @category Unit\n */\nexport function Midi(value, units) {\n    return new MidiClass(getContext(), value, units);\n}\n//# sourceMappingURL=Midi.js.map"]},"metadata":{},"sourceType":"module"}