{"ast":null,"code":"import * as tslib_1 from \"tslib\";\nimport { ToneAudioNode } from \"../../core/context/ToneAudioNode\";\nimport { Compressor } from \"./Compressor\";\nimport { optionsFromArguments } from \"../../core/util/Defaults\";\nimport { MidSideSplit } from \"../channel/MidSideSplit\";\nimport { MidSideMerge } from \"../channel/MidSideMerge\";\nimport { readOnly } from \"../../core/util/Interface\";\n/**\n * MidSideCompressor applies two different compressors to the [[mid]]\n * and [[side]] signal components of the input. See [[MidSideSplit]] and [[MidSideMerge]].\n */\n\nvar MidSideCompressor =\n/** @class */\nfunction (_super) {\n  tslib_1.__extends(MidSideCompressor, _super);\n\n  function MidSideCompressor() {\n    var _this = _super.call(this, Object.assign(optionsFromArguments(MidSideCompressor.getDefaults(), arguments))) || this;\n\n    _this.name = \"MidSideCompressor\";\n    var options = optionsFromArguments(MidSideCompressor.getDefaults(), arguments);\n    _this._midSideSplit = _this.input = new MidSideSplit({\n      context: _this.context\n    });\n    _this._midSideMerge = _this.output = new MidSideMerge({\n      context: _this.context\n    });\n    _this.mid = new Compressor(Object.assign(options.mid, {\n      context: _this.context\n    }));\n    _this.side = new Compressor(Object.assign(options.side, {\n      context: _this.context\n    }));\n\n    _this._midSideSplit.mid.chain(_this.mid, _this._midSideMerge.mid);\n\n    _this._midSideSplit.side.chain(_this.side, _this._midSideMerge.side);\n\n    readOnly(_this, [\"mid\", \"side\"]);\n    return _this;\n  }\n\n  MidSideCompressor.getDefaults = function () {\n    return Object.assign(ToneAudioNode.getDefaults(), {\n      mid: {\n        ratio: 3,\n        threshold: -24,\n        release: 0.03,\n        attack: 0.02,\n        knee: 16\n      },\n      side: {\n        ratio: 6,\n        threshold: -30,\n        release: 0.25,\n        attack: 0.03,\n        knee: 10\n      }\n    });\n  };\n\n  MidSideCompressor.prototype.dispose = function () {\n    _super.prototype.dispose.call(this);\n\n    this.mid.dispose();\n    this.side.dispose();\n\n    this._midSideSplit.dispose();\n\n    this._midSideMerge.dispose();\n\n    return this;\n  };\n\n  return MidSideCompressor;\n}(ToneAudioNode);\n\nexport { MidSideCompressor };","map":{"version":3,"sources":["../../../../Tone/component/dynamics/MidSideCompressor.ts"],"names":[],"mappings":"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","sourceRoot":"","sourcesContent":["import * as tslib_1 from \"tslib\";\nimport { ToneAudioNode } from \"../../core/context/ToneAudioNode\";\nimport { Compressor } from \"./Compressor\";\nimport { optionsFromArguments } from \"../../core/util/Defaults\";\nimport { MidSideSplit } from \"../channel/MidSideSplit\";\nimport { MidSideMerge } from \"../channel/MidSideMerge\";\nimport { readOnly } from \"../../core/util/Interface\";\n/**\n * MidSideCompressor applies two different compressors to the [[mid]]\n * and [[side]] signal components of the input. See [[MidSideSplit]] and [[MidSideMerge]].\n */\nvar MidSideCompressor = /** @class */ (function (_super) {\n    tslib_1.__extends(MidSideCompressor, _super);\n    function MidSideCompressor() {\n        var _this = _super.call(this, Object.assign(optionsFromArguments(MidSideCompressor.getDefaults(), arguments))) || this;\n        _this.name = \"MidSideCompressor\";\n        var options = optionsFromArguments(MidSideCompressor.getDefaults(), arguments);\n        _this._midSideSplit = _this.input = new MidSideSplit({ context: _this.context });\n        _this._midSideMerge = _this.output = new MidSideMerge({ context: _this.context });\n        _this.mid = new Compressor(Object.assign(options.mid, { context: _this.context }));\n        _this.side = new Compressor(Object.assign(options.side, { context: _this.context }));\n        _this._midSideSplit.mid.chain(_this.mid, _this._midSideMerge.mid);\n        _this._midSideSplit.side.chain(_this.side, _this._midSideMerge.side);\n        readOnly(_this, [\"mid\", \"side\"]);\n        return _this;\n    }\n    MidSideCompressor.getDefaults = function () {\n        return Object.assign(ToneAudioNode.getDefaults(), {\n            mid: {\n                ratio: 3,\n                threshold: -24,\n                release: 0.03,\n                attack: 0.02,\n                knee: 16\n            },\n            side: {\n                ratio: 6,\n                threshold: -30,\n                release: 0.25,\n                attack: 0.03,\n                knee: 10\n            }\n        });\n    };\n    MidSideCompressor.prototype.dispose = function () {\n        _super.prototype.dispose.call(this);\n        this.mid.dispose();\n        this.side.dispose();\n        this._midSideSplit.dispose();\n        this._midSideMerge.dispose();\n        return this;\n    };\n    return MidSideCompressor;\n}(ToneAudioNode));\nexport { MidSideCompressor };\n//# sourceMappingURL=MidSideCompressor.js.map"]},"metadata":{},"sourceType":"module"}