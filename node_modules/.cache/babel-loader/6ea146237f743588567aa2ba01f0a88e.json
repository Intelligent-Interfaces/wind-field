{"ast":null,"code":"import * as tslib_1 from \"tslib\";\nimport { ToneAudioNode } from \"./ToneAudioNode\";\nimport { noOp } from \"../util/Interface\";\n\nvar ToneAudioWorklet =\n/** @class */\nfunction (_super) {\n  tslib_1.__extends(ToneAudioWorklet, _super);\n\n  function ToneAudioWorklet(options) {\n    var _this = _super.call(this, options) || this;\n\n    _this.name = \"ToneAudioWorklet\";\n    /**\n     * The constructor options for the node\n     */\n\n    _this.workletOptions = {};\n    /**\n     * Callback which is invoked when there is an error in the processing\n     */\n\n    _this.onprocessorerror = noOp;\n    var blobUrl = URL.createObjectURL(new Blob([_this._audioWorklet()], {\n      type: \"text/javascript\"\n    }));\n\n    var name = _this._audioWorkletName(); // Register the processor\n\n\n    _this.context.addAudioWorkletModule(blobUrl, name).then(function () {\n      // create the worklet when it's read\n      if (!_this.disposed) {\n        _this._worklet = _this.context.createAudioWorkletNode(name, _this.workletOptions);\n        _this._worklet.onprocessorerror = _this.onprocessorerror.bind(_this);\n\n        _this.onReady(_this._worklet);\n      }\n    });\n\n    return _this;\n  }\n\n  ToneAudioWorklet.prototype.dispose = function () {\n    _super.prototype.dispose.call(this);\n\n    if (this._worklet) {\n      this._worklet.disconnect();\n    }\n\n    return this;\n  };\n\n  return ToneAudioWorklet;\n}(ToneAudioNode);\n\nexport { ToneAudioWorklet };","map":{"version":3,"sources":["../../../../Tone/core/context/ToneAudioWorklet.ts"],"names":[],"mappings":";AAAA,SAAS,aAAT,QAAoD,iBAApD;AACA,SAAS,IAAT,QAAqB,mBAArB;;AAIA,IAAA,gBAAA;AAAA;AAAA,UAAA,MAAA,EAAA;AAAwF,EAAA,OAAA,CAAA,SAAA,CAAA,gBAAA,EAAA,MAAA;;AAkCvF,WAAA,gBAAA,CAAY,OAAZ,EAA4B;AAA5B,QAAA,KAAA,GACC,MAAA,CAAA,IAAA,CAAA,IAAA,EAAM,OAAN,KAAc,IADf;;AAhCS,IAAA,KAAA,CAAA,IAAA,GAAe,kBAAf;AAOT;;;;AAGU,IAAA,KAAA,CAAA,cAAA,GAAmD,EAAnD;AAiBV;;;;AAGA,IAAA,KAAA,CAAA,gBAAA,GAAwC,IAAxC;AAKC,QAAM,OAAO,GAAG,GAAG,CAAC,eAAJ,CAAoB,IAAI,IAAJ,CAAS,CAAC,KAAI,CAAC,aAAL,EAAD,CAAT,EAAiC;AAAE,MAAA,IAAI,EAAE;AAAR,KAAjC,CAApB,CAAhB;;AACA,QAAM,IAAI,GAAG,KAAI,CAAC,iBAAL,EAAb,CAJ2B,CAM3B;;;AACA,IAAA,KAAI,CAAC,OAAL,CAAa,qBAAb,CAAmC,OAAnC,EAA4C,IAA5C,EAAkD,IAAlD,CAAuD,YAAA;AACtD;AACA,UAAI,CAAC,KAAI,CAAC,QAAV,EAAoB;AACnB,QAAA,KAAI,CAAC,QAAL,GAAgB,KAAI,CAAC,OAAL,CAAa,sBAAb,CAAoC,IAApC,EAA0C,KAAI,CAAC,cAA/C,CAAhB;AACA,QAAA,KAAI,CAAC,QAAL,CAAc,gBAAd,GAAiC,KAAI,CAAC,gBAAL,CAAsB,IAAtB,CAA2B,KAA3B,CAAjC;;AACA,QAAA,KAAI,CAAC,OAAL,CAAa,KAAI,CAAC,QAAlB;AACA;AACD,KAPD;;;AAQA;;AAED,EAAA,gBAAA,CAAA,SAAA,CAAA,OAAA,GAAA,YAAA;AACC,IAAA,MAAA,CAAA,SAAA,CAAM,OAAN,CAAa,IAAb,CAAa,IAAb;;AACA,QAAI,KAAK,QAAT,EAAmB;AAClB,WAAK,QAAL,CAAc,UAAd;AACA;;AACD,WAAO,IAAP;AACA,GAND;;AAQD,SAAA,gBAAA;AAAC,CA3DD,CAAwF,aAAxF,CAAA","sourceRoot":"","sourcesContent":["import * as tslib_1 from \"tslib\";\nimport { ToneAudioNode } from \"./ToneAudioNode\";\nimport { noOp } from \"../util/Interface\";\nvar ToneAudioWorklet = /** @class */ (function (_super) {\n    tslib_1.__extends(ToneAudioWorklet, _super);\n    function ToneAudioWorklet(options) {\n        var _this = _super.call(this, options) || this;\n        _this.name = \"ToneAudioWorklet\";\n        /**\n         * The constructor options for the node\n         */\n        _this.workletOptions = {};\n        /**\n         * Callback which is invoked when there is an error in the processing\n         */\n        _this.onprocessorerror = noOp;\n        var blobUrl = URL.createObjectURL(new Blob([_this._audioWorklet()], { type: \"text/javascript\" }));\n        var name = _this._audioWorkletName();\n        // Register the processor\n        _this.context.addAudioWorkletModule(blobUrl, name).then(function () {\n            // create the worklet when it's read\n            if (!_this.disposed) {\n                _this._worklet = _this.context.createAudioWorkletNode(name, _this.workletOptions);\n                _this._worklet.onprocessorerror = _this.onprocessorerror.bind(_this);\n                _this.onReady(_this._worklet);\n            }\n        });\n        return _this;\n    }\n    ToneAudioWorklet.prototype.dispose = function () {\n        _super.prototype.dispose.call(this);\n        if (this._worklet) {\n            this._worklet.disconnect();\n        }\n        return this;\n    };\n    return ToneAudioWorklet;\n}(ToneAudioNode));\nexport { ToneAudioWorklet };\n//# sourceMappingURL=ToneAudioWorklet.js.map"]},"metadata":{},"sourceType":"module"}