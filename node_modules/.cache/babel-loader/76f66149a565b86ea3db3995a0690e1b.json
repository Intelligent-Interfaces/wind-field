{"ast":null,"code":"import * as tslib_1 from \"tslib\";\nimport { ToneAudioNode } from \"../../core/context/ToneAudioNode\";\nimport { optionsFromArguments } from \"../../core/util/Defaults\";\nimport { Solo } from \"./Solo\";\nimport { PanVol } from \"./PanVol\";\nimport { readOnly } from \"../../core/util/Interface\";\nimport { Gain } from \"../../core/context/Gain\";\n/**\n * Channel provides a channel strip interface with volume, pan, solo and mute controls.\n * See [[PanVol]] and [[Solo]]\n * @example\n * import { Channel } from \"tone\";\n * // pan the incoming signal left and drop the volume 12db\n * const channel = new Channel(-0.25, -12);\n * @category Component\n */\n\nvar Channel =\n/** @class */\nfunction (_super) {\n  tslib_1.__extends(Channel, _super);\n\n  function Channel() {\n    var _this = _super.call(this, optionsFromArguments(Channel.getDefaults(), arguments, [\"volume\", \"pan\"])) || this;\n\n    _this.name = \"Channel\";\n    var options = optionsFromArguments(Channel.getDefaults(), arguments, [\"volume\", \"pan\"]);\n    _this._solo = _this.input = new Solo({\n      solo: options.solo,\n      context: _this.context\n    });\n    _this._panVol = _this.output = new PanVol({\n      context: _this.context,\n      pan: options.pan,\n      volume: options.volume,\n      mute: options.mute\n    });\n    _this.pan = _this._panVol.pan;\n    _this.volume = _this._panVol.volume;\n\n    _this._solo.connect(_this._panVol);\n\n    readOnly(_this, [\"pan\", \"volume\"]);\n    return _this;\n  }\n\n  Channel.getDefaults = function () {\n    return Object.assign(ToneAudioNode.getDefaults(), {\n      pan: 0,\n      volume: 0,\n      mute: false,\n      solo: false\n    });\n  };\n\n  Object.defineProperty(Channel.prototype, \"solo\", {\n    /**\n     * Solo/unsolo the channel. Soloing is only relative to other [[Channels]] and [[Solo]] instances\n     */\n    get: function () {\n      return this._solo.solo;\n    },\n    set: function (solo) {\n      this._solo.solo = solo;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(Channel.prototype, \"muted\", {\n    /**\n     * If the current instance is muted, i.e. another instance is soloed,\n     * or the channel is muted\n     */\n    get: function () {\n      return this._solo.muted || this.mute;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(Channel.prototype, \"mute\", {\n    /**\n     * Mute/unmute the volume\n     */\n    get: function () {\n      return this._panVol.mute;\n    },\n    set: function (mute) {\n      this._panVol.mute = mute;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  /**\n   * Get the gain node belonging to the bus name. Create it if\n   * it doesn't exist\n   * @param name The bus name\n   */\n\n  Channel.prototype._getBus = function (name) {\n    if (!Channel.buses.has(name)) {\n      Channel.buses.set(name, new Gain({\n        context: this.context\n      }));\n    }\n\n    return Channel.buses.get(name);\n  };\n  /**\n   * Send audio to another channel using a string. `send` is a lot like\n   * [[connect]], except it uses a string instead of an object. This can\n   * be useful in large applications to decouple sections since [[send]]\n   * and [[receive]] can be invoked separately in order to connect an object\n   * @param name The channel name to send the audio\n   * @param volume The amount of the signal to send.\n   * \tDefaults to 0db, i.e. send the entire signal\n   * @returns Returns the gain node of this connection.\n   */\n\n\n  Channel.prototype.send = function (name, volume) {\n    if (volume === void 0) {\n      volume = 0;\n    }\n\n    var bus = this._getBus(name);\n\n    var sendKnob = new Gain({\n      context: this.context,\n      units: \"decibels\",\n      gain: volume\n    });\n    this.connect(sendKnob);\n    sendKnob.connect(bus);\n    return sendKnob;\n  };\n  /**\n   * Receive audio from a channel which was connected with [[send]].\n   * @param name The channel name to receive audio from.\n   */\n\n\n  Channel.prototype.receive = function (name) {\n    var bus = this._getBus(name);\n\n    bus.connect(this);\n    return this;\n  };\n\n  Channel.prototype.dispose = function () {\n    _super.prototype.dispose.call(this);\n\n    this._panVol.dispose();\n\n    this.pan.dispose();\n    this.volume.dispose();\n\n    this._solo.dispose();\n\n    return this;\n  };\n  /**\n   * Store the send/receive channels by name.\n   */\n\n\n  Channel.buses = new Map();\n  return Channel;\n}(ToneAudioNode);\n\nexport { Channel };","map":{"version":3,"sources":["../../../../Tone/component/channel/Channel.ts"],"names":[],"mappings":"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","sourceRoot":"","sourcesContent":["import * as tslib_1 from \"tslib\";\nimport { ToneAudioNode } from \"../../core/context/ToneAudioNode\";\nimport { optionsFromArguments } from \"../../core/util/Defaults\";\nimport { Solo } from \"./Solo\";\nimport { PanVol } from \"./PanVol\";\nimport { readOnly } from \"../../core/util/Interface\";\nimport { Gain } from \"../../core/context/Gain\";\n/**\n * Channel provides a channel strip interface with volume, pan, solo and mute controls.\n * See [[PanVol]] and [[Solo]]\n * @example\n * import { Channel } from \"tone\";\n * // pan the incoming signal left and drop the volume 12db\n * const channel = new Channel(-0.25, -12);\n * @category Component\n */\nvar Channel = /** @class */ (function (_super) {\n    tslib_1.__extends(Channel, _super);\n    function Channel() {\n        var _this = _super.call(this, optionsFromArguments(Channel.getDefaults(), arguments, [\"volume\", \"pan\"])) || this;\n        _this.name = \"Channel\";\n        var options = optionsFromArguments(Channel.getDefaults(), arguments, [\"volume\", \"pan\"]);\n        _this._solo = _this.input = new Solo({\n            solo: options.solo,\n            context: _this.context,\n        });\n        _this._panVol = _this.output = new PanVol({\n            context: _this.context,\n            pan: options.pan,\n            volume: options.volume,\n            mute: options.mute,\n        });\n        _this.pan = _this._panVol.pan;\n        _this.volume = _this._panVol.volume;\n        _this._solo.connect(_this._panVol);\n        readOnly(_this, [\"pan\", \"volume\"]);\n        return _this;\n    }\n    Channel.getDefaults = function () {\n        return Object.assign(ToneAudioNode.getDefaults(), {\n            pan: 0,\n            volume: 0,\n            mute: false,\n            solo: false\n        });\n    };\n    Object.defineProperty(Channel.prototype, \"solo\", {\n        /**\n         * Solo/unsolo the channel. Soloing is only relative to other [[Channels]] and [[Solo]] instances\n         */\n        get: function () {\n            return this._solo.solo;\n        },\n        set: function (solo) {\n            this._solo.solo = solo;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(Channel.prototype, \"muted\", {\n        /**\n         * If the current instance is muted, i.e. another instance is soloed,\n         * or the channel is muted\n         */\n        get: function () {\n            return this._solo.muted || this.mute;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(Channel.prototype, \"mute\", {\n        /**\n         * Mute/unmute the volume\n         */\n        get: function () {\n            return this._panVol.mute;\n        },\n        set: function (mute) {\n            this._panVol.mute = mute;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    /**\n     * Get the gain node belonging to the bus name. Create it if\n     * it doesn't exist\n     * @param name The bus name\n     */\n    Channel.prototype._getBus = function (name) {\n        if (!Channel.buses.has(name)) {\n            Channel.buses.set(name, new Gain({ context: this.context }));\n        }\n        return Channel.buses.get(name);\n    };\n    /**\n     * Send audio to another channel using a string. `send` is a lot like\n     * [[connect]], except it uses a string instead of an object. This can\n     * be useful in large applications to decouple sections since [[send]]\n     * and [[receive]] can be invoked separately in order to connect an object\n     * @param name The channel name to send the audio\n     * @param volume The amount of the signal to send.\n     * \tDefaults to 0db, i.e. send the entire signal\n     * @returns Returns the gain node of this connection.\n     */\n    Channel.prototype.send = function (name, volume) {\n        if (volume === void 0) { volume = 0; }\n        var bus = this._getBus(name);\n        var sendKnob = new Gain({\n            context: this.context,\n            units: \"decibels\",\n            gain: volume,\n        });\n        this.connect(sendKnob);\n        sendKnob.connect(bus);\n        return sendKnob;\n    };\n    /**\n     * Receive audio from a channel which was connected with [[send]].\n     * @param name The channel name to receive audio from.\n     */\n    Channel.prototype.receive = function (name) {\n        var bus = this._getBus(name);\n        bus.connect(this);\n        return this;\n    };\n    Channel.prototype.dispose = function () {\n        _super.prototype.dispose.call(this);\n        this._panVol.dispose();\n        this.pan.dispose();\n        this.volume.dispose();\n        this._solo.dispose();\n        return this;\n    };\n    /**\n     * Store the send/receive channels by name.\n     */\n    Channel.buses = new Map();\n    return Channel;\n}(ToneAudioNode));\nexport { Channel };\n//# sourceMappingURL=Channel.js.map"]},"metadata":{},"sourceType":"module"}