{"ast":null,"code":"import * as tslib_1 from \"tslib\";\nimport { AudioToGain } from \"../signal/AudioToGain\";\nimport { optionsFromArguments } from \"../core/util/Defaults\";\nimport { ModulationSynth } from \"./ModulationSynth\";\n/**\n * AMSynth uses the output of one Tone.Synth to modulate the\n * amplitude of another Tone.Synth. The harmonicity (the ratio between\n * the two signals) affects the timbre of the output signal greatly.\n * Read more about Amplitude Modulation Synthesis on\n * [SoundOnSound](https://web.archive.org/web/20160404103653/http://www.soundonsound.com:80/sos/mar00/articles/synthsecrets.htm).\n *\n * @example\n * import { AMSynth } from \"tone\";\n * const synth = new AMSynth().toDestination();\n * synth.triggerAttackRelease(\"C4\", \"4n\");\n *\n * @category Instrument\n */\n\nvar AMSynth =\n/** @class */\nfunction (_super) {\n  tslib_1.__extends(AMSynth, _super);\n\n  function AMSynth() {\n    var _this = _super.call(this, optionsFromArguments(AMSynth.getDefaults(), arguments)) || this;\n\n    _this.name = \"AMSynth\";\n    _this._modulationScale = new AudioToGain({\n      context: _this.context\n    }); // control the two voices frequency\n\n    _this.frequency.connect(_this._carrier.frequency);\n\n    _this.frequency.chain(_this.harmonicity, _this._modulator.frequency);\n\n    _this.detune.fan(_this._carrier.detune, _this._modulator.detune);\n\n    _this._modulator.chain(_this._modulationScale, _this._modulationNode.gain);\n\n    _this._carrier.chain(_this._modulationNode, _this.output);\n\n    return _this;\n  }\n\n  AMSynth.prototype.dispose = function () {\n    _super.prototype.dispose.call(this);\n\n    this._modulationScale.dispose();\n\n    return this;\n  };\n\n  return AMSynth;\n}(ModulationSynth);\n\nexport { AMSynth };","map":{"version":3,"sources":["../../../Tone/instrument/AMSynth.ts"],"names":[],"mappings":";AAAA,SAAS,WAAT,QAA4B,uBAA5B;AAEA,SAAS,oBAAT,QAAqC,uBAArC;AACA,SAAS,eAAT,QAAwD,mBAAxD;AAIA;;;;;;;;;;;;;;;AAcA,IAAA,OAAA;AAAA;AAAA,UAAA,MAAA,EAAA;AAA6B,EAAA,OAAA,CAAA,SAAA,CAAA,OAAA,EAAA,MAAA;;AAU5B,WAAA,OAAA,GAAA;AAAA,QAAA,KAAA,GACC,MAAA,CAAA,IAAA,CAAA,IAAA,EAAM,oBAAoB,CAAC,OAAO,CAAC,WAAR,EAAD,EAAwB,SAAxB,CAA1B,KAA6D,IAD9D;;AARS,IAAA,KAAA,CAAA,IAAA,GAAe,SAAf;AAWR,IAAA,KAAI,CAAC,gBAAL,GAAwB,IAAI,WAAJ,CAAgB;AACvC,MAAA,OAAO,EAAE,KAAI,CAAC;AADyB,KAAhB,CAAxB,CAHD,CAOC;;AACA,IAAA,KAAI,CAAC,SAAL,CAAe,OAAf,CAAuB,KAAI,CAAC,QAAL,CAAc,SAArC;;AACA,IAAA,KAAI,CAAC,SAAL,CAAe,KAAf,CAAqB,KAAI,CAAC,WAA1B,EAAuC,KAAI,CAAC,UAAL,CAAgB,SAAvD;;AACA,IAAA,KAAI,CAAC,MAAL,CAAY,GAAZ,CAAgB,KAAI,CAAC,QAAL,CAAc,MAA9B,EAAsC,KAAI,CAAC,UAAL,CAAgB,MAAtD;;AACA,IAAA,KAAI,CAAC,UAAL,CAAgB,KAAhB,CAAsB,KAAI,CAAC,gBAA3B,EAA6C,KAAI,CAAC,eAAL,CAAqB,IAAlE;;AACA,IAAA,KAAI,CAAC,QAAL,CAAc,KAAd,CAAoB,KAAI,CAAC,eAAzB,EAA0C,KAAI,CAAC,MAA/C;;;AACA;;AAED,EAAA,OAAA,CAAA,SAAA,CAAA,OAAA,GAAA,YAAA;AACC,IAAA,MAAA,CAAA,SAAA,CAAM,OAAN,CAAa,IAAb,CAAa,IAAb;;AACA,SAAK,gBAAL,CAAsB,OAAtB;;AACA,WAAO,IAAP;AACA,GAJD;;AAKD,SAAA,OAAA;AAAC,CA9BD,CAA6B,eAA7B,CAAA","sourceRoot":"","sourcesContent":["import * as tslib_1 from \"tslib\";\nimport { AudioToGain } from \"../signal/AudioToGain\";\nimport { optionsFromArguments } from \"../core/util/Defaults\";\nimport { ModulationSynth } from \"./ModulationSynth\";\n/**\n * AMSynth uses the output of one Tone.Synth to modulate the\n * amplitude of another Tone.Synth. The harmonicity (the ratio between\n * the two signals) affects the timbre of the output signal greatly.\n * Read more about Amplitude Modulation Synthesis on\n * [SoundOnSound](https://web.archive.org/web/20160404103653/http://www.soundonsound.com:80/sos/mar00/articles/synthsecrets.htm).\n *\n * @example\n * import { AMSynth } from \"tone\";\n * const synth = new AMSynth().toDestination();\n * synth.triggerAttackRelease(\"C4\", \"4n\");\n *\n * @category Instrument\n */\nvar AMSynth = /** @class */ (function (_super) {\n    tslib_1.__extends(AMSynth, _super);\n    function AMSynth() {\n        var _this = _super.call(this, optionsFromArguments(AMSynth.getDefaults(), arguments)) || this;\n        _this.name = \"AMSynth\";\n        _this._modulationScale = new AudioToGain({\n            context: _this.context,\n        });\n        // control the two voices frequency\n        _this.frequency.connect(_this._carrier.frequency);\n        _this.frequency.chain(_this.harmonicity, _this._modulator.frequency);\n        _this.detune.fan(_this._carrier.detune, _this._modulator.detune);\n        _this._modulator.chain(_this._modulationScale, _this._modulationNode.gain);\n        _this._carrier.chain(_this._modulationNode, _this.output);\n        return _this;\n    }\n    AMSynth.prototype.dispose = function () {\n        _super.prototype.dispose.call(this);\n        this._modulationScale.dispose();\n        return this;\n    };\n    return AMSynth;\n}(ModulationSynth));\nexport { AMSynth };\n//# sourceMappingURL=AMSynth.js.map"]},"metadata":{},"sourceType":"module"}