{"ast":null,"code":"import * as tslib_1 from \"tslib\";\nimport { Param } from \"../context/Param\";\nimport { optionsFromArguments } from \"../util/Defaults\";\nimport { readOnly } from \"../util/Interface\";\nimport { ToneAudioNode } from \"./ToneAudioNode\";\n/**\n * A thin wrapper around the Native Web Audio GainNode.\n * The GainNode is a basic building block of the Web Audio\n * API and is useful for routing audio and adjusting gains.\n * @category Core\n */\n\nvar Gain =\n/** @class */\nfunction (_super) {\n  tslib_1.__extends(Gain, _super);\n\n  function Gain() {\n    var _this = _super.call(this, optionsFromArguments(Gain.getDefaults(), arguments, [\"gain\", \"units\"])) || this;\n\n    _this.name = \"Gain\";\n    /**\n     * The wrapped GainNode.\n     */\n\n    _this._gainNode = _this.context.createGain(); // input = output\n\n    _this.input = _this._gainNode;\n    _this.output = _this._gainNode;\n    var options = optionsFromArguments(Gain.getDefaults(), arguments, [\"gain\", \"units\"]);\n    _this.gain = new Param({\n      context: _this.context,\n      convert: options.convert,\n      param: _this._gainNode.gain,\n      units: options.units,\n      value: options.gain,\n      minValue: options.minValue,\n      maxValue: options.maxValue\n    });\n    readOnly(_this, \"gain\");\n    return _this;\n  }\n\n  Gain.getDefaults = function () {\n    return Object.assign(ToneAudioNode.getDefaults(), {\n      convert: true,\n      gain: 1,\n      units: \"gain\"\n    });\n  };\n  /**\n   * Clean up.\n   */\n\n\n  Gain.prototype.dispose = function () {\n    _super.prototype.dispose.call(this);\n\n    this._gainNode.disconnect();\n\n    this.gain.dispose();\n    return this;\n  };\n\n  return Gain;\n}(ToneAudioNode);\n\nexport { Gain };","map":{"version":3,"sources":["../../../../Tone/core/context/Gain.ts"],"names":[],"mappings":";AAAA,SAAS,KAAT,QAAsB,kBAAtB;AAEA,SAAS,oBAAT,QAAqC,kBAArC;AACA,SAAS,QAAT,QAAyB,mBAAzB;AACA,SAAS,aAAT,QAAoD,iBAApD;AAUA;;;;;;;AAMA,IAAA,IAAA;AAAA;AAAA,UAAA,MAAA,EAAA;AAAyF,EAAA,OAAA,CAAA,SAAA,CAAA,IAAA,EAAA,MAAA;;AAwBxF,WAAA,IAAA,GAAA;AAAA,QAAA,KAAA,GACC,MAAA,CAAA,IAAA,CAAA,IAAA,EAAM,oBAAoB,CAAC,IAAI,CAAC,WAAL,EAAD,EAAqB,SAArB,EAAgC,CAAC,MAAD,EAAS,OAAT,CAAhC,CAA1B,KAA6E,IAD9E;;AAtBS,IAAA,KAAA,CAAA,IAAA,GAAe,MAAf;AAOT;;;;AAGQ,IAAA,KAAA,CAAA,SAAA,GAAsB,KAAI,CAAC,OAAL,CAAa,UAAb,EAAtB,CAYR,CAVA;;AACS,IAAA,KAAA,CAAA,KAAA,GAAkB,KAAI,CAAC,SAAvB;AACA,IAAA,KAAA,CAAA,MAAA,GAAmB,KAAI,CAAC,SAAxB;AAUR,QAAM,OAAO,GAAG,oBAAoB,CAAC,IAAI,CAAC,WAAL,EAAD,EAAqB,SAArB,EAAgC,CAAC,MAAD,EAAS,OAAT,CAAhC,CAApC;AAEA,IAAA,KAAI,CAAC,IAAL,GAAY,IAAI,KAAJ,CAAU;AACrB,MAAA,OAAO,EAAE,KAAI,CAAC,OADO;AAErB,MAAA,OAAO,EAAE,OAAO,CAAC,OAFI;AAGrB,MAAA,KAAK,EAAE,KAAI,CAAC,SAAL,CAAe,IAHD;AAIrB,MAAA,KAAK,EAAE,OAAO,CAAC,KAJM;AAKrB,MAAA,KAAK,EAAE,OAAO,CAAC,IALM;AAMrB,MAAA,QAAQ,EAAE,OAAO,CAAC,QANG;AAOrB,MAAA,QAAQ,EAAE,OAAO,CAAC;AAPG,KAAV,CAAZ;AASA,IAAA,QAAQ,CAAC,KAAD,EAAO,MAAP,CAAR;;AACA;;AAEM,EAAA,IAAA,CAAA,WAAA,GAAP,YAAA;AACC,WAAO,MAAM,CAAC,MAAP,CAAc,aAAa,CAAC,WAAd,EAAd,EAA2C;AACjD,MAAA,OAAO,EAAE,IADwC;AAEjD,MAAA,IAAI,EAAE,CAF2C;AAGjD,MAAA,KAAK,EAAE;AAH0C,KAA3C,CAAP;AAKA,GANM;AAQP;;;;;AAGA,EAAA,IAAA,CAAA,SAAA,CAAA,OAAA,GAAA,YAAA;AACC,IAAA,MAAA,CAAA,SAAA,CAAM,OAAN,CAAa,IAAb,CAAa,IAAb;;AACA,SAAK,SAAL,CAAe,UAAf;;AACA,SAAK,IAAL,CAAU,OAAV;AACA,WAAO,IAAP;AACA,GALD;;AAMD,SAAA,IAAA;AAAC,CAzDD,CAAyF,aAAzF,CAAA","sourceRoot":"","sourcesContent":["import * as tslib_1 from \"tslib\";\nimport { Param } from \"../context/Param\";\nimport { optionsFromArguments } from \"../util/Defaults\";\nimport { readOnly } from \"../util/Interface\";\nimport { ToneAudioNode } from \"./ToneAudioNode\";\n/**\n * A thin wrapper around the Native Web Audio GainNode.\n * The GainNode is a basic building block of the Web Audio\n * API and is useful for routing audio and adjusting gains.\n * @category Core\n */\nvar Gain = /** @class */ (function (_super) {\n    tslib_1.__extends(Gain, _super);\n    function Gain() {\n        var _this = _super.call(this, optionsFromArguments(Gain.getDefaults(), arguments, [\"gain\", \"units\"])) || this;\n        _this.name = \"Gain\";\n        /**\n         * The wrapped GainNode.\n         */\n        _this._gainNode = _this.context.createGain();\n        // input = output\n        _this.input = _this._gainNode;\n        _this.output = _this._gainNode;\n        var options = optionsFromArguments(Gain.getDefaults(), arguments, [\"gain\", \"units\"]);\n        _this.gain = new Param({\n            context: _this.context,\n            convert: options.convert,\n            param: _this._gainNode.gain,\n            units: options.units,\n            value: options.gain,\n            minValue: options.minValue,\n            maxValue: options.maxValue,\n        });\n        readOnly(_this, \"gain\");\n        return _this;\n    }\n    Gain.getDefaults = function () {\n        return Object.assign(ToneAudioNode.getDefaults(), {\n            convert: true,\n            gain: 1,\n            units: \"gain\",\n        });\n    };\n    /**\n     * Clean up.\n     */\n    Gain.prototype.dispose = function () {\n        _super.prototype.dispose.call(this);\n        this._gainNode.disconnect();\n        this.gain.dispose();\n        return this;\n    };\n    return Gain;\n}(ToneAudioNode));\nexport { Gain };\n//# sourceMappingURL=Gain.js.map"]},"metadata":{},"sourceType":"module"}