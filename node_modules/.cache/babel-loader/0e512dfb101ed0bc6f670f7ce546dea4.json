{"ast":null,"code":"import * as tslib_1 from \"tslib\";\nimport { PhaseShiftAllpass } from \"../component/filter/PhaseShiftAllpass\";\nimport { optionsFromArguments } from \"../core/util/Defaults\";\nimport { Effect } from \"../effect/Effect\";\nimport { Add } from \"../signal/Add\";\nimport { Multiply } from \"../signal/Multiply\";\nimport { Negate } from \"../signal/Negate\";\nimport { Signal } from \"../signal/Signal\";\nimport { Oscillator } from \"../source/oscillator/Oscillator\";\nimport { ToneOscillatorNode } from \"../source/oscillator/ToneOscillatorNode\";\n/**\n * FrequencyShifter can be used to shift all frequencies of a signal by a fixed amount.\n * The amount can be changed at audio rate and the effect is applied in real time.\n * The frequency shifting is implemented with a technique called single side band modulation using a ring modulator.\n * Note: Contrary to pitch shifting, all frequencies are shifted by the same amount,\n * destroying the harmonic relationship between them. This leads to the classic ring modulator timbre distortion.\n * The algorithm will produces some aliasing towards the high end, especially if your source material\n * contains a lot of high frequencies. Unfortunatelly the webaudio API does not support resampling\n * buffers in real time, so it is not possible to fix it properly. Depending on the use case it might\n * be an option to low pass filter your input before frequency shifting it to get ride of the aliasing.\n * You can find a very detailed description of the algorithm here: https://larzeitlin.github.io/RMFS/\n *\n * @example\n * import { FrequencyShifter, Oscillator } from \"tone\";\n * const input = new Oscillator(230, \"sawtooth\").start();\n * const shift = new FrequencyShifter(42).toDestination();\n * input.connect(shift);\n * @category Effect\n */\n\nvar FrequencyShifter =\n/** @class */\nfunction (_super) {\n  tslib_1.__extends(FrequencyShifter, _super);\n\n  function FrequencyShifter() {\n    var _this = _super.call(this, optionsFromArguments(FrequencyShifter.getDefaults(), arguments, [\"frequency\"])) || this;\n\n    _this.name = \"FrequencyShifter\";\n    var options = optionsFromArguments(FrequencyShifter.getDefaults(), arguments, [\"frequency\"]);\n    _this.frequency = new Signal({\n      context: _this.context,\n      units: \"frequency\",\n      value: options.frequency,\n      minValue: -_this.context.sampleRate / 2,\n      maxValue: _this.context.sampleRate / 2\n    });\n    _this._sine = new ToneOscillatorNode({\n      context: _this.context,\n      type: \"sine\"\n    });\n    _this._cosine = new Oscillator({\n      context: _this.context,\n      phase: -90,\n      type: \"sine\"\n    });\n    _this._sineMultiply = new Multiply({\n      context: _this.context\n    });\n    _this._cosineMultiply = new Multiply({\n      context: _this.context\n    });\n    _this._negate = new Negate({\n      context: _this.context\n    });\n    _this._add = new Add({\n      context: _this.context\n    });\n    _this._phaseShifter = new PhaseShiftAllpass({\n      context: _this.context\n    });\n\n    _this.effectSend.connect(_this._phaseShifter); // connect the carrier frequency signal to the two oscillators\n\n\n    _this.frequency.fan(_this._sine.frequency, _this._cosine.frequency);\n\n    _this._phaseShifter.offset90.connect(_this._cosineMultiply);\n\n    _this._cosine.connect(_this._cosineMultiply.factor);\n\n    _this._phaseShifter.connect(_this._sineMultiply);\n\n    _this._sine.connect(_this._sineMultiply.factor);\n\n    _this._sineMultiply.connect(_this._negate);\n\n    _this._cosineMultiply.connect(_this._add);\n\n    _this._negate.connect(_this._add.addend);\n\n    _this._add.connect(_this.effectReturn); // start the oscillators at the same time\n\n\n    var now = _this.immediate();\n\n    _this._sine.start(now);\n\n    _this._cosine.start(now);\n\n    return _this;\n  }\n\n  FrequencyShifter.getDefaults = function () {\n    return Object.assign(Effect.getDefaults(), {\n      frequency: 0\n    });\n  };\n\n  FrequencyShifter.prototype.dispose = function () {\n    _super.prototype.dispose.call(this);\n\n    this.frequency.dispose();\n\n    this._add.dispose();\n\n    this._cosine.dispose();\n\n    this._cosineMultiply.dispose();\n\n    this._negate.dispose();\n\n    this._phaseShifter.dispose();\n\n    this._sine.dispose();\n\n    this._sineMultiply.dispose();\n\n    return this;\n  };\n\n  return FrequencyShifter;\n}(Effect);\n\nexport { FrequencyShifter };","map":{"version":3,"sources":["../../../Tone/effect/FrequencyShifter.ts"],"names":[],"mappings":"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","sourceRoot":"","sourcesContent":["import * as tslib_1 from \"tslib\";\nimport { PhaseShiftAllpass } from \"../component/filter/PhaseShiftAllpass\";\nimport { optionsFromArguments } from \"../core/util/Defaults\";\nimport { Effect } from \"../effect/Effect\";\nimport { Add } from \"../signal/Add\";\nimport { Multiply } from \"../signal/Multiply\";\nimport { Negate } from \"../signal/Negate\";\nimport { Signal } from \"../signal/Signal\";\nimport { Oscillator } from \"../source/oscillator/Oscillator\";\nimport { ToneOscillatorNode } from \"../source/oscillator/ToneOscillatorNode\";\n/**\n * FrequencyShifter can be used to shift all frequencies of a signal by a fixed amount.\n * The amount can be changed at audio rate and the effect is applied in real time.\n * The frequency shifting is implemented with a technique called single side band modulation using a ring modulator.\n * Note: Contrary to pitch shifting, all frequencies are shifted by the same amount,\n * destroying the harmonic relationship between them. This leads to the classic ring modulator timbre distortion.\n * The algorithm will produces some aliasing towards the high end, especially if your source material\n * contains a lot of high frequencies. Unfortunatelly the webaudio API does not support resampling\n * buffers in real time, so it is not possible to fix it properly. Depending on the use case it might\n * be an option to low pass filter your input before frequency shifting it to get ride of the aliasing.\n * You can find a very detailed description of the algorithm here: https://larzeitlin.github.io/RMFS/\n *\n * @example\n * import { FrequencyShifter, Oscillator } from \"tone\";\n * const input = new Oscillator(230, \"sawtooth\").start();\n * const shift = new FrequencyShifter(42).toDestination();\n * input.connect(shift);\n * @category Effect\n */\nvar FrequencyShifter = /** @class */ (function (_super) {\n    tslib_1.__extends(FrequencyShifter, _super);\n    function FrequencyShifter() {\n        var _this = _super.call(this, optionsFromArguments(FrequencyShifter.getDefaults(), arguments, [\"frequency\"])) || this;\n        _this.name = \"FrequencyShifter\";\n        var options = optionsFromArguments(FrequencyShifter.getDefaults(), arguments, [\"frequency\"]);\n        _this.frequency = new Signal({\n            context: _this.context,\n            units: \"frequency\",\n            value: options.frequency,\n            minValue: -_this.context.sampleRate / 2,\n            maxValue: _this.context.sampleRate / 2,\n        });\n        _this._sine = new ToneOscillatorNode({\n            context: _this.context,\n            type: \"sine\",\n        });\n        _this._cosine = new Oscillator({\n            context: _this.context,\n            phase: -90,\n            type: \"sine\",\n        });\n        _this._sineMultiply = new Multiply({ context: _this.context });\n        _this._cosineMultiply = new Multiply({ context: _this.context });\n        _this._negate = new Negate({ context: _this.context });\n        _this._add = new Add({ context: _this.context });\n        _this._phaseShifter = new PhaseShiftAllpass({ context: _this.context });\n        _this.effectSend.connect(_this._phaseShifter);\n        // connect the carrier frequency signal to the two oscillators\n        _this.frequency.fan(_this._sine.frequency, _this._cosine.frequency);\n        _this._phaseShifter.offset90.connect(_this._cosineMultiply);\n        _this._cosine.connect(_this._cosineMultiply.factor);\n        _this._phaseShifter.connect(_this._sineMultiply);\n        _this._sine.connect(_this._sineMultiply.factor);\n        _this._sineMultiply.connect(_this._negate);\n        _this._cosineMultiply.connect(_this._add);\n        _this._negate.connect(_this._add.addend);\n        _this._add.connect(_this.effectReturn);\n        // start the oscillators at the same time\n        var now = _this.immediate();\n        _this._sine.start(now);\n        _this._cosine.start(now);\n        return _this;\n    }\n    FrequencyShifter.getDefaults = function () {\n        return Object.assign(Effect.getDefaults(), {\n            frequency: 0,\n        });\n    };\n    FrequencyShifter.prototype.dispose = function () {\n        _super.prototype.dispose.call(this);\n        this.frequency.dispose();\n        this._add.dispose();\n        this._cosine.dispose();\n        this._cosineMultiply.dispose();\n        this._negate.dispose();\n        this._phaseShifter.dispose();\n        this._sine.dispose();\n        this._sineMultiply.dispose();\n        return this;\n    };\n    return FrequencyShifter;\n}(Effect));\nexport { FrequencyShifter };\n//# sourceMappingURL=FrequencyShifter.js.map"]},"metadata":{},"sourceType":"module"}