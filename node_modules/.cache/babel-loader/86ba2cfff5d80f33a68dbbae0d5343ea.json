{"ast":null,"code":"import * as tslib_1 from \"tslib\";\n/**\n * Tone.js\n * @author Yotam Mann\n * @license http://opensource.org/licenses/MIT MIT License\n * @copyright 2014-2019 Yotam Mann\n */\n\nimport { version } from \"../version\";\nimport { theWindow } from \"./context/AudioContext\";\nimport { log } from \"./util/Debug\";\n/**\n * @class  Tone is the base class of all other classes.\n * @constructor\n */\n\nvar Tone =\n/** @class */\nfunction () {\n  function Tone() {\n    //-------------------------------------\n    // \tDEBUGGING\n    //-------------------------------------\n\n    /**\n     * Set this debug flag to log all events that happen in this class.\n     */\n    this.debug = false; //-------------------------------------\n    // \tDISPOSING\n    //-------------------------------------\n\n    /**\n     * Indicates if the instance was disposed\n     */\n\n    this._wasDisposed = false;\n  }\n  /**\n   * Returns all of the default options belonging to the class.\n   */\n\n\n  Tone.getDefaults = function () {\n    return {};\n  };\n  /**\n   * Prints the outputs to the console log for debugging purposes.\n   * Prints the contents only if either the object has a property\n   * called `debug` set to true, or a variable called TONE_DEBUG_CLASS\n   * is set to the name of the class.\n   * @example\n   * import { Oscillator } from \"tone\";\n   * const osc = new Oscillator();\n   * // prints all logs originating from this oscillator\n   * osc.debug = true;\n   * // calls to start/stop will print in the console\n   * osc.start();\n   */\n\n\n  Tone.prototype.log = function () {\n    var args = [];\n\n    for (var _i = 0; _i < arguments.length; _i++) {\n      args[_i] = arguments[_i];\n    } // if the object is either set to debug = true\n    // or if there is a string on the Tone.global.with the class name\n\n\n    if (this.debug || theWindow && this.toString() === theWindow.TONE_DEBUG_CLASS) {\n      log.apply(void 0, tslib_1.__spread([this], args));\n    }\n  };\n  /**\n   * disconnect and dispose.\n   */\n\n\n  Tone.prototype.dispose = function () {\n    this._wasDisposed = true;\n    return this;\n  };\n\n  Object.defineProperty(Tone.prototype, \"disposed\", {\n    /**\n     * Indicates if the instance was disposed. 'Disposing' an\n     * instance means that all of the Web Audio nodes that were\n     * created for the instance are disconnected and freed for garbage collection.\n     */\n    get: function () {\n      return this._wasDisposed;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  /**\n   * Convert the class to a string\n   * @example\n   * import { Oscillator } from \"tone\";\n   * const osc = new Oscillator();\n   * console.log(osc.toString());\n   */\n\n  Tone.prototype.toString = function () {\n    return this.name;\n  };\n  /**\n   * The version number semver\n   */\n\n\n  Tone.version = version;\n  return Tone;\n}();\n\nexport { Tone };","map":{"version":3,"sources":["../../../Tone/core/Tone.ts"],"names":[],"mappings":";AAAA;;;;;;;AAMA,SAAS,OAAT,QAAwB,YAAxB;AACA,SAAS,SAAT,QAA0B,wBAA1B;AACA,SAAS,GAAT,QAAoB,cAApB;AASA;;;;;AAIA,IAAA,IAAA;AAAA;AAAA,YAAA;AAAA,WAAA,IAAA,GAAA;AAmBC;AACA;AACA;;AAEA;;;AAGA,SAAA,KAAA,GAAQ,KAAR,CA1BD,CAiDC;AACA;AACA;;AAEA;;;;AAGQ,SAAA,YAAA,GAAe,KAAf;AA6BR;AAzEA;;;;;AAGO,EAAA,IAAA,CAAA,WAAA,GAAP,YAAA;AACC,WAAO,EAAP;AACA,GAFM;AAaP;;;;;;;;;;;;;;;AAaU,EAAA,IAAA,CAAA,SAAA,CAAA,GAAA,GAAV,YAAA;AAAc,QAAA,IAAA,GAAA,EAAA;;SAAA,IAAA,EAAA,GAAA,C,EAAA,EAAA,GAAA,SAAA,CAAA,M,EAAA,EAAA,E,EAAc;AAAd,MAAA,IAAA,CAAA,EAAA,CAAA,GAAA,SAAA,CAAA,EAAA,CAAA;KAAd,CACC;AACA;;;AACA,QAAI,KAAK,KAAL,IAAe,SAAS,IAAI,KAAK,QAAL,OAAoB,SAAS,CAAC,gBAA9D,EAAiF;AAChF,MAAA,GAAG,CAAA,KAAH,CAAG,KAAA,CAAH,EAAG,OAAA,CAAA,QAAA,CAAA,CAAC,IAAD,CAAA,EAAU,IAAV,CAAH;AACA;AACD,GANS;AAiBV;;;;;AAGA,EAAA,IAAA,CAAA,SAAA,CAAA,OAAA,GAAA,YAAA;AACC,SAAK,YAAL,GAAoB,IAApB;AACA,WAAO,IAAP;AACA,GAHD;;AAUA,EAAA,MAAA,CAAA,cAAA,CAAI,IAAA,CAAA,SAAJ,EAAI,UAAJ,EAAY;AALZ;;;;;SAKA,YAAA;AACC,aAAO,KAAK,YAAZ;AACA,KAFW;oBAAA;;AAAA,GAAZ;AAIA;;;;;;;;AAOA,EAAA,IAAA,CAAA,SAAA,CAAA,QAAA,GAAA,YAAA;AACC,WAAO,KAAK,IAAZ;AACA,GAFD;AAhFA;;;;;AAGO,EAAA,IAAA,CAAA,OAAA,GAAkB,OAAlB;AAgFR,SAAA,IAAA;AAAC,CArFD,EAAA;;SAAsB,I","sourceRoot":"","sourcesContent":["import * as tslib_1 from \"tslib\";\n/**\n * Tone.js\n * @author Yotam Mann\n * @license http://opensource.org/licenses/MIT MIT License\n * @copyright 2014-2019 Yotam Mann\n */\nimport { version } from \"../version\";\nimport { theWindow } from \"./context/AudioContext\";\nimport { log } from \"./util/Debug\";\n/**\n * @class  Tone is the base class of all other classes.\n * @constructor\n */\nvar Tone = /** @class */ (function () {\n    function Tone() {\n        //-------------------------------------\n        // \tDEBUGGING\n        //-------------------------------------\n        /**\n         * Set this debug flag to log all events that happen in this class.\n         */\n        this.debug = false;\n        //-------------------------------------\n        // \tDISPOSING\n        //-------------------------------------\n        /**\n         * Indicates if the instance was disposed\n         */\n        this._wasDisposed = false;\n    }\n    /**\n     * Returns all of the default options belonging to the class.\n     */\n    Tone.getDefaults = function () {\n        return {};\n    };\n    /**\n     * Prints the outputs to the console log for debugging purposes.\n     * Prints the contents only if either the object has a property\n     * called `debug` set to true, or a variable called TONE_DEBUG_CLASS\n     * is set to the name of the class.\n     * @example\n     * import { Oscillator } from \"tone\";\n     * const osc = new Oscillator();\n     * // prints all logs originating from this oscillator\n     * osc.debug = true;\n     * // calls to start/stop will print in the console\n     * osc.start();\n     */\n    Tone.prototype.log = function () {\n        var args = [];\n        for (var _i = 0; _i < arguments.length; _i++) {\n            args[_i] = arguments[_i];\n        }\n        // if the object is either set to debug = true\n        // or if there is a string on the Tone.global.with the class name\n        if (this.debug || (theWindow && this.toString() === theWindow.TONE_DEBUG_CLASS)) {\n            log.apply(void 0, tslib_1.__spread([this], args));\n        }\n    };\n    /**\n     * disconnect and dispose.\n     */\n    Tone.prototype.dispose = function () {\n        this._wasDisposed = true;\n        return this;\n    };\n    Object.defineProperty(Tone.prototype, \"disposed\", {\n        /**\n         * Indicates if the instance was disposed. 'Disposing' an\n         * instance means that all of the Web Audio nodes that were\n         * created for the instance are disconnected and freed for garbage collection.\n         */\n        get: function () {\n            return this._wasDisposed;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    /**\n     * Convert the class to a string\n     * @example\n     * import { Oscillator } from \"tone\";\n     * const osc = new Oscillator();\n     * console.log(osc.toString());\n     */\n    Tone.prototype.toString = function () {\n        return this.name;\n    };\n    /**\n     * The version number semver\n     */\n    Tone.version = version;\n    return Tone;\n}());\nexport { Tone };\n//# sourceMappingURL=Tone.js.map"]},"metadata":{},"sourceType":"module"}