{"ast":null,"code":"import * as tslib_1 from \"tslib\";\nimport { Gain } from \"../core/context/Gain\";\nimport { ToneAudioNode } from \"../core/context/ToneAudioNode\";\nimport { noOp } from \"../core/util/Interface\";\nimport { assert } from \"../core/util/Debug\";\n/**\n * Base class for fire-and-forget nodes\n */\n\nvar OneShotSource =\n/** @class */\nfunction (_super) {\n  tslib_1.__extends(OneShotSource, _super);\n\n  function OneShotSource(options) {\n    var _this = _super.call(this, options) || this;\n    /**\n     * The callback to invoke after the\n     * source is done playing.\n     */\n\n\n    _this.onended = noOp;\n    /**\n     * The start time\n     */\n\n    _this._startTime = -1;\n    /**\n     * The stop time\n     */\n\n    _this._stopTime = -1;\n    /**\n     * The id of the timeout\n     */\n\n    _this._timeout = -1;\n    /**\n     * The public output node\n     */\n\n    _this.output = new Gain({\n      context: _this.context,\n      gain: 0\n    });\n    /**\n     * The output gain node.\n     */\n\n    _this._gainNode = _this.output;\n    /**\n     * Get the playback state at the given time\n     */\n\n    _this.getStateAtTime = function (time) {\n      var computedTime = this.toSeconds(time);\n\n      if (this._startTime !== -1 && computedTime >= this._startTime && (this._stopTime === -1 || computedTime <= this._stopTime)) {\n        return \"started\";\n      } else {\n        return \"stopped\";\n      }\n    };\n\n    _this._fadeIn = options.fadeIn;\n    _this._fadeOut = options.fadeOut;\n    _this._curve = options.curve;\n    _this.onended = options.onended;\n    return _this;\n  }\n\n  OneShotSource.getDefaults = function () {\n    return Object.assign(ToneAudioNode.getDefaults(), {\n      curve: \"linear\",\n      fadeIn: 0,\n      fadeOut: 0,\n      onended: noOp\n    });\n  };\n  /**\n   * Start the source at the given time\n   * @param  time When to start the source\n   */\n\n\n  OneShotSource.prototype._startGain = function (time, gain) {\n    if (gain === void 0) {\n      gain = 1;\n    }\n\n    assert(this._startTime === -1, \"Source cannot be started more than once\"); // apply a fade in envelope\n\n    var fadeInTime = this.toSeconds(this._fadeIn); // record the start time\n\n    this._startTime = time + fadeInTime;\n    this._startTime = Math.max(this._startTime, this.context.currentTime); // schedule the envelope\n\n    if (fadeInTime > 0) {\n      this._gainNode.gain.setValueAtTime(0, time);\n\n      if (this._curve === \"linear\") {\n        this._gainNode.gain.linearRampToValueAtTime(gain, time + fadeInTime);\n      } else {\n        this._gainNode.gain.exponentialApproachValueAtTime(gain, time, fadeInTime);\n      }\n    } else {\n      this._gainNode.gain.setValueAtTime(gain, time);\n    }\n\n    return this;\n  };\n  /**\n   * Stop the source node at the given time.\n   * @param time When to stop the source\n   */\n\n\n  OneShotSource.prototype.stop = function (time) {\n    this.log(\"stop\", time);\n\n    this._stopGain(this.toSeconds(time));\n\n    return this;\n  };\n  /**\n   * Stop the source at the given time\n   * @param  time When to stop the source\n   */\n\n\n  OneShotSource.prototype._stopGain = function (time) {\n    var _this = this;\n\n    assert(this._startTime !== -1, \"'start' must be called before 'stop'\"); // cancel the previous stop\n\n    this.cancelStop(); // the fadeOut time\n\n    var fadeOutTime = this.toSeconds(this._fadeOut); // schedule the stop callback\n\n    this._stopTime = this.toSeconds(time) + fadeOutTime;\n    this._stopTime = Math.max(this._stopTime, this.context.currentTime);\n\n    if (fadeOutTime > 0) {\n      // start the fade out curve at the given time\n      if (this._curve === \"linear\") {\n        this._gainNode.gain.linearRampTo(0, fadeOutTime, time);\n      } else {\n        this._gainNode.gain.targetRampTo(0, fadeOutTime, time);\n      }\n    } else {\n      // stop any ongoing ramps, and set the value to 0\n      this._gainNode.gain.cancelAndHoldAtTime(time);\n\n      this._gainNode.gain.setValueAtTime(0, time);\n    }\n\n    this.context.clearTimeout(this._timeout);\n    this._timeout = this.context.setTimeout(function () {\n      // allow additional time for the exponential curve to fully decay\n      var additionalTail = _this._curve === \"exponential\" ? fadeOutTime * 2 : 0;\n\n      _this._stopSource(_this.now() + additionalTail);\n\n      _this._onended();\n    }, this._stopTime - this.context.currentTime);\n    return this;\n  };\n  /**\n   * Invoke the onended callback\n   */\n\n\n  OneShotSource.prototype._onended = function () {\n    var _this = this;\n\n    if (this.onended !== noOp) {\n      this.onended(this); // overwrite onended to make sure it only is called once\n\n      this.onended = noOp; // dispose when it's ended to free up for garbage collection only in the online context\n\n      if (!this.context.isOffline) {\n        setTimeout(function () {\n          return _this.dispose();\n        }, 1000);\n      }\n    }\n  };\n\n  Object.defineProperty(OneShotSource.prototype, \"state\", {\n    /**\n     * Get the playback state at the current time\n     */\n    get: function () {\n      return this.getStateAtTime(this.now());\n    },\n    enumerable: true,\n    configurable: true\n  });\n  /**\n   * Cancel a scheduled stop event\n   */\n\n  OneShotSource.prototype.cancelStop = function () {\n    this.log(\"cancelStop\");\n    assert(this._startTime !== -1, \"Source is not started\"); // cancel the stop envelope\n\n    this._gainNode.gain.cancelScheduledValues(this._startTime + this.sampleTime);\n\n    this.context.clearTimeout(this._timeout);\n    this._stopTime = -1;\n    return this;\n  };\n\n  OneShotSource.prototype.dispose = function () {\n    _super.prototype.dispose.call(this);\n\n    this._gainNode.disconnect();\n\n    return this;\n  };\n\n  return OneShotSource;\n}(ToneAudioNode);\n\nexport { OneShotSource };","map":{"version":3,"sources":["../../../Tone/source/OneShotSource.ts"],"names":[],"mappings":"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","sourceRoot":"","sourcesContent":["import * as tslib_1 from \"tslib\";\nimport { Gain } from \"../core/context/Gain\";\nimport { ToneAudioNode } from \"../core/context/ToneAudioNode\";\nimport { noOp } from \"../core/util/Interface\";\nimport { assert } from \"../core/util/Debug\";\n/**\n * Base class for fire-and-forget nodes\n */\nvar OneShotSource = /** @class */ (function (_super) {\n    tslib_1.__extends(OneShotSource, _super);\n    function OneShotSource(options) {\n        var _this = _super.call(this, options) || this;\n        /**\n         * The callback to invoke after the\n         * source is done playing.\n         */\n        _this.onended = noOp;\n        /**\n         * The start time\n         */\n        _this._startTime = -1;\n        /**\n         * The stop time\n         */\n        _this._stopTime = -1;\n        /**\n         * The id of the timeout\n         */\n        _this._timeout = -1;\n        /**\n         * The public output node\n         */\n        _this.output = new Gain({\n            context: _this.context,\n            gain: 0,\n        });\n        /**\n         * The output gain node.\n         */\n        _this._gainNode = _this.output;\n        /**\n         * Get the playback state at the given time\n         */\n        _this.getStateAtTime = function (time) {\n            var computedTime = this.toSeconds(time);\n            if (this._startTime !== -1 && computedTime >= this._startTime &&\n                (this._stopTime === -1 || computedTime <= this._stopTime)) {\n                return \"started\";\n            }\n            else {\n                return \"stopped\";\n            }\n        };\n        _this._fadeIn = options.fadeIn;\n        _this._fadeOut = options.fadeOut;\n        _this._curve = options.curve;\n        _this.onended = options.onended;\n        return _this;\n    }\n    OneShotSource.getDefaults = function () {\n        return Object.assign(ToneAudioNode.getDefaults(), {\n            curve: \"linear\",\n            fadeIn: 0,\n            fadeOut: 0,\n            onended: noOp,\n        });\n    };\n    /**\n     * Start the source at the given time\n     * @param  time When to start the source\n     */\n    OneShotSource.prototype._startGain = function (time, gain) {\n        if (gain === void 0) { gain = 1; }\n        assert(this._startTime === -1, \"Source cannot be started more than once\");\n        // apply a fade in envelope\n        var fadeInTime = this.toSeconds(this._fadeIn);\n        // record the start time\n        this._startTime = time + fadeInTime;\n        this._startTime = Math.max(this._startTime, this.context.currentTime);\n        // schedule the envelope\n        if (fadeInTime > 0) {\n            this._gainNode.gain.setValueAtTime(0, time);\n            if (this._curve === \"linear\") {\n                this._gainNode.gain.linearRampToValueAtTime(gain, time + fadeInTime);\n            }\n            else {\n                this._gainNode.gain.exponentialApproachValueAtTime(gain, time, fadeInTime);\n            }\n        }\n        else {\n            this._gainNode.gain.setValueAtTime(gain, time);\n        }\n        return this;\n    };\n    /**\n     * Stop the source node at the given time.\n     * @param time When to stop the source\n     */\n    OneShotSource.prototype.stop = function (time) {\n        this.log(\"stop\", time);\n        this._stopGain(this.toSeconds(time));\n        return this;\n    };\n    /**\n     * Stop the source at the given time\n     * @param  time When to stop the source\n     */\n    OneShotSource.prototype._stopGain = function (time) {\n        var _this = this;\n        assert(this._startTime !== -1, \"'start' must be called before 'stop'\");\n        // cancel the previous stop\n        this.cancelStop();\n        // the fadeOut time\n        var fadeOutTime = this.toSeconds(this._fadeOut);\n        // schedule the stop callback\n        this._stopTime = this.toSeconds(time) + fadeOutTime;\n        this._stopTime = Math.max(this._stopTime, this.context.currentTime);\n        if (fadeOutTime > 0) {\n            // start the fade out curve at the given time\n            if (this._curve === \"linear\") {\n                this._gainNode.gain.linearRampTo(0, fadeOutTime, time);\n            }\n            else {\n                this._gainNode.gain.targetRampTo(0, fadeOutTime, time);\n            }\n        }\n        else {\n            // stop any ongoing ramps, and set the value to 0\n            this._gainNode.gain.cancelAndHoldAtTime(time);\n            this._gainNode.gain.setValueAtTime(0, time);\n        }\n        this.context.clearTimeout(this._timeout);\n        this._timeout = this.context.setTimeout(function () {\n            // allow additional time for the exponential curve to fully decay\n            var additionalTail = _this._curve === \"exponential\" ? fadeOutTime * 2 : 0;\n            _this._stopSource(_this.now() + additionalTail);\n            _this._onended();\n        }, this._stopTime - this.context.currentTime);\n        return this;\n    };\n    /**\n     * Invoke the onended callback\n     */\n    OneShotSource.prototype._onended = function () {\n        var _this = this;\n        if (this.onended !== noOp) {\n            this.onended(this);\n            // overwrite onended to make sure it only is called once\n            this.onended = noOp;\n            // dispose when it's ended to free up for garbage collection only in the online context\n            if (!this.context.isOffline) {\n                setTimeout(function () { return _this.dispose(); }, 1000);\n            }\n        }\n    };\n    Object.defineProperty(OneShotSource.prototype, \"state\", {\n        /**\n         * Get the playback state at the current time\n         */\n        get: function () {\n            return this.getStateAtTime(this.now());\n        },\n        enumerable: true,\n        configurable: true\n    });\n    /**\n     * Cancel a scheduled stop event\n     */\n    OneShotSource.prototype.cancelStop = function () {\n        this.log(\"cancelStop\");\n        assert(this._startTime !== -1, \"Source is not started\");\n        // cancel the stop envelope\n        this._gainNode.gain.cancelScheduledValues(this._startTime + this.sampleTime);\n        this.context.clearTimeout(this._timeout);\n        this._stopTime = -1;\n        return this;\n    };\n    OneShotSource.prototype.dispose = function () {\n        _super.prototype.dispose.call(this);\n        this._gainNode.disconnect();\n        return this;\n    };\n    return OneShotSource;\n}(ToneAudioNode));\nexport { OneShotSource };\n//# sourceMappingURL=OneShotSource.js.map"]},"metadata":{},"sourceType":"module"}