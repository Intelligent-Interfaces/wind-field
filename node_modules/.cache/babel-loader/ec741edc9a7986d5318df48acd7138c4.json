{"ast":null,"code":"import * as tslib_1 from \"tslib\";\nimport { optionsFromArguments } from \"../core/util/Defaults\";\nimport { ToneAudioNode } from \"../core/context/ToneAudioNode\";\nimport { connectSignal } from \"./Signal\";\n/**\n * A signal operator has an input and output and modifies the signal.\n */\n\nvar SignalOperator =\n/** @class */\nfunction (_super) {\n  tslib_1.__extends(SignalOperator, _super);\n\n  function SignalOperator() {\n    return _super.call(this, Object.assign(optionsFromArguments(SignalOperator.getDefaults(), arguments, [\"context\"]))) || this;\n  }\n\n  SignalOperator.prototype.connect = function (destination, outputNum, inputNum) {\n    if (outputNum === void 0) {\n      outputNum = 0;\n    }\n\n    if (inputNum === void 0) {\n      inputNum = 0;\n    }\n\n    connectSignal(this, destination, outputNum, inputNum);\n    return this;\n  };\n\n  return SignalOperator;\n}(ToneAudioNode);\n\nexport { SignalOperator };","map":{"version":3,"sources":["../../../Tone/signal/SignalOperator.ts"],"names":[],"mappings":";AAAA,SAAS,oBAAT,QAAqC,uBAArC;AACA,SAAoB,aAApB,QAA+D,+BAA/D;AACA,SAAS,aAAT,QAA8B,UAA9B;AAIA;;;;AAGA,IAAA,cAAA;AAAA;AAAA,UAAA,MAAA,EAAA;AAAoF,EAAA,OAAA,CAAA,SAAA,CAAA,cAAA,EAAA,MAAA;;AAGnF,WAAA,cAAA,GAAA;WACC,MAAA,CAAA,IAAA,CAAA,IAAA,EAAM,MAAM,CAAC,MAAP,CAAc,oBAAoB,CAAC,cAAc,CAAC,WAAf,EAAD,EAA+B,SAA/B,EAA0C,CAAC,SAAD,CAA1C,CAAlC,CAAN,KAAgG,I;AAChG;;AAED,EAAA,cAAA,CAAA,SAAA,CAAA,OAAA,GAAA,UAAQ,WAAR,EAAgC,SAAhC,EAA+C,QAA/C,EAA2D;AAA3B,QAAA,SAAA,KAAA,KAAA,CAAA,EAAA;AAAA,MAAA,SAAA,GAAA,CAAA;AAAa;;AAAE,QAAA,QAAA,KAAA,KAAA,CAAA,EAAA;AAAA,MAAA,QAAA,GAAA,CAAA;AAAY;;AAC1D,IAAA,aAAa,CAAC,IAAD,EAAO,WAAP,EAAoB,SAApB,EAA+B,QAA/B,CAAb;AACA,WAAO,IAAP;AACA,GAHD;;AAID,SAAA,cAAA;AAAC,CAXD,CAAoF,aAApF,CAAA","sourceRoot":"","sourcesContent":["import * as tslib_1 from \"tslib\";\nimport { optionsFromArguments } from \"../core/util/Defaults\";\nimport { ToneAudioNode } from \"../core/context/ToneAudioNode\";\nimport { connectSignal } from \"./Signal\";\n/**\n * A signal operator has an input and output and modifies the signal.\n */\nvar SignalOperator = /** @class */ (function (_super) {\n    tslib_1.__extends(SignalOperator, _super);\n    function SignalOperator() {\n        return _super.call(this, Object.assign(optionsFromArguments(SignalOperator.getDefaults(), arguments, [\"context\"]))) || this;\n    }\n    SignalOperator.prototype.connect = function (destination, outputNum, inputNum) {\n        if (outputNum === void 0) { outputNum = 0; }\n        if (inputNum === void 0) { inputNum = 0; }\n        connectSignal(this, destination, outputNum, inputNum);\n        return this;\n    };\n    return SignalOperator;\n}(ToneAudioNode));\nexport { SignalOperator };\n//# sourceMappingURL=SignalOperator.js.map"]},"metadata":{},"sourceType":"module"}