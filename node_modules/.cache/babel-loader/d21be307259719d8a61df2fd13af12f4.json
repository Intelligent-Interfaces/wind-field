{"ast":null,"code":"/*! Source code licensed under Apache License 2.0. Copyright Â© 2017-current William Ngan and contributors. (https://github.com/williamngan/pts) */\nimport { Pt, Group } from \"./Pt\";\nimport { Line } from \"./Op\";\nexport class Vec {\n  static add(a, b) {\n    if (typeof b == \"number\") {\n      for (let i = 0, len = a.length; i < len; i++) a[i] += b;\n    } else {\n      for (let i = 0, len = a.length; i < len; i++) a[i] += b[i] || 0;\n    }\n\n    return a;\n  }\n\n  static subtract(a, b) {\n    if (typeof b == \"number\") {\n      for (let i = 0, len = a.length; i < len; i++) a[i] -= b;\n    } else {\n      for (let i = 0, len = a.length; i < len; i++) a[i] -= b[i] || 0;\n    }\n\n    return a;\n  }\n\n  static multiply(a, b) {\n    if (typeof b == \"number\") {\n      for (let i = 0, len = a.length; i < len; i++) a[i] *= b;\n    } else {\n      if (a.length != b.length) {\n        throw new Error(`Cannot do element-wise multiply since the array lengths don't match: ${a.toString()} multiply-with ${b.toString()}`);\n      }\n\n      for (let i = 0, len = a.length; i < len; i++) a[i] *= b[i];\n    }\n\n    return a;\n  }\n\n  static divide(a, b) {\n    if (typeof b == \"number\") {\n      if (b === 0) throw new Error(\"Cannot divide by zero\");\n\n      for (let i = 0, len = a.length; i < len; i++) a[i] /= b;\n    } else {\n      if (a.length != b.length) {\n        throw new Error(`Cannot do element-wise divide since the array lengths don't match. ${a.toString()} divide-by ${b.toString()}`);\n      }\n\n      for (let i = 0, len = a.length; i < len; i++) a[i] /= b[i];\n    }\n\n    return a;\n  }\n\n  static dot(a, b) {\n    if (a.length != b.length) throw new Error(\"Array lengths don't match\");\n    let d = 0;\n\n    for (let i = 0, len = a.length; i < len; i++) {\n      d += a[i] * b[i];\n    }\n\n    return d;\n  }\n\n  static cross2D(a, b) {\n    return a[0] * b[1] - a[1] * b[0];\n  }\n\n  static cross(a, b) {\n    return new Pt(a[1] * b[2] - a[2] * b[1], a[2] * b[0] - a[0] * b[2], a[0] * b[1] - a[1] * b[0]);\n  }\n\n  static magnitude(a) {\n    return Math.sqrt(Vec.dot(a, a));\n  }\n\n  static unit(a, magnitude = undefined) {\n    let m = magnitude === undefined ? Vec.magnitude(a) : magnitude;\n    if (m === 0) return Pt.make(a.length);\n    return Vec.divide(a, m);\n  }\n\n  static abs(a) {\n    return Vec.map(a, Math.abs);\n  }\n\n  static floor(a) {\n    return Vec.map(a, Math.floor);\n  }\n\n  static ceil(a) {\n    return Vec.map(a, Math.ceil);\n  }\n\n  static round(a) {\n    return Vec.map(a, Math.round);\n  }\n\n  static max(a) {\n    let m = Number.MIN_VALUE;\n    let index = 0;\n\n    for (let i = 0, len = a.length; i < len; i++) {\n      m = Math.max(m, a[i]);\n      if (m === a[i]) index = i;\n    }\n\n    return {\n      value: m,\n      index: index\n    };\n  }\n\n  static min(a) {\n    let m = Number.MAX_VALUE;\n    let index = 0;\n\n    for (let i = 0, len = a.length; i < len; i++) {\n      m = Math.min(m, a[i]);\n      if (m === a[i]) index = i;\n    }\n\n    return {\n      value: m,\n      index: index\n    };\n  }\n\n  static sum(a) {\n    let s = 0;\n\n    for (let i = 0, len = a.length; i < len; i++) s += a[i];\n\n    return s;\n  }\n\n  static map(a, fn) {\n    for (let i = 0, len = a.length; i < len; i++) {\n      a[i] = fn(a[i], i, a);\n    }\n\n    return a;\n  }\n\n}\nexport class Mat {\n  static add(a, b) {\n    if (typeof b != \"number\") {\n      if (a[0].length != b[0].length) throw new Error(\"Cannot add matrix if rows' and columns' size don't match.\");\n      if (a.length != b.length) throw new Error(\"Cannot add matrix if rows' and columns' size don't match.\");\n    }\n\n    let g = new Group();\n    let isNum = typeof b == \"number\";\n\n    for (let i = 0, len = a.length; i < len; i++) {\n      g.push(a[i].$add(isNum ? b : b[i]));\n    }\n\n    return g;\n  }\n\n  static multiply(a, b, transposed = false, elementwise = false) {\n    let g = new Group();\n\n    if (typeof b != \"number\") {\n      if (elementwise) {\n        if (a.length != b.length) throw new Error(\"Cannot multiply matrix element-wise because the matrices' sizes don't match.\");\n\n        for (let ai = 0, alen = a.length; ai < alen; ai++) {\n          g.push(a[ai].$multiply(b[ai]));\n        }\n      } else {\n        if (!transposed && a[0].length != b.length) throw new Error(\"Cannot multiply matrix if rows in matrix-a don't match columns in matrix-b.\");\n        if (transposed && a[0].length != b[0].length) throw new Error(\"Cannot multiply matrix if transposed and the columns in both matrices don't match.\");\n        if (!transposed) b = Mat.transpose(b);\n\n        for (let ai = 0, alen = a.length; ai < alen; ai++) {\n          let p = Pt.make(b.length, 0);\n\n          for (let bi = 0, blen = b.length; bi < blen; bi++) {\n            p[bi] = Vec.dot(a[ai], b[bi]);\n          }\n\n          g.push(p);\n        }\n      }\n    } else {\n      for (let ai = 0, alen = a.length; ai < alen; ai++) {\n        g.push(a[ai].$multiply(b));\n      }\n    }\n\n    return g;\n  }\n\n  static zipSlice(g, index, defaultValue = false) {\n    let z = [];\n\n    for (let i = 0, len = g.length; i < len; i++) {\n      if (g[i].length - 1 < index && defaultValue === false) throw `Index ${index} is out of bounds`;\n      z.push(g[i][index] || defaultValue);\n    }\n\n    return new Pt(z);\n  }\n\n  static zip(g, defaultValue = false, useLongest = false) {\n    let ps = new Group();\n    let len = useLongest ? g.reduce((a, b) => Math.max(a, b.length), 0) : g[0].length;\n\n    for (let i = 0; i < len; i++) {\n      ps.push(Mat.zipSlice(g, i, defaultValue));\n    }\n\n    return ps;\n  }\n\n  static transpose(g, defaultValue = false, useLongest = false) {\n    return Mat.zip(g, defaultValue, useLongest);\n  }\n\n  static transform2D(pt, m) {\n    let x = pt[0] * m[0][0] + pt[1] * m[1][0] + m[2][0];\n    let y = pt[0] * m[0][1] + pt[1] * m[1][1] + m[2][1];\n    return new Pt(x, y);\n  }\n\n  static scale2DMatrix(x, y) {\n    return new Group(new Pt(x, 0, 0), new Pt(0, y, 0), new Pt(0, 0, 1));\n  }\n\n  static rotate2DMatrix(cosA, sinA) {\n    return new Group(new Pt(cosA, sinA, 0), new Pt(-sinA, cosA, 0), new Pt(0, 0, 1));\n  }\n\n  static shear2DMatrix(tanX, tanY) {\n    return new Group(new Pt(1, tanX, 0), new Pt(tanY, 1, 0), new Pt(0, 0, 1));\n  }\n\n  static translate2DMatrix(x, y) {\n    return new Group(new Pt(1, 0, 0), new Pt(0, 1, 0), new Pt(x, y, 1));\n  }\n\n  static scaleAt2DMatrix(sx, sy, at) {\n    let m = Mat.scale2DMatrix(sx, sy);\n    m[2][0] = -at[0] * sx + at[0];\n    m[2][1] = -at[1] * sy + at[1];\n    return m;\n  }\n\n  static rotateAt2DMatrix(cosA, sinA, at) {\n    let m = Mat.rotate2DMatrix(cosA, sinA);\n    m[2][0] = at[0] * (1 - cosA) + at[1] * sinA;\n    m[2][1] = at[1] * (1 - cosA) - at[0] * sinA;\n    return m;\n  }\n\n  static shearAt2DMatrix(tanX, tanY, at) {\n    let m = Mat.shear2DMatrix(tanX, tanY);\n    m[2][0] = -at[1] * tanY;\n    m[2][1] = -at[0] * tanX;\n    return m;\n  }\n\n  static reflectAt2DMatrix(p1, p2) {\n    let intercept = Line.intercept(p1, p2);\n\n    if (intercept == undefined) {\n      return [new Pt([-1, 0, 0]), new Pt([0, 1, 0]), new Pt([p1[0] + p2[0], 0, 1])];\n    } else {\n      let yi = intercept.yi;\n      let ang2 = Math.atan(intercept.slope) * 2;\n      let cosA = Math.cos(ang2);\n      let sinA = Math.sin(ang2);\n      return [new Pt([cosA, sinA, 0]), new Pt([sinA, -cosA, 0]), new Pt([-yi * sinA, yi + yi * cosA, 1])];\n    }\n  }\n\n}","map":{"version":3,"sources":["/Users/erickoduniyi/Desktop/affective_chaos_control/Emulators/wind-field/node_modules/pts/dist/es2015/LinearAlgebra.js"],"names":["Pt","Group","Line","Vec","add","a","b","i","len","length","subtract","multiply","Error","toString","divide","dot","d","cross2D","cross","magnitude","Math","sqrt","unit","undefined","m","make","abs","map","floor","ceil","round","max","Number","MIN_VALUE","index","value","min","MAX_VALUE","sum","s","fn","Mat","g","isNum","push","$add","transposed","elementwise","ai","alen","$multiply","transpose","p","bi","blen","zipSlice","defaultValue","z","zip","useLongest","ps","reduce","transform2D","pt","x","y","scale2DMatrix","rotate2DMatrix","cosA","sinA","shear2DMatrix","tanX","tanY","translate2DMatrix","scaleAt2DMatrix","sx","sy","at","rotateAt2DMatrix","shearAt2DMatrix","reflectAt2DMatrix","p1","p2","intercept","yi","ang2","atan","slope","cos","sin"],"mappings":"AAAA;AACA,SAASA,EAAT,EAAaC,KAAb,QAA0B,MAA1B;AACA,SAASC,IAAT,QAAqB,MAArB;AACA,OAAO,MAAMC,GAAN,CAAU;AACb,SAAOC,GAAP,CAAWC,CAAX,EAAcC,CAAd,EAAiB;AACb,QAAI,OAAOA,CAAP,IAAY,QAAhB,EAA0B;AACtB,WAAK,IAAIC,CAAC,GAAG,CAAR,EAAWC,GAAG,GAAGH,CAAC,CAACI,MAAxB,EAAgCF,CAAC,GAAGC,GAApC,EAAyCD,CAAC,EAA1C,EACIF,CAAC,CAACE,CAAD,CAAD,IAAQD,CAAR;AACP,KAHD,MAIK;AACD,WAAK,IAAIC,CAAC,GAAG,CAAR,EAAWC,GAAG,GAAGH,CAAC,CAACI,MAAxB,EAAgCF,CAAC,GAAGC,GAApC,EAAyCD,CAAC,EAA1C,EACIF,CAAC,CAACE,CAAD,CAAD,IAAQD,CAAC,CAACC,CAAD,CAAD,IAAQ,CAAhB;AACP;;AACD,WAAOF,CAAP;AACH;;AACD,SAAOK,QAAP,CAAgBL,CAAhB,EAAmBC,CAAnB,EAAsB;AAClB,QAAI,OAAOA,CAAP,IAAY,QAAhB,EAA0B;AACtB,WAAK,IAAIC,CAAC,GAAG,CAAR,EAAWC,GAAG,GAAGH,CAAC,CAACI,MAAxB,EAAgCF,CAAC,GAAGC,GAApC,EAAyCD,CAAC,EAA1C,EACIF,CAAC,CAACE,CAAD,CAAD,IAAQD,CAAR;AACP,KAHD,MAIK;AACD,WAAK,IAAIC,CAAC,GAAG,CAAR,EAAWC,GAAG,GAAGH,CAAC,CAACI,MAAxB,EAAgCF,CAAC,GAAGC,GAApC,EAAyCD,CAAC,EAA1C,EACIF,CAAC,CAACE,CAAD,CAAD,IAAQD,CAAC,CAACC,CAAD,CAAD,IAAQ,CAAhB;AACP;;AACD,WAAOF,CAAP;AACH;;AACD,SAAOM,QAAP,CAAgBN,CAAhB,EAAmBC,CAAnB,EAAsB;AAClB,QAAI,OAAOA,CAAP,IAAY,QAAhB,EAA0B;AACtB,WAAK,IAAIC,CAAC,GAAG,CAAR,EAAWC,GAAG,GAAGH,CAAC,CAACI,MAAxB,EAAgCF,CAAC,GAAGC,GAApC,EAAyCD,CAAC,EAA1C,EACIF,CAAC,CAACE,CAAD,CAAD,IAAQD,CAAR;AACP,KAHD,MAIK;AACD,UAAID,CAAC,CAACI,MAAF,IAAYH,CAAC,CAACG,MAAlB,EAA0B;AACtB,cAAM,IAAIG,KAAJ,CAAW,wEAAuEP,CAAC,CAACQ,QAAF,EAAa,kBAAiBP,CAAC,CAACO,QAAF,EAAa,EAA7H,CAAN;AACH;;AACD,WAAK,IAAIN,CAAC,GAAG,CAAR,EAAWC,GAAG,GAAGH,CAAC,CAACI,MAAxB,EAAgCF,CAAC,GAAGC,GAApC,EAAyCD,CAAC,EAA1C,EACIF,CAAC,CAACE,CAAD,CAAD,IAAQD,CAAC,CAACC,CAAD,CAAT;AACP;;AACD,WAAOF,CAAP;AACH;;AACD,SAAOS,MAAP,CAAcT,CAAd,EAAiBC,CAAjB,EAAoB;AAChB,QAAI,OAAOA,CAAP,IAAY,QAAhB,EAA0B;AACtB,UAAIA,CAAC,KAAK,CAAV,EACI,MAAM,IAAIM,KAAJ,CAAU,uBAAV,CAAN;;AACJ,WAAK,IAAIL,CAAC,GAAG,CAAR,EAAWC,GAAG,GAAGH,CAAC,CAACI,MAAxB,EAAgCF,CAAC,GAAGC,GAApC,EAAyCD,CAAC,EAA1C,EACIF,CAAC,CAACE,CAAD,CAAD,IAAQD,CAAR;AACP,KALD,MAMK;AACD,UAAID,CAAC,CAACI,MAAF,IAAYH,CAAC,CAACG,MAAlB,EAA0B;AACtB,cAAM,IAAIG,KAAJ,CAAW,sEAAqEP,CAAC,CAACQ,QAAF,EAAa,cAAaP,CAAC,CAACO,QAAF,EAAa,EAAvH,CAAN;AACH;;AACD,WAAK,IAAIN,CAAC,GAAG,CAAR,EAAWC,GAAG,GAAGH,CAAC,CAACI,MAAxB,EAAgCF,CAAC,GAAGC,GAApC,EAAyCD,CAAC,EAA1C,EACIF,CAAC,CAACE,CAAD,CAAD,IAAQD,CAAC,CAACC,CAAD,CAAT;AACP;;AACD,WAAOF,CAAP;AACH;;AACD,SAAOU,GAAP,CAAWV,CAAX,EAAcC,CAAd,EAAiB;AACb,QAAID,CAAC,CAACI,MAAF,IAAYH,CAAC,CAACG,MAAlB,EACI,MAAM,IAAIG,KAAJ,CAAU,2BAAV,CAAN;AACJ,QAAII,CAAC,GAAG,CAAR;;AACA,SAAK,IAAIT,CAAC,GAAG,CAAR,EAAWC,GAAG,GAAGH,CAAC,CAACI,MAAxB,EAAgCF,CAAC,GAAGC,GAApC,EAAyCD,CAAC,EAA1C,EAA8C;AAC1CS,MAAAA,CAAC,IAAIX,CAAC,CAACE,CAAD,CAAD,GAAOD,CAAC,CAACC,CAAD,CAAb;AACH;;AACD,WAAOS,CAAP;AACH;;AACD,SAAOC,OAAP,CAAeZ,CAAf,EAAkBC,CAAlB,EAAqB;AACjB,WAAOD,CAAC,CAAC,CAAD,CAAD,GAAOC,CAAC,CAAC,CAAD,CAAR,GAAcD,CAAC,CAAC,CAAD,CAAD,GAAOC,CAAC,CAAC,CAAD,CAA7B;AACH;;AACD,SAAOY,KAAP,CAAab,CAAb,EAAgBC,CAAhB,EAAmB;AACf,WAAO,IAAIN,EAAJ,CAAQK,CAAC,CAAC,CAAD,CAAD,GAAOC,CAAC,CAAC,CAAD,CAAR,GAAcD,CAAC,CAAC,CAAD,CAAD,GAAOC,CAAC,CAAC,CAAD,CAA9B,EAAqCD,CAAC,CAAC,CAAD,CAAD,GAAOC,CAAC,CAAC,CAAD,CAAR,GAAcD,CAAC,CAAC,CAAD,CAAD,GAAOC,CAAC,CAAC,CAAD,CAA3D,EAAkED,CAAC,CAAC,CAAD,CAAD,GAAOC,CAAC,CAAC,CAAD,CAAR,GAAcD,CAAC,CAAC,CAAD,CAAD,GAAOC,CAAC,CAAC,CAAD,CAAxF,CAAP;AACH;;AACD,SAAOa,SAAP,CAAiBd,CAAjB,EAAoB;AAChB,WAAOe,IAAI,CAACC,IAAL,CAAUlB,GAAG,CAACY,GAAJ,CAAQV,CAAR,EAAWA,CAAX,CAAV,CAAP;AACH;;AACD,SAAOiB,IAAP,CAAYjB,CAAZ,EAAec,SAAS,GAAGI,SAA3B,EAAsC;AAClC,QAAIC,CAAC,GAAIL,SAAS,KAAKI,SAAf,GAA4BpB,GAAG,CAACgB,SAAJ,CAAcd,CAAd,CAA5B,GAA+Cc,SAAvD;AACA,QAAIK,CAAC,KAAK,CAAV,EACI,OAAOxB,EAAE,CAACyB,IAAH,CAAQpB,CAAC,CAACI,MAAV,CAAP;AACJ,WAAON,GAAG,CAACW,MAAJ,CAAWT,CAAX,EAAcmB,CAAd,CAAP;AACH;;AACD,SAAOE,GAAP,CAAWrB,CAAX,EAAc;AACV,WAAOF,GAAG,CAACwB,GAAJ,CAAQtB,CAAR,EAAWe,IAAI,CAACM,GAAhB,CAAP;AACH;;AACD,SAAOE,KAAP,CAAavB,CAAb,EAAgB;AACZ,WAAOF,GAAG,CAACwB,GAAJ,CAAQtB,CAAR,EAAWe,IAAI,CAACQ,KAAhB,CAAP;AACH;;AACD,SAAOC,IAAP,CAAYxB,CAAZ,EAAe;AACX,WAAOF,GAAG,CAACwB,GAAJ,CAAQtB,CAAR,EAAWe,IAAI,CAACS,IAAhB,CAAP;AACH;;AACD,SAAOC,KAAP,CAAazB,CAAb,EAAgB;AACZ,WAAOF,GAAG,CAACwB,GAAJ,CAAQtB,CAAR,EAAWe,IAAI,CAACU,KAAhB,CAAP;AACH;;AACD,SAAOC,GAAP,CAAW1B,CAAX,EAAc;AACV,QAAImB,CAAC,GAAGQ,MAAM,CAACC,SAAf;AACA,QAAIC,KAAK,GAAG,CAAZ;;AACA,SAAK,IAAI3B,CAAC,GAAG,CAAR,EAAWC,GAAG,GAAGH,CAAC,CAACI,MAAxB,EAAgCF,CAAC,GAAGC,GAApC,EAAyCD,CAAC,EAA1C,EAA8C;AAC1CiB,MAAAA,CAAC,GAAGJ,IAAI,CAACW,GAAL,CAASP,CAAT,EAAYnB,CAAC,CAACE,CAAD,CAAb,CAAJ;AACA,UAAIiB,CAAC,KAAKnB,CAAC,CAACE,CAAD,CAAX,EACI2B,KAAK,GAAG3B,CAAR;AACP;;AACD,WAAO;AAAE4B,MAAAA,KAAK,EAAEX,CAAT;AAAYU,MAAAA,KAAK,EAAEA;AAAnB,KAAP;AACH;;AACD,SAAOE,GAAP,CAAW/B,CAAX,EAAc;AACV,QAAImB,CAAC,GAAGQ,MAAM,CAACK,SAAf;AACA,QAAIH,KAAK,GAAG,CAAZ;;AACA,SAAK,IAAI3B,CAAC,GAAG,CAAR,EAAWC,GAAG,GAAGH,CAAC,CAACI,MAAxB,EAAgCF,CAAC,GAAGC,GAApC,EAAyCD,CAAC,EAA1C,EAA8C;AAC1CiB,MAAAA,CAAC,GAAGJ,IAAI,CAACgB,GAAL,CAASZ,CAAT,EAAYnB,CAAC,CAACE,CAAD,CAAb,CAAJ;AACA,UAAIiB,CAAC,KAAKnB,CAAC,CAACE,CAAD,CAAX,EACI2B,KAAK,GAAG3B,CAAR;AACP;;AACD,WAAO;AAAE4B,MAAAA,KAAK,EAAEX,CAAT;AAAYU,MAAAA,KAAK,EAAEA;AAAnB,KAAP;AACH;;AACD,SAAOI,GAAP,CAAWjC,CAAX,EAAc;AACV,QAAIkC,CAAC,GAAG,CAAR;;AACA,SAAK,IAAIhC,CAAC,GAAG,CAAR,EAAWC,GAAG,GAAGH,CAAC,CAACI,MAAxB,EAAgCF,CAAC,GAAGC,GAApC,EAAyCD,CAAC,EAA1C,EACIgC,CAAC,IAAIlC,CAAC,CAACE,CAAD,CAAN;;AACJ,WAAOgC,CAAP;AACH;;AACD,SAAOZ,GAAP,CAAWtB,CAAX,EAAcmC,EAAd,EAAkB;AACd,SAAK,IAAIjC,CAAC,GAAG,CAAR,EAAWC,GAAG,GAAGH,CAAC,CAACI,MAAxB,EAAgCF,CAAC,GAAGC,GAApC,EAAyCD,CAAC,EAA1C,EAA8C;AAC1CF,MAAAA,CAAC,CAACE,CAAD,CAAD,GAAOiC,EAAE,CAACnC,CAAC,CAACE,CAAD,CAAF,EAAOA,CAAP,EAAUF,CAAV,CAAT;AACH;;AACD,WAAOA,CAAP;AACH;;AAxHY;AA0HjB,OAAO,MAAMoC,GAAN,CAAU;AACb,SAAOrC,GAAP,CAAWC,CAAX,EAAcC,CAAd,EAAiB;AACb,QAAI,OAAOA,CAAP,IAAY,QAAhB,EAA0B;AACtB,UAAID,CAAC,CAAC,CAAD,CAAD,CAAKI,MAAL,IAAeH,CAAC,CAAC,CAAD,CAAD,CAAKG,MAAxB,EACI,MAAM,IAAIG,KAAJ,CAAU,2DAAV,CAAN;AACJ,UAAIP,CAAC,CAACI,MAAF,IAAYH,CAAC,CAACG,MAAlB,EACI,MAAM,IAAIG,KAAJ,CAAU,2DAAV,CAAN;AACP;;AACD,QAAI8B,CAAC,GAAG,IAAIzC,KAAJ,EAAR;AACA,QAAI0C,KAAK,GAAG,OAAOrC,CAAP,IAAY,QAAxB;;AACA,SAAK,IAAIC,CAAC,GAAG,CAAR,EAAWC,GAAG,GAAGH,CAAC,CAACI,MAAxB,EAAgCF,CAAC,GAAGC,GAApC,EAAyCD,CAAC,EAA1C,EAA8C;AAC1CmC,MAAAA,CAAC,CAACE,IAAF,CAAOvC,CAAC,CAACE,CAAD,CAAD,CAAKsC,IAAL,CAAWF,KAAD,GAAUrC,CAAV,GAAcA,CAAC,CAACC,CAAD,CAAzB,CAAP;AACH;;AACD,WAAOmC,CAAP;AACH;;AACD,SAAO/B,QAAP,CAAgBN,CAAhB,EAAmBC,CAAnB,EAAsBwC,UAAU,GAAG,KAAnC,EAA0CC,WAAW,GAAG,KAAxD,EAA+D;AAC3D,QAAIL,CAAC,GAAG,IAAIzC,KAAJ,EAAR;;AACA,QAAI,OAAOK,CAAP,IAAY,QAAhB,EAA0B;AACtB,UAAIyC,WAAJ,EAAiB;AACb,YAAI1C,CAAC,CAACI,MAAF,IAAYH,CAAC,CAACG,MAAlB,EACI,MAAM,IAAIG,KAAJ,CAAU,8EAAV,CAAN;;AACJ,aAAK,IAAIoC,EAAE,GAAG,CAAT,EAAYC,IAAI,GAAG5C,CAAC,CAACI,MAA1B,EAAkCuC,EAAE,GAAGC,IAAvC,EAA6CD,EAAE,EAA/C,EAAmD;AAC/CN,UAAAA,CAAC,CAACE,IAAF,CAAOvC,CAAC,CAAC2C,EAAD,CAAD,CAAME,SAAN,CAAgB5C,CAAC,CAAC0C,EAAD,CAAjB,CAAP;AACH;AACJ,OAND,MAOK;AACD,YAAI,CAACF,UAAD,IAAezC,CAAC,CAAC,CAAD,CAAD,CAAKI,MAAL,IAAeH,CAAC,CAACG,MAApC,EACI,MAAM,IAAIG,KAAJ,CAAU,6EAAV,CAAN;AACJ,YAAIkC,UAAU,IAAIzC,CAAC,CAAC,CAAD,CAAD,CAAKI,MAAL,IAAeH,CAAC,CAAC,CAAD,CAAD,CAAKG,MAAtC,EACI,MAAM,IAAIG,KAAJ,CAAU,oFAAV,CAAN;AACJ,YAAI,CAACkC,UAAL,EACIxC,CAAC,GAAGmC,GAAG,CAACU,SAAJ,CAAc7C,CAAd,CAAJ;;AACJ,aAAK,IAAI0C,EAAE,GAAG,CAAT,EAAYC,IAAI,GAAG5C,CAAC,CAACI,MAA1B,EAAkCuC,EAAE,GAAGC,IAAvC,EAA6CD,EAAE,EAA/C,EAAmD;AAC/C,cAAII,CAAC,GAAGpD,EAAE,CAACyB,IAAH,CAAQnB,CAAC,CAACG,MAAV,EAAkB,CAAlB,CAAR;;AACA,eAAK,IAAI4C,EAAE,GAAG,CAAT,EAAYC,IAAI,GAAGhD,CAAC,CAACG,MAA1B,EAAkC4C,EAAE,GAAGC,IAAvC,EAA6CD,EAAE,EAA/C,EAAmD;AAC/CD,YAAAA,CAAC,CAACC,EAAD,CAAD,GAAQlD,GAAG,CAACY,GAAJ,CAAQV,CAAC,CAAC2C,EAAD,CAAT,EAAe1C,CAAC,CAAC+C,EAAD,CAAhB,CAAR;AACH;;AACDX,UAAAA,CAAC,CAACE,IAAF,CAAOQ,CAAP;AACH;AACJ;AACJ,KAvBD,MAwBK;AACD,WAAK,IAAIJ,EAAE,GAAG,CAAT,EAAYC,IAAI,GAAG5C,CAAC,CAACI,MAA1B,EAAkCuC,EAAE,GAAGC,IAAvC,EAA6CD,EAAE,EAA/C,EAAmD;AAC/CN,QAAAA,CAAC,CAACE,IAAF,CAAOvC,CAAC,CAAC2C,EAAD,CAAD,CAAME,SAAN,CAAgB5C,CAAhB,CAAP;AACH;AACJ;;AACD,WAAOoC,CAAP;AACH;;AACD,SAAOa,QAAP,CAAgBb,CAAhB,EAAmBR,KAAnB,EAA0BsB,YAAY,GAAG,KAAzC,EAAgD;AAC5C,QAAIC,CAAC,GAAG,EAAR;;AACA,SAAK,IAAIlD,CAAC,GAAG,CAAR,EAAWC,GAAG,GAAGkC,CAAC,CAACjC,MAAxB,EAAgCF,CAAC,GAAGC,GAApC,EAAyCD,CAAC,EAA1C,EAA8C;AAC1C,UAAImC,CAAC,CAACnC,CAAD,CAAD,CAAKE,MAAL,GAAc,CAAd,GAAkByB,KAAlB,IAA2BsB,YAAY,KAAK,KAAhD,EACI,MAAO,SAAQtB,KAAM,mBAArB;AACJuB,MAAAA,CAAC,CAACb,IAAF,CAAOF,CAAC,CAACnC,CAAD,CAAD,CAAK2B,KAAL,KAAesB,YAAtB;AACH;;AACD,WAAO,IAAIxD,EAAJ,CAAOyD,CAAP,CAAP;AACH;;AACD,SAAOC,GAAP,CAAWhB,CAAX,EAAcc,YAAY,GAAG,KAA7B,EAAoCG,UAAU,GAAG,KAAjD,EAAwD;AACpD,QAAIC,EAAE,GAAG,IAAI3D,KAAJ,EAAT;AACA,QAAIO,GAAG,GAAImD,UAAD,GAAejB,CAAC,CAACmB,MAAF,CAAS,CAACxD,CAAD,EAAIC,CAAJ,KAAUc,IAAI,CAACW,GAAL,CAAS1B,CAAT,EAAYC,CAAC,CAACG,MAAd,CAAnB,EAA0C,CAA1C,CAAf,GAA8DiC,CAAC,CAAC,CAAD,CAAD,CAAKjC,MAA7E;;AACA,SAAK,IAAIF,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGC,GAApB,EAAyBD,CAAC,EAA1B,EAA8B;AAC1BqD,MAAAA,EAAE,CAAChB,IAAH,CAAQH,GAAG,CAACc,QAAJ,CAAab,CAAb,EAAgBnC,CAAhB,EAAmBiD,YAAnB,CAAR;AACH;;AACD,WAAOI,EAAP;AACH;;AACD,SAAOT,SAAP,CAAiBT,CAAjB,EAAoBc,YAAY,GAAG,KAAnC,EAA0CG,UAAU,GAAG,KAAvD,EAA8D;AAC1D,WAAOlB,GAAG,CAACiB,GAAJ,CAAQhB,CAAR,EAAWc,YAAX,EAAyBG,UAAzB,CAAP;AACH;;AACD,SAAOG,WAAP,CAAmBC,EAAnB,EAAuBvC,CAAvB,EAA0B;AACtB,QAAIwC,CAAC,GAAGD,EAAE,CAAC,CAAD,CAAF,GAAQvC,CAAC,CAAC,CAAD,CAAD,CAAK,CAAL,CAAR,GAAkBuC,EAAE,CAAC,CAAD,CAAF,GAAQvC,CAAC,CAAC,CAAD,CAAD,CAAK,CAAL,CAA1B,GAAoCA,CAAC,CAAC,CAAD,CAAD,CAAK,CAAL,CAA5C;AACA,QAAIyC,CAAC,GAAGF,EAAE,CAAC,CAAD,CAAF,GAAQvC,CAAC,CAAC,CAAD,CAAD,CAAK,CAAL,CAAR,GAAkBuC,EAAE,CAAC,CAAD,CAAF,GAAQvC,CAAC,CAAC,CAAD,CAAD,CAAK,CAAL,CAA1B,GAAoCA,CAAC,CAAC,CAAD,CAAD,CAAK,CAAL,CAA5C;AACA,WAAO,IAAIxB,EAAJ,CAAOgE,CAAP,EAAUC,CAAV,CAAP;AACH;;AACD,SAAOC,aAAP,CAAqBF,CAArB,EAAwBC,CAAxB,EAA2B;AACvB,WAAO,IAAIhE,KAAJ,CAAU,IAAID,EAAJ,CAAOgE,CAAP,EAAU,CAAV,EAAa,CAAb,CAAV,EAA2B,IAAIhE,EAAJ,CAAO,CAAP,EAAUiE,CAAV,EAAa,CAAb,CAA3B,EAA4C,IAAIjE,EAAJ,CAAO,CAAP,EAAU,CAAV,EAAa,CAAb,CAA5C,CAAP;AACH;;AACD,SAAOmE,cAAP,CAAsBC,IAAtB,EAA4BC,IAA5B,EAAkC;AAC9B,WAAO,IAAIpE,KAAJ,CAAU,IAAID,EAAJ,CAAOoE,IAAP,EAAaC,IAAb,EAAmB,CAAnB,CAAV,EAAiC,IAAIrE,EAAJ,CAAO,CAACqE,IAAR,EAAcD,IAAd,EAAoB,CAApB,CAAjC,EAAyD,IAAIpE,EAAJ,CAAO,CAAP,EAAU,CAAV,EAAa,CAAb,CAAzD,CAAP;AACH;;AACD,SAAOsE,aAAP,CAAqBC,IAArB,EAA2BC,IAA3B,EAAiC;AAC7B,WAAO,IAAIvE,KAAJ,CAAU,IAAID,EAAJ,CAAO,CAAP,EAAUuE,IAAV,EAAgB,CAAhB,CAAV,EAA8B,IAAIvE,EAAJ,CAAOwE,IAAP,EAAa,CAAb,EAAgB,CAAhB,CAA9B,EAAkD,IAAIxE,EAAJ,CAAO,CAAP,EAAU,CAAV,EAAa,CAAb,CAAlD,CAAP;AACH;;AACD,SAAOyE,iBAAP,CAAyBT,CAAzB,EAA4BC,CAA5B,EAA+B;AAC3B,WAAO,IAAIhE,KAAJ,CAAU,IAAID,EAAJ,CAAO,CAAP,EAAU,CAAV,EAAa,CAAb,CAAV,EAA2B,IAAIA,EAAJ,CAAO,CAAP,EAAU,CAAV,EAAa,CAAb,CAA3B,EAA4C,IAAIA,EAAJ,CAAOgE,CAAP,EAAUC,CAAV,EAAa,CAAb,CAA5C,CAAP;AACH;;AACD,SAAOS,eAAP,CAAuBC,EAAvB,EAA2BC,EAA3B,EAA+BC,EAA/B,EAAmC;AAC/B,QAAIrD,CAAC,GAAGiB,GAAG,CAACyB,aAAJ,CAAkBS,EAAlB,EAAsBC,EAAtB,CAAR;AACApD,IAAAA,CAAC,CAAC,CAAD,CAAD,CAAK,CAAL,IAAU,CAACqD,EAAE,CAAC,CAAD,CAAH,GAASF,EAAT,GAAcE,EAAE,CAAC,CAAD,CAA1B;AACArD,IAAAA,CAAC,CAAC,CAAD,CAAD,CAAK,CAAL,IAAU,CAACqD,EAAE,CAAC,CAAD,CAAH,GAASD,EAAT,GAAcC,EAAE,CAAC,CAAD,CAA1B;AACA,WAAOrD,CAAP;AACH;;AACD,SAAOsD,gBAAP,CAAwBV,IAAxB,EAA8BC,IAA9B,EAAoCQ,EAApC,EAAwC;AACpC,QAAIrD,CAAC,GAAGiB,GAAG,CAAC0B,cAAJ,CAAmBC,IAAnB,EAAyBC,IAAzB,CAAR;AACA7C,IAAAA,CAAC,CAAC,CAAD,CAAD,CAAK,CAAL,IAAUqD,EAAE,CAAC,CAAD,CAAF,IAAS,IAAIT,IAAb,IAAqBS,EAAE,CAAC,CAAD,CAAF,GAAQR,IAAvC;AACA7C,IAAAA,CAAC,CAAC,CAAD,CAAD,CAAK,CAAL,IAAUqD,EAAE,CAAC,CAAD,CAAF,IAAS,IAAIT,IAAb,IAAqBS,EAAE,CAAC,CAAD,CAAF,GAAQR,IAAvC;AACA,WAAO7C,CAAP;AACH;;AACD,SAAOuD,eAAP,CAAuBR,IAAvB,EAA6BC,IAA7B,EAAmCK,EAAnC,EAAuC;AACnC,QAAIrD,CAAC,GAAGiB,GAAG,CAAC6B,aAAJ,CAAkBC,IAAlB,EAAwBC,IAAxB,CAAR;AACAhD,IAAAA,CAAC,CAAC,CAAD,CAAD,CAAK,CAAL,IAAU,CAACqD,EAAE,CAAC,CAAD,CAAH,GAASL,IAAnB;AACAhD,IAAAA,CAAC,CAAC,CAAD,CAAD,CAAK,CAAL,IAAU,CAACqD,EAAE,CAAC,CAAD,CAAH,GAASN,IAAnB;AACA,WAAO/C,CAAP;AACH;;AACD,SAAOwD,iBAAP,CAAyBC,EAAzB,EAA6BC,EAA7B,EAAiC;AAC7B,QAAIC,SAAS,GAAGjF,IAAI,CAACiF,SAAL,CAAeF,EAAf,EAAmBC,EAAnB,CAAhB;;AACA,QAAIC,SAAS,IAAI5D,SAAjB,EAA4B;AACxB,aAAO,CACH,IAAIvB,EAAJ,CAAO,CAAC,CAAC,CAAF,EAAK,CAAL,EAAQ,CAAR,CAAP,CADG,EAEH,IAAIA,EAAJ,CAAO,CAAC,CAAD,EAAI,CAAJ,EAAO,CAAP,CAAP,CAFG,EAGH,IAAIA,EAAJ,CAAO,CAACiF,EAAE,CAAC,CAAD,CAAF,GAAQC,EAAE,CAAC,CAAD,CAAX,EAAgB,CAAhB,EAAmB,CAAnB,CAAP,CAHG,CAAP;AAKH,KAND,MAOK;AACD,UAAIE,EAAE,GAAGD,SAAS,CAACC,EAAnB;AACA,UAAIC,IAAI,GAAGjE,IAAI,CAACkE,IAAL,CAAUH,SAAS,CAACI,KAApB,IAA6B,CAAxC;AACA,UAAInB,IAAI,GAAGhD,IAAI,CAACoE,GAAL,CAASH,IAAT,CAAX;AACA,UAAIhB,IAAI,GAAGjD,IAAI,CAACqE,GAAL,CAASJ,IAAT,CAAX;AACA,aAAO,CACH,IAAIrF,EAAJ,CAAO,CAACoE,IAAD,EAAOC,IAAP,EAAa,CAAb,CAAP,CADG,EAEH,IAAIrE,EAAJ,CAAO,CAACqE,IAAD,EAAO,CAACD,IAAR,EAAc,CAAd,CAAP,CAFG,EAGH,IAAIpE,EAAJ,CAAO,CAAC,CAACoF,EAAD,GAAMf,IAAP,EAAae,EAAE,GAAGA,EAAE,GAAGhB,IAAvB,EAA6B,CAA7B,CAAP,CAHG,CAAP;AAKH;AACJ;;AA3HY","sourcesContent":["/*! Source code licensed under Apache License 2.0. Copyright Â© 2017-current William Ngan and contributors. (https://github.com/williamngan/pts) */\nimport { Pt, Group } from \"./Pt\";\nimport { Line } from \"./Op\";\nexport class Vec {\n    static add(a, b) {\n        if (typeof b == \"number\") {\n            for (let i = 0, len = a.length; i < len; i++)\n                a[i] += b;\n        }\n        else {\n            for (let i = 0, len = a.length; i < len; i++)\n                a[i] += b[i] || 0;\n        }\n        return a;\n    }\n    static subtract(a, b) {\n        if (typeof b == \"number\") {\n            for (let i = 0, len = a.length; i < len; i++)\n                a[i] -= b;\n        }\n        else {\n            for (let i = 0, len = a.length; i < len; i++)\n                a[i] -= b[i] || 0;\n        }\n        return a;\n    }\n    static multiply(a, b) {\n        if (typeof b == \"number\") {\n            for (let i = 0, len = a.length; i < len; i++)\n                a[i] *= b;\n        }\n        else {\n            if (a.length != b.length) {\n                throw new Error(`Cannot do element-wise multiply since the array lengths don't match: ${a.toString()} multiply-with ${b.toString()}`);\n            }\n            for (let i = 0, len = a.length; i < len; i++)\n                a[i] *= b[i];\n        }\n        return a;\n    }\n    static divide(a, b) {\n        if (typeof b == \"number\") {\n            if (b === 0)\n                throw new Error(\"Cannot divide by zero\");\n            for (let i = 0, len = a.length; i < len; i++)\n                a[i] /= b;\n        }\n        else {\n            if (a.length != b.length) {\n                throw new Error(`Cannot do element-wise divide since the array lengths don't match. ${a.toString()} divide-by ${b.toString()}`);\n            }\n            for (let i = 0, len = a.length; i < len; i++)\n                a[i] /= b[i];\n        }\n        return a;\n    }\n    static dot(a, b) {\n        if (a.length != b.length)\n            throw new Error(\"Array lengths don't match\");\n        let d = 0;\n        for (let i = 0, len = a.length; i < len; i++) {\n            d += a[i] * b[i];\n        }\n        return d;\n    }\n    static cross2D(a, b) {\n        return a[0] * b[1] - a[1] * b[0];\n    }\n    static cross(a, b) {\n        return new Pt((a[1] * b[2] - a[2] * b[1]), (a[2] * b[0] - a[0] * b[2]), (a[0] * b[1] - a[1] * b[0]));\n    }\n    static magnitude(a) {\n        return Math.sqrt(Vec.dot(a, a));\n    }\n    static unit(a, magnitude = undefined) {\n        let m = (magnitude === undefined) ? Vec.magnitude(a) : magnitude;\n        if (m === 0)\n            return Pt.make(a.length);\n        return Vec.divide(a, m);\n    }\n    static abs(a) {\n        return Vec.map(a, Math.abs);\n    }\n    static floor(a) {\n        return Vec.map(a, Math.floor);\n    }\n    static ceil(a) {\n        return Vec.map(a, Math.ceil);\n    }\n    static round(a) {\n        return Vec.map(a, Math.round);\n    }\n    static max(a) {\n        let m = Number.MIN_VALUE;\n        let index = 0;\n        for (let i = 0, len = a.length; i < len; i++) {\n            m = Math.max(m, a[i]);\n            if (m === a[i])\n                index = i;\n        }\n        return { value: m, index: index };\n    }\n    static min(a) {\n        let m = Number.MAX_VALUE;\n        let index = 0;\n        for (let i = 0, len = a.length; i < len; i++) {\n            m = Math.min(m, a[i]);\n            if (m === a[i])\n                index = i;\n        }\n        return { value: m, index: index };\n    }\n    static sum(a) {\n        let s = 0;\n        for (let i = 0, len = a.length; i < len; i++)\n            s += a[i];\n        return s;\n    }\n    static map(a, fn) {\n        for (let i = 0, len = a.length; i < len; i++) {\n            a[i] = fn(a[i], i, a);\n        }\n        return a;\n    }\n}\nexport class Mat {\n    static add(a, b) {\n        if (typeof b != \"number\") {\n            if (a[0].length != b[0].length)\n                throw new Error(\"Cannot add matrix if rows' and columns' size don't match.\");\n            if (a.length != b.length)\n                throw new Error(\"Cannot add matrix if rows' and columns' size don't match.\");\n        }\n        let g = new Group();\n        let isNum = typeof b == \"number\";\n        for (let i = 0, len = a.length; i < len; i++) {\n            g.push(a[i].$add((isNum) ? b : b[i]));\n        }\n        return g;\n    }\n    static multiply(a, b, transposed = false, elementwise = false) {\n        let g = new Group();\n        if (typeof b != \"number\") {\n            if (elementwise) {\n                if (a.length != b.length)\n                    throw new Error(\"Cannot multiply matrix element-wise because the matrices' sizes don't match.\");\n                for (let ai = 0, alen = a.length; ai < alen; ai++) {\n                    g.push(a[ai].$multiply(b[ai]));\n                }\n            }\n            else {\n                if (!transposed && a[0].length != b.length)\n                    throw new Error(\"Cannot multiply matrix if rows in matrix-a don't match columns in matrix-b.\");\n                if (transposed && a[0].length != b[0].length)\n                    throw new Error(\"Cannot multiply matrix if transposed and the columns in both matrices don't match.\");\n                if (!transposed)\n                    b = Mat.transpose(b);\n                for (let ai = 0, alen = a.length; ai < alen; ai++) {\n                    let p = Pt.make(b.length, 0);\n                    for (let bi = 0, blen = b.length; bi < blen; bi++) {\n                        p[bi] = Vec.dot(a[ai], b[bi]);\n                    }\n                    g.push(p);\n                }\n            }\n        }\n        else {\n            for (let ai = 0, alen = a.length; ai < alen; ai++) {\n                g.push(a[ai].$multiply(b));\n            }\n        }\n        return g;\n    }\n    static zipSlice(g, index, defaultValue = false) {\n        let z = [];\n        for (let i = 0, len = g.length; i < len; i++) {\n            if (g[i].length - 1 < index && defaultValue === false)\n                throw `Index ${index} is out of bounds`;\n            z.push(g[i][index] || defaultValue);\n        }\n        return new Pt(z);\n    }\n    static zip(g, defaultValue = false, useLongest = false) {\n        let ps = new Group();\n        let len = (useLongest) ? g.reduce((a, b) => Math.max(a, b.length), 0) : g[0].length;\n        for (let i = 0; i < len; i++) {\n            ps.push(Mat.zipSlice(g, i, defaultValue));\n        }\n        return ps;\n    }\n    static transpose(g, defaultValue = false, useLongest = false) {\n        return Mat.zip(g, defaultValue, useLongest);\n    }\n    static transform2D(pt, m) {\n        let x = pt[0] * m[0][0] + pt[1] * m[1][0] + m[2][0];\n        let y = pt[0] * m[0][1] + pt[1] * m[1][1] + m[2][1];\n        return new Pt(x, y);\n    }\n    static scale2DMatrix(x, y) {\n        return new Group(new Pt(x, 0, 0), new Pt(0, y, 0), new Pt(0, 0, 1));\n    }\n    static rotate2DMatrix(cosA, sinA) {\n        return new Group(new Pt(cosA, sinA, 0), new Pt(-sinA, cosA, 0), new Pt(0, 0, 1));\n    }\n    static shear2DMatrix(tanX, tanY) {\n        return new Group(new Pt(1, tanX, 0), new Pt(tanY, 1, 0), new Pt(0, 0, 1));\n    }\n    static translate2DMatrix(x, y) {\n        return new Group(new Pt(1, 0, 0), new Pt(0, 1, 0), new Pt(x, y, 1));\n    }\n    static scaleAt2DMatrix(sx, sy, at) {\n        let m = Mat.scale2DMatrix(sx, sy);\n        m[2][0] = -at[0] * sx + at[0];\n        m[2][1] = -at[1] * sy + at[1];\n        return m;\n    }\n    static rotateAt2DMatrix(cosA, sinA, at) {\n        let m = Mat.rotate2DMatrix(cosA, sinA);\n        m[2][0] = at[0] * (1 - cosA) + at[1] * sinA;\n        m[2][1] = at[1] * (1 - cosA) - at[0] * sinA;\n        return m;\n    }\n    static shearAt2DMatrix(tanX, tanY, at) {\n        let m = Mat.shear2DMatrix(tanX, tanY);\n        m[2][0] = -at[1] * tanY;\n        m[2][1] = -at[0] * tanX;\n        return m;\n    }\n    static reflectAt2DMatrix(p1, p2) {\n        let intercept = Line.intercept(p1, p2);\n        if (intercept == undefined) {\n            return [\n                new Pt([-1, 0, 0]),\n                new Pt([0, 1, 0]),\n                new Pt([p1[0] + p2[0], 0, 1])\n            ];\n        }\n        else {\n            let yi = intercept.yi;\n            let ang2 = Math.atan(intercept.slope) * 2;\n            let cosA = Math.cos(ang2);\n            let sinA = Math.sin(ang2);\n            return [\n                new Pt([cosA, sinA, 0]),\n                new Pt([sinA, -cosA, 0]),\n                new Pt([-yi * sinA, yi + yi * cosA, 1])\n            ];\n        }\n    }\n}\n//# sourceMappingURL=LinearAlgebra.js.map"]},"metadata":{},"sourceType":"module"}