{"ast":null,"code":"import * as tslib_1 from \"tslib\";\n/**\n * Assert that the statement is true, otherwise invoke the error.\n * @param statement\n * @param error The message which is passed into an Error\n */\n\nexport function assert(statement, error) {\n  if (!statement) {\n    throw new Error(error);\n  }\n}\n/**\n * Make sure that the given value is within the range\n */\n\nexport function assertRange(value, gte, lte) {\n  if (lte === void 0) {\n    lte = Infinity;\n  }\n\n  if (!(gte <= value && value <= lte)) {\n    throw new RangeError(\"Value must be within [\" + gte + \", \" + lte + \"], got: \" + value);\n  }\n}\n/**\n * Make sure that the given value is within the range\n */\n\nexport function assertContextRunning(context) {\n  // add a warning if the context is not started\n  if (!context.isOffline && context.state !== \"running\") {\n    warn(\"The AudioContext is \\\"suspended\\\". Invoke Tone.start() from a user action to start the audio.\");\n  }\n}\n/**\n * The default logger is the console\n */\n\nvar defaultLogger = console;\n/**\n * Set the logging interface\n */\n\nexport function setLogger(logger) {\n  defaultLogger = logger;\n}\n/**\n * Log anything\n */\n\nexport function log() {\n  var args = [];\n\n  for (var _i = 0; _i < arguments.length; _i++) {\n    args[_i] = arguments[_i];\n  }\n\n  defaultLogger.log.apply(defaultLogger, tslib_1.__spread(args));\n}\n/**\n * Warn anything\n */\n\nexport function warn() {\n  var args = [];\n\n  for (var _i = 0; _i < arguments.length; _i++) {\n    args[_i] = arguments[_i];\n  }\n\n  defaultLogger.warn.apply(defaultLogger, tslib_1.__spread(args));\n}","map":{"version":3,"sources":["../../../../Tone/core/util/Debug.ts"],"names":[],"mappings":";AAAA;;;;;;AAKA,OAAM,SAAU,MAAV,CAAiB,SAAjB,EAAqC,KAArC,EAAkD;AACvD,MAAI,CAAC,SAAL,EAAgB;AACf,UAAM,IAAI,KAAJ,CAAU,KAAV,CAAN;AACA;AACD;AAED;;;;AAGA,OAAM,SAAU,WAAV,CAAsB,KAAtB,EAAqC,GAArC,EAAkD,GAAlD,EAAgE;AAAd,MAAA,GAAA,KAAA,KAAA,CAAA,EAAA;AAAA,IAAA,GAAA,GAAA,QAAA;AAAc;;AACrE,MAAI,EAAE,GAAG,IAAI,KAAP,IAAgB,KAAK,IAAI,GAA3B,CAAJ,EAAqC;AACpC,UAAM,IAAI,UAAJ,CAAe,2BAAyB,GAAzB,GAA4B,IAA5B,GAAiC,GAAjC,GAAoC,UAApC,GAA+C,KAA9D,CAAN;AACA;AACD;AAED;;;;AAGA,OAAM,SAAU,oBAAV,CAA+B,OAA/B,EAAoF;AACzF;AACA,MAAI,CAAC,OAAO,CAAC,SAAT,IAAsB,OAAO,CAAC,KAAR,KAAkB,SAA5C,EAAuD;AACtD,IAAA,IAAI,CAAC,+FAAD,CAAJ;AACA;AACD;AAUD;;;;AAGA,IAAI,aAAa,GAAW,OAA5B;AAEA;;;;AAGA,OAAM,SAAU,SAAV,CAAoB,MAApB,EAAkC;AACvC,EAAA,aAAa,GAAG,MAAhB;AACA;AAED;;;;AAGA,OAAM,SAAU,GAAV,GAAa;AAAC,MAAA,IAAA,GAAA,EAAA;;OAAA,IAAA,EAAA,GAAA,C,EAAA,EAAA,GAAA,SAAA,CAAA,M,EAAA,EAAA,E,EAAc;AAAd,IAAA,IAAA,CAAA,EAAA,CAAA,GAAA,SAAA,CAAA,EAAA,CAAA;;;AACnB,EAAA,aAAa,CAAC,GAAd,CAAiB,KAAjB,CAAA,aAAA,EAAa,OAAA,CAAA,QAAA,CAAQ,IAAR,CAAb;AACA;AAED;;;;AAGA,OAAM,SAAU,IAAV,GAAc;AAAC,MAAA,IAAA,GAAA,EAAA;;OAAA,IAAA,EAAA,GAAA,C,EAAA,EAAA,GAAA,SAAA,CAAA,M,EAAA,EAAA,E,EAAc;AAAd,IAAA,IAAA,CAAA,EAAA,CAAA,GAAA,SAAA,CAAA,EAAA,CAAA;;;AACpB,EAAA,aAAa,CAAC,IAAd,CAAkB,KAAlB,CAAA,aAAA,EAAa,OAAA,CAAA,QAAA,CAAS,IAAT,CAAb;AACA","sourceRoot":"","sourcesContent":["import * as tslib_1 from \"tslib\";\n/**\n * Assert that the statement is true, otherwise invoke the error.\n * @param statement\n * @param error The message which is passed into an Error\n */\nexport function assert(statement, error) {\n    if (!statement) {\n        throw new Error(error);\n    }\n}\n/**\n * Make sure that the given value is within the range\n */\nexport function assertRange(value, gte, lte) {\n    if (lte === void 0) { lte = Infinity; }\n    if (!(gte <= value && value <= lte)) {\n        throw new RangeError(\"Value must be within [\" + gte + \", \" + lte + \"], got: \" + value);\n    }\n}\n/**\n * Make sure that the given value is within the range\n */\nexport function assertContextRunning(context) {\n    // add a warning if the context is not started\n    if (!context.isOffline && context.state !== \"running\") {\n        warn(\"The AudioContext is \\\"suspended\\\". Invoke Tone.start() from a user action to start the audio.\");\n    }\n}\n/**\n * The default logger is the console\n */\nvar defaultLogger = console;\n/**\n * Set the logging interface\n */\nexport function setLogger(logger) {\n    defaultLogger = logger;\n}\n/**\n * Log anything\n */\nexport function log() {\n    var args = [];\n    for (var _i = 0; _i < arguments.length; _i++) {\n        args[_i] = arguments[_i];\n    }\n    defaultLogger.log.apply(defaultLogger, tslib_1.__spread(args));\n}\n/**\n * Warn anything\n */\nexport function warn() {\n    var args = [];\n    for (var _i = 0; _i < arguments.length; _i++) {\n        args[_i] = arguments[_i];\n    }\n    defaultLogger.warn.apply(defaultLogger, tslib_1.__spread(args));\n}\n//# sourceMappingURL=Debug.js.map"]},"metadata":{},"sourceType":"module"}