{"ast":null,"code":"import * as tslib_1 from \"tslib\";\nimport { optionsFromArguments } from \"../core/util/Defaults\";\nimport { WaveShaper } from \"../signal/WaveShaper\";\nimport { Effect } from \"./Effect\";\n/**\n * A simple distortion effect using Tone.WaveShaper.\n * Algorithm from [this stackoverflow answer](http://stackoverflow.com/a/22313408).\n *\n * @example\n * import { Distortion, FMSynth } from \"tone\";\n * const dist = new Distortion(0.8).toDestination();\n * const fm = new FMSynth().connect(dist);\n * fm.triggerAttackRelease(\"A1\", \"8n\");\n * @category Effect\n */\n\nvar Distortion =\n/** @class */\nfunction (_super) {\n  tslib_1.__extends(Distortion, _super);\n\n  function Distortion() {\n    var _this = _super.call(this, optionsFromArguments(Distortion.getDefaults(), arguments, [\"distortion\"])) || this;\n\n    _this.name = \"Distortion\";\n    var options = optionsFromArguments(Distortion.getDefaults(), arguments, [\"distortion\"]);\n    _this._shaper = new WaveShaper({\n      context: _this.context,\n      length: 4096\n    });\n    _this._distortion = options.distortion;\n\n    _this.connectEffect(_this._shaper);\n\n    _this.distortion = options.distortion;\n    _this.oversample = options.oversample;\n    return _this;\n  }\n\n  Distortion.getDefaults = function () {\n    return Object.assign(Effect.getDefaults(), {\n      distortion: 0.4,\n      oversample: \"none\"\n    });\n  };\n\n  Object.defineProperty(Distortion.prototype, \"distortion\", {\n    /**\n     * The amount of distortion. Nominal range is between 0 and 1.\n     */\n    get: function () {\n      return this._distortion;\n    },\n    set: function (amount) {\n      this._distortion = amount;\n      var k = amount * 100;\n      var deg = Math.PI / 180;\n\n      this._shaper.setMap(function (x) {\n        if (Math.abs(x) < 0.001) {\n          // should output 0 when input is 0\n          return 0;\n        } else {\n          return (3 + k) * x * 20 * deg / (Math.PI + k * Math.abs(x));\n        }\n      });\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(Distortion.prototype, \"oversample\", {\n    /**\n     * The oversampling of the effect. Can either be \"none\", \"2x\" or \"4x\".\n     */\n    get: function () {\n      return this._shaper.oversample;\n    },\n    set: function (oversampling) {\n      this._shaper.oversample = oversampling;\n    },\n    enumerable: true,\n    configurable: true\n  });\n\n  Distortion.prototype.dispose = function () {\n    _super.prototype.dispose.call(this);\n\n    this._shaper.dispose();\n\n    return this;\n  };\n\n  return Distortion;\n}(Effect);\n\nexport { Distortion };","map":{"version":3,"sources":["../../../Tone/effect/Distortion.ts"],"names":[],"mappings":";AAAA,SAAS,oBAAT,QAAqC,uBAArC;AACA,SAAS,UAAT,QAA2B,sBAA3B;AACA,SAAS,MAAT,QAAsC,UAAtC;AAOA;;;;;;;;;;;;AAWA,IAAA,UAAA;AAAA;AAAA,UAAA,MAAA,EAAA;AAAgC,EAAA,OAAA,CAAA,SAAA,CAAA,UAAA,EAAA,MAAA;;AAmB/B,WAAA,UAAA,GAAA;AAAA,QAAA,KAAA,GAEC,MAAA,CAAA,IAAA,CAAA,IAAA,EAAM,oBAAoB,CAAC,UAAU,CAAC,WAAX,EAAD,EAA2B,SAA3B,EAAsC,CAAC,YAAD,CAAtC,CAA1B,KAAgF,IAFjF;;AAjBS,IAAA,KAAA,CAAA,IAAA,GAAe,YAAf;AAoBR,QAAM,OAAO,GAAG,oBAAoB,CAAC,UAAU,CAAC,WAAX,EAAD,EAA2B,SAA3B,EAAsC,CAAC,YAAD,CAAtC,CAApC;AAEA,IAAA,KAAI,CAAC,OAAL,GAAe,IAAI,UAAJ,CAAe;AAC7B,MAAA,OAAO,EAAE,KAAI,CAAC,OADe;AAE7B,MAAA,MAAM,EAAE;AAFqB,KAAf,CAAf;AAKA,IAAA,KAAI,CAAC,WAAL,GAAmB,OAAO,CAAC,UAA3B;;AAEA,IAAA,KAAI,CAAC,aAAL,CAAmB,KAAI,CAAC,OAAxB;;AACA,IAAA,KAAI,CAAC,UAAL,GAAkB,OAAO,CAAC,UAA1B;AACA,IAAA,KAAI,CAAC,UAAL,GAAkB,OAAO,CAAC,UAA1B;;AACA;;AAEM,EAAA,UAAA,CAAA,WAAA,GAAP,YAAA;AACC,WAAO,MAAM,CAAC,MAAP,CAAc,MAAM,CAAC,WAAP,EAAd,EAAoC;AAC1C,MAAA,UAAU,EAAE,GAD8B;AAE1C,MAAA,UAAU,EAAE;AAF8B,KAApC,CAAP;AAIA,GALM;;AAUP,EAAA,MAAA,CAAA,cAAA,CAAI,UAAA,CAAA,SAAJ,EAAI,YAAJ,EAAc;AAHd;;;SAGA,YAAA;AACC,aAAO,KAAK,WAAZ;AACA,KAFa;SAGd,UAAe,MAAf,EAAqB;AACpB,WAAK,WAAL,GAAmB,MAAnB;AACA,UAAM,CAAC,GAAG,MAAM,GAAG,GAAnB;AACA,UAAM,GAAG,GAAG,IAAI,CAAC,EAAL,GAAU,GAAtB;;AACA,WAAK,OAAL,CAAa,MAAb,CAAoB,UAAC,CAAD,EAAE;AACrB,YAAI,IAAI,CAAC,GAAL,CAAS,CAAT,IAAc,KAAlB,EAAyB;AACxB;AACA,iBAAO,CAAP;AACA,SAHD,MAGO;AACN,iBAAO,CAAC,IAAI,CAAL,IAAU,CAAV,GAAc,EAAd,GAAmB,GAAnB,IAA0B,IAAI,CAAC,EAAL,GAAU,CAAC,GAAG,IAAI,CAAC,GAAL,CAAS,CAAT,CAAxC,CAAP;AACA;AACD,OAPD;AAQA,KAfa;oBAAA;;AAAA,GAAd;AAoBA,EAAA,MAAA,CAAA,cAAA,CAAI,UAAA,CAAA,SAAJ,EAAI,YAAJ,EAAc;AAHd;;;SAGA,YAAA;AACC,aAAO,KAAK,OAAL,CAAa,UAApB;AACA,KAFa;SAGd,UAAe,YAAf,EAA2B;AAC1B,WAAK,OAAL,CAAa,UAAb,GAA0B,YAA1B;AACA,KALa;oBAAA;;AAAA,GAAd;;AAOA,EAAA,UAAA,CAAA,SAAA,CAAA,OAAA,GAAA,YAAA;AACC,IAAA,MAAA,CAAA,SAAA,CAAM,OAAN,CAAa,IAAb,CAAa,IAAb;;AACA,SAAK,OAAL,CAAa,OAAb;;AACA,WAAO,IAAP;AACA,GAJD;;AAKD,SAAA,UAAA;AAAC,CA9ED,CAAgC,MAAhC,CAAA","sourceRoot":"","sourcesContent":["import * as tslib_1 from \"tslib\";\nimport { optionsFromArguments } from \"../core/util/Defaults\";\nimport { WaveShaper } from \"../signal/WaveShaper\";\nimport { Effect } from \"./Effect\";\n/**\n * A simple distortion effect using Tone.WaveShaper.\n * Algorithm from [this stackoverflow answer](http://stackoverflow.com/a/22313408).\n *\n * @example\n * import { Distortion, FMSynth } from \"tone\";\n * const dist = new Distortion(0.8).toDestination();\n * const fm = new FMSynth().connect(dist);\n * fm.triggerAttackRelease(\"A1\", \"8n\");\n * @category Effect\n */\nvar Distortion = /** @class */ (function (_super) {\n    tslib_1.__extends(Distortion, _super);\n    function Distortion() {\n        var _this = _super.call(this, optionsFromArguments(Distortion.getDefaults(), arguments, [\"distortion\"])) || this;\n        _this.name = \"Distortion\";\n        var options = optionsFromArguments(Distortion.getDefaults(), arguments, [\"distortion\"]);\n        _this._shaper = new WaveShaper({\n            context: _this.context,\n            length: 4096,\n        });\n        _this._distortion = options.distortion;\n        _this.connectEffect(_this._shaper);\n        _this.distortion = options.distortion;\n        _this.oversample = options.oversample;\n        return _this;\n    }\n    Distortion.getDefaults = function () {\n        return Object.assign(Effect.getDefaults(), {\n            distortion: 0.4,\n            oversample: \"none\",\n        });\n    };\n    Object.defineProperty(Distortion.prototype, \"distortion\", {\n        /**\n         * The amount of distortion. Nominal range is between 0 and 1.\n         */\n        get: function () {\n            return this._distortion;\n        },\n        set: function (amount) {\n            this._distortion = amount;\n            var k = amount * 100;\n            var deg = Math.PI / 180;\n            this._shaper.setMap(function (x) {\n                if (Math.abs(x) < 0.001) {\n                    // should output 0 when input is 0\n                    return 0;\n                }\n                else {\n                    return (3 + k) * x * 20 * deg / (Math.PI + k * Math.abs(x));\n                }\n            });\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(Distortion.prototype, \"oversample\", {\n        /**\n         * The oversampling of the effect. Can either be \"none\", \"2x\" or \"4x\".\n         */\n        get: function () {\n            return this._shaper.oversample;\n        },\n        set: function (oversampling) {\n            this._shaper.oversample = oversampling;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Distortion.prototype.dispose = function () {\n        _super.prototype.dispose.call(this);\n        this._shaper.dispose();\n        return this;\n    };\n    return Distortion;\n}(Effect));\nexport { Distortion };\n//# sourceMappingURL=Distortion.js.map"]},"metadata":{},"sourceType":"module"}