{"ast":null,"code":"import * as tslib_1 from \"tslib\";\nimport { ToneAudioNode } from \"../../core/context/ToneAudioNode\";\nimport { optionsFromArguments } from \"../../core/util/Defaults\";\n/**\n * Split splits an incoming signal into the number of given channels.\n *\n * @example\n * import { Split } from \"tone\";\n *\n * const split = new Split();\n * // stereoSignal.connect(split);\n * @category Component\n */\n\nvar Split =\n/** @class */\nfunction (_super) {\n  tslib_1.__extends(Split, _super);\n\n  function Split() {\n    var _this = _super.call(this, optionsFromArguments(Split.getDefaults(), arguments, [\"channels\"])) || this;\n\n    _this.name = \"Split\";\n    var options = optionsFromArguments(Split.getDefaults(), arguments, [\"channels\"]);\n    _this._splitter = _this.input = _this.output = _this.context.createChannelSplitter(options.channels);\n    _this._internalChannels = [_this._splitter];\n    return _this;\n  }\n\n  Split.getDefaults = function () {\n    return Object.assign(ToneAudioNode.getDefaults(), {\n      channels: 2\n    });\n  };\n\n  Split.prototype.dispose = function () {\n    _super.prototype.dispose.call(this);\n\n    this._splitter.disconnect();\n\n    return this;\n  };\n\n  return Split;\n}(ToneAudioNode);\n\nexport { Split };","map":{"version":3,"sources":["../../../../Tone/component/channel/Split.ts"],"names":[],"mappings":";AAAA,SAAS,aAAT,QAAoD,kCAApD;AACA,SAAS,oBAAT,QAAqC,0BAArC;AAMA;;;;;;;;;;;AAUA,IAAA,KAAA;AAAA;AAAA,UAAA,MAAA,EAAA;AAA2B,EAAA,OAAA,CAAA,SAAA,CAAA,KAAA,EAAA,MAAA;;AAgB1B,WAAA,KAAA,GAAA;AAAA,QAAA,KAAA,GACC,MAAA,CAAA,IAAA,CAAA,IAAA,EAAM,oBAAoB,CAAC,KAAK,CAAC,WAAN,EAAD,EAAsB,SAAtB,EAAiC,CAAC,UAAD,CAAjC,CAA1B,KAAyE,IAD1E;;AAfS,IAAA,KAAA,CAAA,IAAA,GAAe,OAAf;AAiBR,QAAM,OAAO,GAAG,oBAAoB,CAAC,KAAK,CAAC,WAAN,EAAD,EAAsB,SAAtB,EAAiC,CAAC,UAAD,CAAjC,CAApC;AAEA,IAAA,KAAI,CAAC,SAAL,GAAiB,KAAI,CAAC,KAAL,GAAa,KAAI,CAAC,MAAL,GAAc,KAAI,CAAC,OAAL,CAAa,qBAAb,CAAmC,OAAO,CAAC,QAA3C,CAA5C;AACA,IAAA,KAAI,CAAC,iBAAL,GAAyB,CAAC,KAAI,CAAC,SAAN,CAAzB;;AACA;;AAEM,EAAA,KAAA,CAAA,WAAA,GAAP,YAAA;AACC,WAAO,MAAM,CAAC,MAAP,CAAc,aAAa,CAAC,WAAd,EAAd,EAA2C;AACjD,MAAA,QAAQ,EAAE;AADuC,KAA3C,CAAP;AAGA,GAJM;;AAMP,EAAA,KAAA,CAAA,SAAA,CAAA,OAAA,GAAA,YAAA;AACC,IAAA,MAAA,CAAA,SAAA,CAAM,OAAN,CAAa,IAAb,CAAa,IAAb;;AACA,SAAK,SAAL,CAAe,UAAf;;AACA,WAAO,IAAP;AACA,GAJD;;AAKD,SAAA,KAAA;AAAC,CAnCD,CAA2B,aAA3B,CAAA","sourceRoot":"","sourcesContent":["import * as tslib_1 from \"tslib\";\nimport { ToneAudioNode } from \"../../core/context/ToneAudioNode\";\nimport { optionsFromArguments } from \"../../core/util/Defaults\";\n/**\n * Split splits an incoming signal into the number of given channels.\n *\n * @example\n * import { Split } from \"tone\";\n *\n * const split = new Split();\n * // stereoSignal.connect(split);\n * @category Component\n */\nvar Split = /** @class */ (function (_super) {\n    tslib_1.__extends(Split, _super);\n    function Split() {\n        var _this = _super.call(this, optionsFromArguments(Split.getDefaults(), arguments, [\"channels\"])) || this;\n        _this.name = \"Split\";\n        var options = optionsFromArguments(Split.getDefaults(), arguments, [\"channels\"]);\n        _this._splitter = _this.input = _this.output = _this.context.createChannelSplitter(options.channels);\n        _this._internalChannels = [_this._splitter];\n        return _this;\n    }\n    Split.getDefaults = function () {\n        return Object.assign(ToneAudioNode.getDefaults(), {\n            channels: 2,\n        });\n    };\n    Split.prototype.dispose = function () {\n        _super.prototype.dispose.call(this);\n        this._splitter.disconnect();\n        return this;\n    };\n    return Split;\n}(ToneAudioNode));\nexport { Split };\n//# sourceMappingURL=Split.js.map"]},"metadata":{},"sourceType":"module"}