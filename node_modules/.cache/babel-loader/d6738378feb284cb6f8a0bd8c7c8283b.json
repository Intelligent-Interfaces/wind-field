{"ast":null,"code":"import * as tslib_1 from \"tslib\";\nimport { ToneAudioNode } from \"../../core/context/ToneAudioNode\";\nimport { optionsFromArguments } from \"../../core/util/Defaults\";\nimport { Gain } from \"../../core/context/Gain\";\n/**\n * A one pole filter with 6db-per-octave rolloff. Either \"highpass\" or \"lowpass\".\n * Note that changing the type or frequency may result in a discontinuity which\n * can sound like a click or pop.\n * References:\n * * http://www.earlevel.com/main/2012/12/15/a-one-pole-filter/\n * * http://www.dspguide.com/ch19/2.htm\n * * https://github.com/vitaliy-bobrov/js-rocks/blob/master/src/app/audio/effects/one-pole-filters.ts\n * @category Component\n */\n\nvar OnePoleFilter =\n/** @class */\nfunction (_super) {\n  tslib_1.__extends(OnePoleFilter, _super);\n\n  function OnePoleFilter() {\n    var _this = _super.call(this, optionsFromArguments(OnePoleFilter.getDefaults(), arguments, [\"frequency\", \"type\"])) || this;\n\n    _this.name = \"OnePoleFilter\";\n    var options = optionsFromArguments(OnePoleFilter.getDefaults(), arguments, [\"frequency\", \"type\"]);\n    _this._frequency = options.frequency;\n    _this._type = options.type;\n    _this.input = new Gain({\n      context: _this.context\n    });\n    _this.output = new Gain({\n      context: _this.context\n    });\n\n    _this._createFilter();\n\n    return _this;\n  }\n\n  OnePoleFilter.getDefaults = function () {\n    return Object.assign(ToneAudioNode.getDefaults(), {\n      frequency: 880,\n      type: \"lowpass\"\n    });\n  };\n  /**\n   * Create a filter and dispose the old one\n   */\n\n\n  OnePoleFilter.prototype._createFilter = function () {\n    var _this = this;\n\n    var oldFilter = this._filter;\n    var freq = this.toFrequency(this._frequency);\n    var t = 1 / (2 * Math.PI * freq);\n\n    if (this._type === \"lowpass\") {\n      var a0 = 1 / (t * this.context.sampleRate);\n      var b1 = a0 - 1;\n      this._filter = this.context.createIIRFilter([a0, 0], [1, b1]);\n    } else {\n      var b1 = 1 / (t * this.context.sampleRate) - 1;\n      this._filter = this.context.createIIRFilter([1, -1], [1, b1]);\n    }\n\n    this.input.chain(this._filter, this.output);\n\n    if (oldFilter) {\n      // dispose it on the next block\n      this.context.setTimeout(function () {\n        if (!_this.disposed) {\n          _this.input.disconnect(oldFilter);\n\n          oldFilter.disconnect();\n        }\n      }, this.blockTime);\n    }\n  };\n\n  Object.defineProperty(OnePoleFilter.prototype, \"frequency\", {\n    /**\n     * The frequency value.\n     */\n    get: function () {\n      return this._frequency;\n    },\n    set: function (fq) {\n      this._frequency = fq;\n\n      this._createFilter();\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(OnePoleFilter.prototype, \"type\", {\n    /**\n     * The OnePole Filter type, either \"highpass\" or \"lowpass\"\n     */\n    get: function () {\n      return this._type;\n    },\n    set: function (t) {\n      this._type = t;\n\n      this._createFilter();\n    },\n    enumerable: true,\n    configurable: true\n  });\n  /**\n   * Get the frequency response curve. This curve represents how the filter\n   * responses to frequencies between 20hz-20khz.\n   * @param  len The number of values to return\n   * @return The frequency response curve between 20-20kHz\n   */\n\n  OnePoleFilter.prototype.getFrequencyResponse = function (len) {\n    if (len === void 0) {\n      len = 128;\n    }\n\n    var freqValues = new Float32Array(len);\n\n    for (var i = 0; i < len; i++) {\n      var norm = Math.pow(i / len, 2);\n      var freq = norm * (20000 - 20) + 20;\n      freqValues[i] = freq;\n    }\n\n    var magValues = new Float32Array(len);\n    var phaseValues = new Float32Array(len);\n\n    this._filter.getFrequencyResponse(freqValues, magValues, phaseValues);\n\n    return magValues;\n  };\n\n  OnePoleFilter.prototype.dispose = function () {\n    _super.prototype.dispose.call(this);\n\n    this.input.dispose();\n    this.output.dispose();\n\n    this._filter.disconnect();\n\n    return this;\n  };\n\n  return OnePoleFilter;\n}(ToneAudioNode);\n\nexport { OnePoleFilter };","map":{"version":3,"sources":["../../../../Tone/component/filter/OnePoleFilter.ts"],"names":[],"mappings":"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","sourceRoot":"","sourcesContent":["import * as tslib_1 from \"tslib\";\nimport { ToneAudioNode } from \"../../core/context/ToneAudioNode\";\nimport { optionsFromArguments } from \"../../core/util/Defaults\";\nimport { Gain } from \"../../core/context/Gain\";\n/**\n * A one pole filter with 6db-per-octave rolloff. Either \"highpass\" or \"lowpass\".\n * Note that changing the type or frequency may result in a discontinuity which\n * can sound like a click or pop.\n * References:\n * * http://www.earlevel.com/main/2012/12/15/a-one-pole-filter/\n * * http://www.dspguide.com/ch19/2.htm\n * * https://github.com/vitaliy-bobrov/js-rocks/blob/master/src/app/audio/effects/one-pole-filters.ts\n * @category Component\n */\nvar OnePoleFilter = /** @class */ (function (_super) {\n    tslib_1.__extends(OnePoleFilter, _super);\n    function OnePoleFilter() {\n        var _this = _super.call(this, optionsFromArguments(OnePoleFilter.getDefaults(), arguments, [\"frequency\", \"type\"])) || this;\n        _this.name = \"OnePoleFilter\";\n        var options = optionsFromArguments(OnePoleFilter.getDefaults(), arguments, [\"frequency\", \"type\"]);\n        _this._frequency = options.frequency;\n        _this._type = options.type;\n        _this.input = new Gain({ context: _this.context });\n        _this.output = new Gain({ context: _this.context });\n        _this._createFilter();\n        return _this;\n    }\n    OnePoleFilter.getDefaults = function () {\n        return Object.assign(ToneAudioNode.getDefaults(), {\n            frequency: 880,\n            type: \"lowpass\"\n        });\n    };\n    /**\n     * Create a filter and dispose the old one\n     */\n    OnePoleFilter.prototype._createFilter = function () {\n        var _this = this;\n        var oldFilter = this._filter;\n        var freq = this.toFrequency(this._frequency);\n        var t = 1 / (2 * Math.PI * freq);\n        if (this._type === \"lowpass\") {\n            var a0 = 1 / (t * this.context.sampleRate);\n            var b1 = a0 - 1;\n            this._filter = this.context.createIIRFilter([a0, 0], [1, b1]);\n        }\n        else {\n            var b1 = 1 / (t * this.context.sampleRate) - 1;\n            this._filter = this.context.createIIRFilter([1, -1], [1, b1]);\n        }\n        this.input.chain(this._filter, this.output);\n        if (oldFilter) {\n            // dispose it on the next block\n            this.context.setTimeout(function () {\n                if (!_this.disposed) {\n                    _this.input.disconnect(oldFilter);\n                    oldFilter.disconnect();\n                }\n            }, this.blockTime);\n        }\n    };\n    Object.defineProperty(OnePoleFilter.prototype, \"frequency\", {\n        /**\n         * The frequency value.\n         */\n        get: function () {\n            return this._frequency;\n        },\n        set: function (fq) {\n            this._frequency = fq;\n            this._createFilter();\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(OnePoleFilter.prototype, \"type\", {\n        /**\n         * The OnePole Filter type, either \"highpass\" or \"lowpass\"\n         */\n        get: function () {\n            return this._type;\n        },\n        set: function (t) {\n            this._type = t;\n            this._createFilter();\n        },\n        enumerable: true,\n        configurable: true\n    });\n    /**\n     * Get the frequency response curve. This curve represents how the filter\n     * responses to frequencies between 20hz-20khz.\n     * @param  len The number of values to return\n     * @return The frequency response curve between 20-20kHz\n     */\n    OnePoleFilter.prototype.getFrequencyResponse = function (len) {\n        if (len === void 0) { len = 128; }\n        var freqValues = new Float32Array(len);\n        for (var i = 0; i < len; i++) {\n            var norm = Math.pow(i / len, 2);\n            var freq = norm * (20000 - 20) + 20;\n            freqValues[i] = freq;\n        }\n        var magValues = new Float32Array(len);\n        var phaseValues = new Float32Array(len);\n        this._filter.getFrequencyResponse(freqValues, magValues, phaseValues);\n        return magValues;\n    };\n    OnePoleFilter.prototype.dispose = function () {\n        _super.prototype.dispose.call(this);\n        this.input.dispose();\n        this.output.dispose();\n        this._filter.disconnect();\n        return this;\n    };\n    return OnePoleFilter;\n}(ToneAudioNode));\nexport { OnePoleFilter };\n//# sourceMappingURL=OnePoleFilter.js.map"]},"metadata":{},"sourceType":"module"}