{"ast":null,"code":"import * as tslib_1 from \"tslib\";\nimport { Param } from \"../context/Param\";\nimport { optionsFromArguments } from \"../util/Defaults\";\nimport { readOnly } from \"../util/Interface\";\nimport { ToneAudioNode } from \"./ToneAudioNode\";\n/**\n * Wrapper around Web Audio's native [DelayNode](http://webaudio.github.io/web-audio-api/#the-delaynode-interface).\n * @category Core\n */\n\nvar Delay =\n/** @class */\nfunction (_super) {\n  tslib_1.__extends(Delay, _super);\n\n  function Delay() {\n    var _this = _super.call(this, optionsFromArguments(Delay.getDefaults(), arguments, [\"delayTime\", \"maxDelay\"])) || this;\n\n    _this.name = \"Delay\";\n    var options = optionsFromArguments(Delay.getDefaults(), arguments, [\"delayTime\", \"maxDelay\"]);\n\n    var maxDelayInSeconds = _this.toSeconds(options.maxDelay);\n\n    _this._maxDelay = Math.max(maxDelayInSeconds, _this.toSeconds(options.delayTime));\n    _this._delayNode = _this.input = _this.output = _this.context.createDelay(maxDelayInSeconds);\n    _this.delayTime = new Param({\n      context: _this.context,\n      param: _this._delayNode.delayTime,\n      units: \"time\",\n      value: options.delayTime,\n      minValue: 0,\n      maxValue: _this.maxDelay\n    });\n    readOnly(_this, \"delayTime\");\n    return _this;\n  }\n\n  Delay.getDefaults = function () {\n    return Object.assign(ToneAudioNode.getDefaults(), {\n      delayTime: 0,\n      maxDelay: 1\n    });\n  };\n\n  Object.defineProperty(Delay.prototype, \"maxDelay\", {\n    /**\n     * The maximum delay time. This cannot be changed after\n     * the value is passed into the constructor.\n     */\n    get: function () {\n      return this._maxDelay;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  /**\n   * Clean up.\n   */\n\n  Delay.prototype.dispose = function () {\n    _super.prototype.dispose.call(this);\n\n    this._delayNode.disconnect();\n\n    this.delayTime.dispose();\n    return this;\n  };\n\n  return Delay;\n}(ToneAudioNode);\n\nexport { Delay };","map":{"version":3,"sources":["../../../../Tone/core/context/Delay.ts"],"names":[],"mappings":";AAAA,SAAS,KAAT,QAAsB,kBAAtB;AAEA,SAAS,oBAAT,QAAqC,kBAArC;AACA,SAAS,QAAT,QAAyB,mBAAzB;AACA,SAAS,aAAT,QAAoD,iBAApD;AAOA;;;;;AAIA,IAAA,KAAA;AAAA;AAAA,UAAA,MAAA,EAAA;AAA2B,EAAA,OAAA,CAAA,SAAA,CAAA,KAAA,EAAA,MAAA;;AA2B1B,WAAA,KAAA,GAAA;AAAA,QAAA,KAAA,GACC,MAAA,CAAA,IAAA,CAAA,IAAA,EAAM,oBAAoB,CAAC,KAAK,CAAC,WAAN,EAAD,EAAsB,SAAtB,EAAiC,CAAC,WAAD,EAAc,UAAd,CAAjC,CAA1B,KAAsF,IADvF;;AAzBS,IAAA,KAAA,CAAA,IAAA,GAAe,OAAf;AA4BR,QAAM,OAAO,GAAG,oBAAoB,CAAC,KAAK,CAAC,WAAN,EAAD,EAAsB,SAAtB,EAAiC,CAAC,WAAD,EAAc,UAAd,CAAjC,CAApC;;AAEA,QAAM,iBAAiB,GAAG,KAAI,CAAC,SAAL,CAAe,OAAO,CAAC,QAAvB,CAA1B;;AACA,IAAA,KAAI,CAAC,SAAL,GAAiB,IAAI,CAAC,GAAL,CAAS,iBAAT,EAA4B,KAAI,CAAC,SAAL,CAAe,OAAO,CAAC,SAAvB,CAA5B,CAAjB;AAEA,IAAA,KAAI,CAAC,UAAL,GAAkB,KAAI,CAAC,KAAL,GAAa,KAAI,CAAC,MAAL,GAAc,KAAI,CAAC,OAAL,CAAa,WAAb,CAAyB,iBAAzB,CAA7C;AAEA,IAAA,KAAI,CAAC,SAAL,GAAiB,IAAI,KAAJ,CAAU;AAC1B,MAAA,OAAO,EAAE,KAAI,CAAC,OADY;AAE1B,MAAA,KAAK,EAAE,KAAI,CAAC,UAAL,CAAgB,SAFG;AAG1B,MAAA,KAAK,EAAE,MAHmB;AAI1B,MAAA,KAAK,EAAE,OAAO,CAAC,SAJW;AAK1B,MAAA,QAAQ,EAAE,CALgB;AAM1B,MAAA,QAAQ,EAAE,KAAI,CAAC;AANW,KAAV,CAAjB;AASA,IAAA,QAAQ,CAAC,KAAD,EAAO,WAAP,CAAR;;AACA;;AAEM,EAAA,KAAA,CAAA,WAAA,GAAP,YAAA;AACC,WAAO,MAAM,CAAC,MAAP,CAAc,aAAa,CAAC,WAAd,EAAd,EAA2C;AACjD,MAAA,SAAS,EAAE,CADsC;AAEjD,MAAA,QAAQ,EAAE;AAFuC,KAA3C,CAAP;AAIA,GALM;;AAWP,EAAA,MAAA,CAAA,cAAA,CAAI,KAAA,CAAA,SAAJ,EAAI,UAAJ,EAAY;AAJZ;;;;SAIA,YAAA;AACC,aAAO,KAAK,SAAZ;AACA,KAFW;oBAAA;;AAAA,GAAZ;AAIA;;;;AAGA,EAAA,KAAA,CAAA,SAAA,CAAA,OAAA,GAAA,YAAA;AACC,IAAA,MAAA,CAAA,SAAA,CAAM,OAAN,CAAa,IAAb,CAAa,IAAb;;AACA,SAAK,UAAL,CAAgB,UAAhB;;AACA,SAAK,SAAL,CAAe,OAAf;AACA,WAAO,IAAP;AACA,GALD;;AAMD,SAAA,KAAA;AAAC,CAzED,CAA2B,aAA3B,CAAA","sourceRoot":"","sourcesContent":["import * as tslib_1 from \"tslib\";\nimport { Param } from \"../context/Param\";\nimport { optionsFromArguments } from \"../util/Defaults\";\nimport { readOnly } from \"../util/Interface\";\nimport { ToneAudioNode } from \"./ToneAudioNode\";\n/**\n * Wrapper around Web Audio's native [DelayNode](http://webaudio.github.io/web-audio-api/#the-delaynode-interface).\n * @category Core\n */\nvar Delay = /** @class */ (function (_super) {\n    tslib_1.__extends(Delay, _super);\n    function Delay() {\n        var _this = _super.call(this, optionsFromArguments(Delay.getDefaults(), arguments, [\"delayTime\", \"maxDelay\"])) || this;\n        _this.name = \"Delay\";\n        var options = optionsFromArguments(Delay.getDefaults(), arguments, [\"delayTime\", \"maxDelay\"]);\n        var maxDelayInSeconds = _this.toSeconds(options.maxDelay);\n        _this._maxDelay = Math.max(maxDelayInSeconds, _this.toSeconds(options.delayTime));\n        _this._delayNode = _this.input = _this.output = _this.context.createDelay(maxDelayInSeconds);\n        _this.delayTime = new Param({\n            context: _this.context,\n            param: _this._delayNode.delayTime,\n            units: \"time\",\n            value: options.delayTime,\n            minValue: 0,\n            maxValue: _this.maxDelay,\n        });\n        readOnly(_this, \"delayTime\");\n        return _this;\n    }\n    Delay.getDefaults = function () {\n        return Object.assign(ToneAudioNode.getDefaults(), {\n            delayTime: 0,\n            maxDelay: 1,\n        });\n    };\n    Object.defineProperty(Delay.prototype, \"maxDelay\", {\n        /**\n         * The maximum delay time. This cannot be changed after\n         * the value is passed into the constructor.\n         */\n        get: function () {\n            return this._maxDelay;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    /**\n     * Clean up.\n     */\n    Delay.prototype.dispose = function () {\n        _super.prototype.dispose.call(this);\n        this._delayNode.disconnect();\n        this.delayTime.dispose();\n        return this;\n    };\n    return Delay;\n}(ToneAudioNode));\nexport { Delay };\n//# sourceMappingURL=Delay.js.map"]},"metadata":{},"sourceType":"module"}