{"ast":null,"code":"import * as tslib_1 from \"tslib\";\nimport { Tone } from \"../Tone\";\nimport { isDefined, isObject, isString, isUndef } from \"../util/TypeCheck\";\n/**\n * TimeBase is a flexible encoding of time which can be evaluated to and from a string.\n */\n\nvar TimeBaseClass =\n/** @class */\nfunction (_super) {\n  tslib_1.__extends(TimeBaseClass, _super);\n  /**\n   * @param context The context associated with the time value. Used to compute\n   * Transport and context-relative timing.\n   * @param  value  The time value as a number, string or object\n   * @param  units  Unit values\n   */\n\n\n  function TimeBaseClass(context, value, units) {\n    var _this = _super.call(this) || this;\n    /**\n     * The default units\n     */\n\n\n    _this.defaultUnits = \"s\";\n    _this._val = value;\n    _this._units = units;\n    _this.context = context;\n    _this._expressions = _this._getExpressions();\n    return _this;\n  }\n  /**\n   * All of the time encoding expressions\n   */\n\n\n  TimeBaseClass.prototype._getExpressions = function () {\n    var _this = this;\n\n    return {\n      hz: {\n        method: function (value) {\n          return _this._frequencyToUnits(parseFloat(value));\n        },\n        regexp: /^(\\d+(?:\\.\\d+)?)hz$/i\n      },\n      i: {\n        method: function (value) {\n          return _this._ticksToUnits(parseInt(value, 10));\n        },\n        regexp: /^(\\d+)i$/i\n      },\n      m: {\n        method: function (value) {\n          return _this._beatsToUnits(parseInt(value, 10) * _this._getTimeSignature());\n        },\n        regexp: /^(\\d+)m$/i\n      },\n      n: {\n        method: function (value, dot) {\n          var numericValue = parseInt(value, 10);\n          var scalar = dot === \".\" ? 1.5 : 1;\n\n          if (numericValue === 1) {\n            return _this._beatsToUnits(_this._getTimeSignature()) * scalar;\n          } else {\n            return _this._beatsToUnits(4 / numericValue) * scalar;\n          }\n        },\n        regexp: /^(\\d+)n(\\.?)$/i\n      },\n      number: {\n        method: function (value) {\n          return _this._expressions[_this.defaultUnits].method.call(_this, value);\n        },\n        regexp: /^(\\d+(?:\\.\\d+)?)$/\n      },\n      s: {\n        method: function (value) {\n          return _this._secondsToUnits(parseFloat(value));\n        },\n        regexp: /^(\\d+(?:\\.\\d+)?)s$/\n      },\n      samples: {\n        method: function (value) {\n          return parseInt(value, 10) / _this.context.sampleRate;\n        },\n        regexp: /^(\\d+)samples$/\n      },\n      t: {\n        method: function (value) {\n          var numericValue = parseInt(value, 10);\n          return _this._beatsToUnits(8 / (Math.floor(numericValue) * 3));\n        },\n        regexp: /^(\\d+)t$/i\n      },\n      tr: {\n        method: function (m, q, s) {\n          var total = 0;\n\n          if (m && m !== \"0\") {\n            total += _this._beatsToUnits(_this._getTimeSignature() * parseFloat(m));\n          }\n\n          if (q && q !== \"0\") {\n            total += _this._beatsToUnits(parseFloat(q));\n          }\n\n          if (s && s !== \"0\") {\n            total += _this._beatsToUnits(parseFloat(s) / 4);\n          }\n\n          return total;\n        },\n        regexp: /^(\\d+(?:\\.\\d+)?):(\\d+(?:\\.\\d+)?):?(\\d+(?:\\.\\d+)?)?$/\n      }\n    };\n  }; //-------------------------------------\n  // \tVALUE OF\n  //-------------------------------------\n\n  /**\n   * Evaluate the time value. Returns the time in seconds.\n   */\n\n\n  TimeBaseClass.prototype.valueOf = function () {\n    if (this._val instanceof TimeBaseClass) {\n      this.fromType(this._val);\n    }\n\n    if (isUndef(this._val)) {\n      return this._noArg();\n    } else if (isString(this._val) && isUndef(this._units)) {\n      for (var units in this._expressions) {\n        if (this._expressions[units].regexp.test(this._val.trim())) {\n          this._units = units;\n          break;\n        }\n      }\n    } else if (isObject(this._val)) {\n      var total = 0;\n\n      for (var typeName in this._val) {\n        if (isDefined(this._val[typeName])) {\n          var quantity = this._val[typeName]; // @ts-ignore\n\n          var time = new this.constructor(this.context, typeName).valueOf() * quantity;\n          total += time;\n        }\n      }\n\n      return total;\n    }\n\n    if (isDefined(this._units)) {\n      var expr = this._expressions[this._units];\n\n      var matching = this._val.toString().trim().match(expr.regexp);\n\n      if (matching) {\n        return expr.method.apply(this, matching.slice(1));\n      } else {\n        return expr.method.call(this, this._val);\n      }\n    } else if (isString(this._val)) {\n      return parseFloat(this._val);\n    } else {\n      return this._val;\n    }\n  }; //-------------------------------------\n  // \tUNIT CONVERSIONS\n  //-------------------------------------\n\n  /**\n   * Returns the value of a frequency in the current units\n   */\n\n\n  TimeBaseClass.prototype._frequencyToUnits = function (freq) {\n    return 1 / freq;\n  };\n  /**\n   * Return the value of the beats in the current units\n   */\n\n\n  TimeBaseClass.prototype._beatsToUnits = function (beats) {\n    return 60 / this._getBpm() * beats;\n  };\n  /**\n   * Returns the value of a second in the current units\n   */\n\n\n  TimeBaseClass.prototype._secondsToUnits = function (seconds) {\n    return seconds;\n  };\n  /**\n   * Returns the value of a tick in the current time units\n   */\n\n\n  TimeBaseClass.prototype._ticksToUnits = function (ticks) {\n    return ticks * this._beatsToUnits(1) / this._getPPQ();\n  };\n  /**\n   * With no arguments, return 'now'\n   */\n\n\n  TimeBaseClass.prototype._noArg = function () {\n    return this._now();\n  }; //-------------------------------------\n  // \tTEMPO CONVERSIONS\n  //-------------------------------------\n\n  /**\n   * Return the bpm\n   */\n\n\n  TimeBaseClass.prototype._getBpm = function () {\n    return this.context.transport.bpm.value;\n  };\n  /**\n   * Return the timeSignature\n   */\n\n\n  TimeBaseClass.prototype._getTimeSignature = function () {\n    return this.context.transport.timeSignature;\n  };\n  /**\n   * Return the PPQ or 192 if Transport is not available\n   */\n\n\n  TimeBaseClass.prototype._getPPQ = function () {\n    return this.context.transport.PPQ;\n  }; //-------------------------------------\n  // \tCONVERSION INTERFACE\n  //-------------------------------------\n\n  /**\n   * Coerce a time type into this units type.\n   * @param type Any time type units\n   */\n\n\n  TimeBaseClass.prototype.fromType = function (type) {\n    this._units = undefined;\n\n    switch (this.defaultUnits) {\n      case \"s\":\n        this._val = type.toSeconds();\n        break;\n\n      case \"i\":\n        this._val = type.toTicks();\n        break;\n\n      case \"hz\":\n        this._val = type.toFrequency();\n        break;\n\n      case \"midi\":\n        this._val = type.toMidi();\n        break;\n    }\n\n    return this;\n  };\n  /**\n   * Return the value in hertz\n   */\n\n\n  TimeBaseClass.prototype.toFrequency = function () {\n    return 1 / this.toSeconds();\n  };\n  /**\n   * Return the time in samples\n   */\n\n\n  TimeBaseClass.prototype.toSamples = function () {\n    return this.toSeconds() * this.context.sampleRate;\n  };\n  /**\n   * Return the time in milliseconds.\n   */\n\n\n  TimeBaseClass.prototype.toMilliseconds = function () {\n    return this.toSeconds() * 1000;\n  };\n\n  return TimeBaseClass;\n}(Tone);\n\nexport { TimeBaseClass };","map":{"version":3,"sources":["../../../../Tone/core/type/TimeBase.ts"],"names":[],"mappings":"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","sourceRoot":"","sourcesContent":["import * as tslib_1 from \"tslib\";\nimport { Tone } from \"../Tone\";\nimport { isDefined, isObject, isString, isUndef } from \"../util/TypeCheck\";\n/**\n * TimeBase is a flexible encoding of time which can be evaluated to and from a string.\n */\nvar TimeBaseClass = /** @class */ (function (_super) {\n    tslib_1.__extends(TimeBaseClass, _super);\n    /**\n     * @param context The context associated with the time value. Used to compute\n     * Transport and context-relative timing.\n     * @param  value  The time value as a number, string or object\n     * @param  units  Unit values\n     */\n    function TimeBaseClass(context, value, units) {\n        var _this = _super.call(this) || this;\n        /**\n         * The default units\n         */\n        _this.defaultUnits = \"s\";\n        _this._val = value;\n        _this._units = units;\n        _this.context = context;\n        _this._expressions = _this._getExpressions();\n        return _this;\n    }\n    /**\n     * All of the time encoding expressions\n     */\n    TimeBaseClass.prototype._getExpressions = function () {\n        var _this = this;\n        return {\n            hz: {\n                method: function (value) {\n                    return _this._frequencyToUnits(parseFloat(value));\n                },\n                regexp: /^(\\d+(?:\\.\\d+)?)hz$/i,\n            },\n            i: {\n                method: function (value) {\n                    return _this._ticksToUnits(parseInt(value, 10));\n                },\n                regexp: /^(\\d+)i$/i,\n            },\n            m: {\n                method: function (value) {\n                    return _this._beatsToUnits(parseInt(value, 10) * _this._getTimeSignature());\n                },\n                regexp: /^(\\d+)m$/i,\n            },\n            n: {\n                method: function (value, dot) {\n                    var numericValue = parseInt(value, 10);\n                    var scalar = dot === \".\" ? 1.5 : 1;\n                    if (numericValue === 1) {\n                        return _this._beatsToUnits(_this._getTimeSignature()) * scalar;\n                    }\n                    else {\n                        return _this._beatsToUnits(4 / numericValue) * scalar;\n                    }\n                },\n                regexp: /^(\\d+)n(\\.?)$/i,\n            },\n            number: {\n                method: function (value) {\n                    return _this._expressions[_this.defaultUnits].method.call(_this, value);\n                },\n                regexp: /^(\\d+(?:\\.\\d+)?)$/,\n            },\n            s: {\n                method: function (value) {\n                    return _this._secondsToUnits(parseFloat(value));\n                },\n                regexp: /^(\\d+(?:\\.\\d+)?)s$/,\n            },\n            samples: {\n                method: function (value) {\n                    return parseInt(value, 10) / _this.context.sampleRate;\n                },\n                regexp: /^(\\d+)samples$/,\n            },\n            t: {\n                method: function (value) {\n                    var numericValue = parseInt(value, 10);\n                    return _this._beatsToUnits(8 / (Math.floor(numericValue) * 3));\n                },\n                regexp: /^(\\d+)t$/i,\n            },\n            tr: {\n                method: function (m, q, s) {\n                    var total = 0;\n                    if (m && m !== \"0\") {\n                        total += _this._beatsToUnits(_this._getTimeSignature() * parseFloat(m));\n                    }\n                    if (q && q !== \"0\") {\n                        total += _this._beatsToUnits(parseFloat(q));\n                    }\n                    if (s && s !== \"0\") {\n                        total += _this._beatsToUnits(parseFloat(s) / 4);\n                    }\n                    return total;\n                },\n                regexp: /^(\\d+(?:\\.\\d+)?):(\\d+(?:\\.\\d+)?):?(\\d+(?:\\.\\d+)?)?$/,\n            },\n        };\n    };\n    //-------------------------------------\n    // \tVALUE OF\n    //-------------------------------------\n    /**\n     * Evaluate the time value. Returns the time in seconds.\n     */\n    TimeBaseClass.prototype.valueOf = function () {\n        if (this._val instanceof TimeBaseClass) {\n            this.fromType(this._val);\n        }\n        if (isUndef(this._val)) {\n            return this._noArg();\n        }\n        else if (isString(this._val) && isUndef(this._units)) {\n            for (var units in this._expressions) {\n                if (this._expressions[units].regexp.test(this._val.trim())) {\n                    this._units = units;\n                    break;\n                }\n            }\n        }\n        else if (isObject(this._val)) {\n            var total = 0;\n            for (var typeName in this._val) {\n                if (isDefined(this._val[typeName])) {\n                    var quantity = this._val[typeName];\n                    // @ts-ignore\n                    var time = (new this.constructor(this.context, typeName)).valueOf() * quantity;\n                    total += time;\n                }\n            }\n            return total;\n        }\n        if (isDefined(this._units)) {\n            var expr = this._expressions[this._units];\n            var matching = this._val.toString().trim().match(expr.regexp);\n            if (matching) {\n                return expr.method.apply(this, matching.slice(1));\n            }\n            else {\n                return expr.method.call(this, this._val);\n            }\n        }\n        else if (isString(this._val)) {\n            return parseFloat(this._val);\n        }\n        else {\n            return this._val;\n        }\n    };\n    //-------------------------------------\n    // \tUNIT CONVERSIONS\n    //-------------------------------------\n    /**\n     * Returns the value of a frequency in the current units\n     */\n    TimeBaseClass.prototype._frequencyToUnits = function (freq) {\n        return 1 / freq;\n    };\n    /**\n     * Return the value of the beats in the current units\n     */\n    TimeBaseClass.prototype._beatsToUnits = function (beats) {\n        return (60 / this._getBpm()) * beats;\n    };\n    /**\n     * Returns the value of a second in the current units\n     */\n    TimeBaseClass.prototype._secondsToUnits = function (seconds) {\n        return seconds;\n    };\n    /**\n     * Returns the value of a tick in the current time units\n     */\n    TimeBaseClass.prototype._ticksToUnits = function (ticks) {\n        return (ticks * (this._beatsToUnits(1)) / this._getPPQ());\n    };\n    /**\n     * With no arguments, return 'now'\n     */\n    TimeBaseClass.prototype._noArg = function () {\n        return this._now();\n    };\n    //-------------------------------------\n    // \tTEMPO CONVERSIONS\n    //-------------------------------------\n    /**\n     * Return the bpm\n     */\n    TimeBaseClass.prototype._getBpm = function () {\n        return this.context.transport.bpm.value;\n    };\n    /**\n     * Return the timeSignature\n     */\n    TimeBaseClass.prototype._getTimeSignature = function () {\n        return this.context.transport.timeSignature;\n    };\n    /**\n     * Return the PPQ or 192 if Transport is not available\n     */\n    TimeBaseClass.prototype._getPPQ = function () {\n        return this.context.transport.PPQ;\n    };\n    //-------------------------------------\n    // \tCONVERSION INTERFACE\n    //-------------------------------------\n    /**\n     * Coerce a time type into this units type.\n     * @param type Any time type units\n     */\n    TimeBaseClass.prototype.fromType = function (type) {\n        this._units = undefined;\n        switch (this.defaultUnits) {\n            case \"s\":\n                this._val = type.toSeconds();\n                break;\n            case \"i\":\n                this._val = type.toTicks();\n                break;\n            case \"hz\":\n                this._val = type.toFrequency();\n                break;\n            case \"midi\":\n                this._val = type.toMidi();\n                break;\n        }\n        return this;\n    };\n    /**\n     * Return the value in hertz\n     */\n    TimeBaseClass.prototype.toFrequency = function () {\n        return 1 / this.toSeconds();\n    };\n    /**\n     * Return the time in samples\n     */\n    TimeBaseClass.prototype.toSamples = function () {\n        return this.toSeconds() * this.context.sampleRate;\n    };\n    /**\n     * Return the time in milliseconds.\n     */\n    TimeBaseClass.prototype.toMilliseconds = function () {\n        return this.toSeconds() * 1000;\n    };\n    return TimeBaseClass;\n}(Tone));\nexport { TimeBaseClass };\n//# sourceMappingURL=TimeBase.js.map"]},"metadata":{},"sourceType":"module"}