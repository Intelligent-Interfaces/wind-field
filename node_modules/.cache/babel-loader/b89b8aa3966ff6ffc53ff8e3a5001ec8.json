{"ast":null,"code":"import * as tslib_1 from \"tslib\";\nimport { ToneAudioNode } from \"../../core/context/ToneAudioNode\";\nimport { optionsFromArguments } from \"../../core/util/Defaults\";\nimport { FeedbackCombFilter } from \"./FeedbackCombFilter\";\nimport { OnePoleFilter } from \"./OnePoleFilter\";\n/**\n * A lowpass feedback comb filter. It is similar to\n * [[FeedbackCombFilter]], but includes a lowpass filter.\n * @category Component\n */\n\nvar LowpassCombFilter =\n/** @class */\nfunction (_super) {\n  tslib_1.__extends(LowpassCombFilter, _super);\n\n  function LowpassCombFilter() {\n    var _this = _super.call(this, optionsFromArguments(LowpassCombFilter.getDefaults(), arguments, [\"delayTime\", \"resonance\", \"dampening\"])) || this;\n\n    _this.name = \"LowpassCombFilter\";\n    var options = optionsFromArguments(LowpassCombFilter.getDefaults(), arguments, [\"delayTime\", \"resonance\", \"dampening\"]);\n    _this._combFilter = _this.output = new FeedbackCombFilter({\n      context: _this.context,\n      delayTime: options.delayTime,\n      resonance: options.resonance\n    });\n    _this.delayTime = _this._combFilter.delayTime;\n    _this.resonance = _this._combFilter.resonance;\n    _this._lowpass = _this.input = new OnePoleFilter({\n      context: _this.context,\n      frequency: options.dampening,\n      type: \"lowpass\"\n    }); // connections\n\n    _this._lowpass.connect(_this._combFilter);\n\n    return _this;\n  }\n\n  LowpassCombFilter.getDefaults = function () {\n    return Object.assign(ToneAudioNode.getDefaults(), {\n      dampening: 3000,\n      delayTime: 0.1,\n      resonance: 0.5\n    });\n  };\n\n  Object.defineProperty(LowpassCombFilter.prototype, \"dampening\", {\n    /**\n     * The dampening control of the feedback\n     */\n    get: function () {\n      return this._lowpass.frequency;\n    },\n    set: function (fq) {\n      this._lowpass.frequency = fq;\n    },\n    enumerable: true,\n    configurable: true\n  });\n\n  LowpassCombFilter.prototype.dispose = function () {\n    _super.prototype.dispose.call(this);\n\n    this._combFilter.dispose();\n\n    this._lowpass.dispose();\n\n    return this;\n  };\n\n  return LowpassCombFilter;\n}(ToneAudioNode);\n\nexport { LowpassCombFilter };","map":{"version":3,"sources":["../../../../Tone/component/filter/LowpassCombFilter.ts"],"names":[],"mappings":";AACA,SAAgC,aAAhC,QAA2E,kCAA3E;AAEA,SAAS,oBAAT,QAAqC,0BAArC;AAEA,SAAS,kBAAT,QAAmC,sBAAnC;AACA,SAAS,aAAT,QAA8B,iBAA9B;AAQA;;;;;;AAKA,IAAA,iBAAA;AAAA;AAAA,UAAA,MAAA,EAAA;AAAuC,EAAA,OAAA,CAAA,SAAA,CAAA,iBAAA,EAAA,MAAA;;AAkCtC,WAAA,iBAAA,GAAA;AAAA,QAAA,KAAA,GACC,MAAA,CAAA,IAAA,CAAA,IAAA,EAAM,oBAAoB,CAAC,iBAAiB,CAAC,WAAlB,EAAD,EAAkC,SAAlC,EAA6C,CAAC,WAAD,EAAc,WAAd,EAA2B,WAA3B,CAA7C,CAA1B,KAAgH,IADjH;;AAhCS,IAAA,KAAA,CAAA,IAAA,GAAO,mBAAP;AAkCR,QAAM,OAAO,GAAG,oBAAoB,CAAC,iBAAiB,CAAC,WAAlB,EAAD,EAAkC,SAAlC,EAA6C,CAAC,WAAD,EAAc,WAAd,EAA2B,WAA3B,CAA7C,CAApC;AAEA,IAAA,KAAI,CAAC,WAAL,GAAmB,KAAI,CAAC,MAAL,GAAc,IAAI,kBAAJ,CAAuB;AACvD,MAAA,OAAO,EAAE,KAAI,CAAC,OADyC;AAEvD,MAAA,SAAS,EAAE,OAAO,CAAC,SAFoC;AAGvD,MAAA,SAAS,EAAE,OAAO,CAAC;AAHoC,KAAvB,CAAjC;AAKA,IAAA,KAAI,CAAC,SAAL,GAAiB,KAAI,CAAC,WAAL,CAAiB,SAAlC;AACA,IAAA,KAAI,CAAC,SAAL,GAAiB,KAAI,CAAC,WAAL,CAAiB,SAAlC;AAEA,IAAA,KAAI,CAAC,QAAL,GAAgB,KAAI,CAAC,KAAL,GAAa,IAAI,aAAJ,CAAkB;AAC9C,MAAA,OAAO,EAAE,KAAI,CAAC,OADgC;AAE9C,MAAA,SAAS,EAAE,OAAO,CAAC,SAF2B;AAG9C,MAAA,IAAI,EAAE;AAHwC,KAAlB,CAA7B,CAZD,CAkBC;;AACA,IAAA,KAAI,CAAC,QAAL,CAAc,OAAd,CAAsB,KAAI,CAAC,WAA3B;;;AACA;;AAEM,EAAA,iBAAA,CAAA,WAAA,GAAP,YAAA;AACC,WAAO,MAAM,CAAC,MAAP,CAAc,aAAa,CAAC,WAAd,EAAd,EAA2C;AACjD,MAAA,SAAS,EAAE,IADsC;AAEjD,MAAA,SAAS,EAAE,GAFsC;AAGjD,MAAA,SAAS,EAAE;AAHsC,KAA3C,CAAP;AAKA,GANM;;AAWP,EAAA,MAAA,CAAA,cAAA,CAAI,iBAAA,CAAA,SAAJ,EAAI,WAAJ,EAAa;AAHb;;;SAGA,YAAA;AACC,aAAO,KAAK,QAAL,CAAc,SAArB;AACA,KAFY;SAGb,UAAc,EAAd,EAAgB;AACf,WAAK,QAAL,CAAc,SAAd,GAA0B,EAA1B;AACA,KALY;oBAAA;;AAAA,GAAb;;AAOA,EAAA,iBAAA,CAAA,SAAA,CAAA,OAAA,GAAA,YAAA;AACC,IAAA,MAAA,CAAA,SAAA,CAAM,OAAN,CAAa,IAAb,CAAa,IAAb;;AACA,SAAK,WAAL,CAAiB,OAAjB;;AACA,SAAK,QAAL,CAAc,OAAd;;AACA,WAAO,IAAP;AACA,GALD;;AAMD,SAAA,iBAAA;AAAC,CAhFD,CAAuC,aAAvC,CAAA","sourceRoot":"","sourcesContent":["import * as tslib_1 from \"tslib\";\nimport { ToneAudioNode } from \"../../core/context/ToneAudioNode\";\nimport { optionsFromArguments } from \"../../core/util/Defaults\";\nimport { FeedbackCombFilter } from \"./FeedbackCombFilter\";\nimport { OnePoleFilter } from \"./OnePoleFilter\";\n/**\n * A lowpass feedback comb filter. It is similar to\n * [[FeedbackCombFilter]], but includes a lowpass filter.\n * @category Component\n */\nvar LowpassCombFilter = /** @class */ (function (_super) {\n    tslib_1.__extends(LowpassCombFilter, _super);\n    function LowpassCombFilter() {\n        var _this = _super.call(this, optionsFromArguments(LowpassCombFilter.getDefaults(), arguments, [\"delayTime\", \"resonance\", \"dampening\"])) || this;\n        _this.name = \"LowpassCombFilter\";\n        var options = optionsFromArguments(LowpassCombFilter.getDefaults(), arguments, [\"delayTime\", \"resonance\", \"dampening\"]);\n        _this._combFilter = _this.output = new FeedbackCombFilter({\n            context: _this.context,\n            delayTime: options.delayTime,\n            resonance: options.resonance,\n        });\n        _this.delayTime = _this._combFilter.delayTime;\n        _this.resonance = _this._combFilter.resonance;\n        _this._lowpass = _this.input = new OnePoleFilter({\n            context: _this.context,\n            frequency: options.dampening,\n            type: \"lowpass\",\n        });\n        // connections\n        _this._lowpass.connect(_this._combFilter);\n        return _this;\n    }\n    LowpassCombFilter.getDefaults = function () {\n        return Object.assign(ToneAudioNode.getDefaults(), {\n            dampening: 3000,\n            delayTime: 0.1,\n            resonance: 0.5,\n        });\n    };\n    Object.defineProperty(LowpassCombFilter.prototype, \"dampening\", {\n        /**\n         * The dampening control of the feedback\n         */\n        get: function () {\n            return this._lowpass.frequency;\n        },\n        set: function (fq) {\n            this._lowpass.frequency = fq;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    LowpassCombFilter.prototype.dispose = function () {\n        _super.prototype.dispose.call(this);\n        this._combFilter.dispose();\n        this._lowpass.dispose();\n        return this;\n    };\n    return LowpassCombFilter;\n}(ToneAudioNode));\nexport { LowpassCombFilter };\n//# sourceMappingURL=LowpassCombFilter.js.map"]},"metadata":{},"sourceType":"module"}