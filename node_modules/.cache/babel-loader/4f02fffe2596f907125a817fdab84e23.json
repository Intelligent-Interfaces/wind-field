{"ast":null,"code":"import * as tslib_1 from \"tslib\";\nimport { StereoEffect } from \"./StereoEffect\";\nimport { Signal } from \"../signal/Signal\";\nimport { Gain } from \"../core/context/Gain\";\nimport { readOnly } from \"../core/util/Interface\";\nimport { Split } from \"../component/channel/Split\";\nimport { Merge } from \"../component/channel/Merge\";\n/**\n * Just like a stereo feedback effect, but the feedback is routed from left to right\n * and right to left instead of on the same channel.\n * ```\n * +--------------------------------+ feedbackL <-----------------------------------+\n * |                                                                                |\n * +-->                          +----->        +---->                          +---+\n *      feedbackMerge +--> split        (EFFECT)       merge +--> feedbackSplit\n * +-->                          +----->        +---->                          +---+\n * |                                                                                |\n * +--------------------------------+ feedbackR <-----------------------------------+\n * ```\n */\n\nvar StereoFeedbackEffect =\n/** @class */\nfunction (_super) {\n  tslib_1.__extends(StereoFeedbackEffect, _super);\n\n  function StereoFeedbackEffect(options) {\n    var _this = _super.call(this, options) || this;\n\n    _this.feedback = new Signal({\n      context: _this.context,\n      value: options.feedback,\n      units: \"normalRange\"\n    });\n    _this._feedbackL = new Gain({\n      context: _this.context\n    });\n    _this._feedbackR = new Gain({\n      context: _this.context\n    });\n    _this._feedbackSplit = new Split({\n      context: _this.context,\n      channels: 2\n    });\n    _this._feedbackMerge = new Merge({\n      context: _this.context,\n      channels: 2\n    });\n\n    _this._merge.connect(_this._feedbackSplit);\n\n    _this._feedbackMerge.connect(_this._split); // the left output connected to the left input\n\n\n    _this._feedbackSplit.connect(_this._feedbackL, 0, 0);\n\n    _this._feedbackL.connect(_this._feedbackMerge, 0, 0); // the right output connected to the right input\n\n\n    _this._feedbackSplit.connect(_this._feedbackR, 1, 0);\n\n    _this._feedbackR.connect(_this._feedbackMerge, 0, 1); // the feedback control\n\n\n    _this.feedback.fan(_this._feedbackL.gain, _this._feedbackR.gain);\n\n    readOnly(_this, [\"feedback\"]);\n    return _this;\n  }\n\n  StereoFeedbackEffect.getDefaults = function () {\n    return Object.assign(StereoEffect.getDefaults(), {\n      feedback: 0.5\n    });\n  };\n\n  StereoFeedbackEffect.prototype.dispose = function () {\n    _super.prototype.dispose.call(this);\n\n    this.feedback.dispose();\n\n    this._feedbackL.dispose();\n\n    this._feedbackR.dispose();\n\n    this._feedbackSplit.dispose();\n\n    this._feedbackMerge.dispose();\n\n    return this;\n  };\n\n  return StereoFeedbackEffect;\n}(StereoEffect);\n\nexport { StereoFeedbackEffect };","map":{"version":3,"sources":["../../../Tone/effect/StereoFeedbackEffect.ts"],"names":[],"mappings":";AAAA,SAAS,YAAT,QAAkD,gBAAlD;AAEA,SAAS,MAAT,QAAuB,kBAAvB;AACA,SAAS,IAAT,QAAqB,sBAArB;AACA,SAAS,QAAT,QAAyB,wBAAzB;AACA,SAAS,KAAT,QAAsB,4BAAtB;AACA,SAAS,KAAT,QAAsB,4BAAtB;AAMA;;;;;;;;;;;;;;AAaA,IAAA,oBAAA;AAAA;AAAA,UAAA,MAAA,EAAA;AAAuF,EAAA,OAAA,CAAA,SAAA,CAAA,oBAAA,EAAA,MAAA;;AA6BtF,WAAA,oBAAA,CAAY,OAAZ,EAAgD;AAAhD,QAAA,KAAA,GAEC,MAAA,CAAA,IAAA,CAAA,IAAA,EAAM,OAAN,KAAc,IAFf;;AAIC,IAAA,KAAI,CAAC,QAAL,GAAgB,IAAI,MAAJ,CAAW;AAC1B,MAAA,OAAO,EAAE,KAAI,CAAC,OADY;AAE1B,MAAA,KAAK,EAAE,OAAO,CAAC,QAFW;AAG1B,MAAA,KAAK,EAAE;AAHmB,KAAX,CAAhB;AAKA,IAAA,KAAI,CAAC,UAAL,GAAkB,IAAI,IAAJ,CAAS;AAAE,MAAA,OAAO,EAAE,KAAI,CAAC;AAAhB,KAAT,CAAlB;AACA,IAAA,KAAI,CAAC,UAAL,GAAkB,IAAI,IAAJ,CAAS;AAAE,MAAA,OAAO,EAAE,KAAI,CAAC;AAAhB,KAAT,CAAlB;AAEA,IAAA,KAAI,CAAC,cAAL,GAAsB,IAAI,KAAJ,CAAU;AAAE,MAAA,OAAO,EAAE,KAAI,CAAC,OAAhB;AAAyB,MAAA,QAAQ,EAAE;AAAnC,KAAV,CAAtB;AACA,IAAA,KAAI,CAAC,cAAL,GAAsB,IAAI,KAAJ,CAAU;AAAE,MAAA,OAAO,EAAE,KAAI,CAAC,OAAhB;AAAyB,MAAA,QAAQ,EAAE;AAAnC,KAAV,CAAtB;;AAEA,IAAA,KAAI,CAAC,MAAL,CAAY,OAAZ,CAAoB,KAAI,CAAC,cAAzB;;AACA,IAAA,KAAI,CAAC,cAAL,CAAoB,OAApB,CAA4B,KAAI,CAAC,MAAjC,EAhB+C,CAkB/C;;;AACA,IAAA,KAAI,CAAC,cAAL,CAAoB,OAApB,CAA4B,KAAI,CAAC,UAAjC,EAA6C,CAA7C,EAAgD,CAAhD;;AACA,IAAA,KAAI,CAAC,UAAL,CAAgB,OAAhB,CAAwB,KAAI,CAAC,cAA7B,EAA6C,CAA7C,EAAgD,CAAhD,EApB+C,CAsB/C;;;AACA,IAAA,KAAI,CAAC,cAAL,CAAoB,OAApB,CAA4B,KAAI,CAAC,UAAjC,EAA6C,CAA7C,EAAgD,CAAhD;;AACA,IAAA,KAAI,CAAC,UAAL,CAAgB,OAAhB,CAAwB,KAAI,CAAC,cAA7B,EAA6C,CAA7C,EAAgD,CAAhD,EAxB+C,CA0B/C;;;AACA,IAAA,KAAI,CAAC,QAAL,CAAc,GAAd,CAAkB,KAAI,CAAC,UAAL,CAAgB,IAAlC,EAAwC,KAAI,CAAC,UAAL,CAAgB,IAAxD;;AACA,IAAA,QAAQ,CAAC,KAAD,EAAO,CAAC,UAAD,CAAP,CAAR;;AACA;;AAEM,EAAA,oBAAA,CAAA,WAAA,GAAP,YAAA;AACC,WAAO,MAAM,CAAC,MAAP,CAAc,YAAY,CAAC,WAAb,EAAd,EAA0C;AAChD,MAAA,QAAQ,EAAE;AADsC,KAA1C,CAAP;AAGA,GAJM;;AAMP,EAAA,oBAAA,CAAA,SAAA,CAAA,OAAA,GAAA,YAAA;AACC,IAAA,MAAA,CAAA,SAAA,CAAM,OAAN,CAAa,IAAb,CAAa,IAAb;;AACA,SAAK,QAAL,CAAc,OAAd;;AACA,SAAK,UAAL,CAAgB,OAAhB;;AACA,SAAK,UAAL,CAAgB,OAAhB;;AACA,SAAK,cAAL,CAAoB,OAApB;;AACA,SAAK,cAAL,CAAoB,OAApB;;AACA,WAAO,IAAP;AACA,GARD;;AASD,SAAA,oBAAA;AAAC,CA3ED,CAAuF,YAAvF,CAAA","sourceRoot":"","sourcesContent":["import * as tslib_1 from \"tslib\";\nimport { StereoEffect } from \"./StereoEffect\";\nimport { Signal } from \"../signal/Signal\";\nimport { Gain } from \"../core/context/Gain\";\nimport { readOnly } from \"../core/util/Interface\";\nimport { Split } from \"../component/channel/Split\";\nimport { Merge } from \"../component/channel/Merge\";\n/**\n * Just like a stereo feedback effect, but the feedback is routed from left to right\n * and right to left instead of on the same channel.\n * ```\n * +--------------------------------+ feedbackL <-----------------------------------+\n * |                                                                                |\n * +-->                          +----->        +---->                          +---+\n *      feedbackMerge +--> split        (EFFECT)       merge +--> feedbackSplit\n * +-->                          +----->        +---->                          +---+\n * |                                                                                |\n * +--------------------------------+ feedbackR <-----------------------------------+\n * ```\n */\nvar StereoFeedbackEffect = /** @class */ (function (_super) {\n    tslib_1.__extends(StereoFeedbackEffect, _super);\n    function StereoFeedbackEffect(options) {\n        var _this = _super.call(this, options) || this;\n        _this.feedback = new Signal({\n            context: _this.context,\n            value: options.feedback,\n            units: \"normalRange\"\n        });\n        _this._feedbackL = new Gain({ context: _this.context });\n        _this._feedbackR = new Gain({ context: _this.context });\n        _this._feedbackSplit = new Split({ context: _this.context, channels: 2 });\n        _this._feedbackMerge = new Merge({ context: _this.context, channels: 2 });\n        _this._merge.connect(_this._feedbackSplit);\n        _this._feedbackMerge.connect(_this._split);\n        // the left output connected to the left input\n        _this._feedbackSplit.connect(_this._feedbackL, 0, 0);\n        _this._feedbackL.connect(_this._feedbackMerge, 0, 0);\n        // the right output connected to the right input\n        _this._feedbackSplit.connect(_this._feedbackR, 1, 0);\n        _this._feedbackR.connect(_this._feedbackMerge, 0, 1);\n        // the feedback control\n        _this.feedback.fan(_this._feedbackL.gain, _this._feedbackR.gain);\n        readOnly(_this, [\"feedback\"]);\n        return _this;\n    }\n    StereoFeedbackEffect.getDefaults = function () {\n        return Object.assign(StereoEffect.getDefaults(), {\n            feedback: 0.5,\n        });\n    };\n    StereoFeedbackEffect.prototype.dispose = function () {\n        _super.prototype.dispose.call(this);\n        this.feedback.dispose();\n        this._feedbackL.dispose();\n        this._feedbackR.dispose();\n        this._feedbackSplit.dispose();\n        this._feedbackMerge.dispose();\n        return this;\n    };\n    return StereoFeedbackEffect;\n}(StereoEffect));\nexport { StereoFeedbackEffect };\n//# sourceMappingURL=StereoFeedbackEffect.js.map"]},"metadata":{},"sourceType":"module"}