{"ast":null,"code":"import _slicedToArray from \"/Users/erickoduniyi/Desktop/affective_chaos_control/Emulators/wind-field/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\nimport { useState, useEffect } from \"react\";\nexport function useKeyPress(targetKey) {\n  // State for keeping track of whether key is pressed\n  const _useState = useState(false),\n        _useState2 = _slicedToArray(_useState, 2),\n        keyPressed = _useState2[0],\n        setKeyPressed = _useState2[1]; // If pressed key is our target key then set to true\n\n\n  function downHandler({\n    code\n  }) {\n    if (code === targetKey) {\n      setKeyPressed(true);\n    }\n  } // If released key is our target key then set to false\n\n\n  const upHandler = ({\n    code\n  }) => {\n    if (code === targetKey) {\n      setKeyPressed(false);\n    }\n  }; // Add event listeners\n\n\n  useEffect(() => {\n    window.addEventListener('keydown', downHandler);\n    window.addEventListener('keyup', upHandler); // Remove event listeners on cleanupt\n\n    return () => {\n      window.removeEventListener('keydown', downHandler);\n      window.removeEventListener('keyup', upHandler);\n    };\n  }, // eslint-disable-next-line react-hooks/exhaustive-deps\n  []);\n  return keyPressed;\n}","map":{"version":3,"sources":["/Users/erickoduniyi/Desktop/affective_chaos_control/Emulators/wind-field/src/hooks/use-keypress.ts"],"names":["useState","useEffect","useKeyPress","targetKey","keyPressed","setKeyPressed","downHandler","code","upHandler","window","addEventListener","removeEventListener"],"mappings":";AAAA,SAASA,QAAT,EAAmBC,SAAnB,QAAoC,OAApC;AAEA,OAAO,SAASC,WAAT,CAAqBC,SAArB,EAAwC;AAC7C;AAD6C,oBAETH,QAAQ,CAAC,KAAD,CAFC;AAAA;AAAA,QAEtCI,UAFsC;AAAA,QAE1BC,aAF0B,kBAI7C;;;AACA,WAASC,WAAT,CAAqB;AAAEC,IAAAA;AAAF,GAArB,EAAiD;AAC/C,QAAIA,IAAI,KAAKJ,SAAb,EAAwB;AACtBE,MAAAA,aAAa,CAAC,IAAD,CAAb;AACD;AACF,GAT4C,CAW7C;;;AACA,QAAMG,SAAS,GAAG,CAAC;AAAED,IAAAA;AAAF,GAAD,KAAgC;AAChD,QAAIA,IAAI,KAAKJ,SAAb,EAAwB;AACtBE,MAAAA,aAAa,CAAC,KAAD,CAAb;AACD;AACF,GAJD,CAZ6C,CAkB7C;;;AACAJ,EAAAA,SAAS,CACP,MAAM;AACJQ,IAAAA,MAAM,CAACC,gBAAP,CAAwB,SAAxB,EAAmCJ,WAAnC;AACAG,IAAAA,MAAM,CAACC,gBAAP,CAAwB,OAAxB,EAAiCF,SAAjC,EAFI,CAGJ;;AACA,WAAO,MAAM;AACXC,MAAAA,MAAM,CAACE,mBAAP,CAA2B,SAA3B,EAAsCL,WAAtC;AACAG,MAAAA,MAAM,CAACE,mBAAP,CAA2B,OAA3B,EAAoCH,SAApC;AACD,KAHD;AAID,GATM,EAUP;AACA,IAXO,CAAT;AAcA,SAAOJ,UAAP;AACD","sourcesContent":["import { useState, useEffect } from \"react\";\n\nexport function useKeyPress(targetKey: string) {\n  // State for keeping track of whether key is pressed\n  const [keyPressed, setKeyPressed] = useState(false);\n\n  // If pressed key is our target key then set to true\n  function downHandler({ code }: { code: string }) {\n    if (code === targetKey) {\n      setKeyPressed(true);\n    }\n  }\n\n  // If released key is our target key then set to false\n  const upHandler = ({ code }: { code: string }) => {\n    if (code === targetKey) {\n      setKeyPressed(false);\n    }\n  };\n\n  // Add event listeners\n  useEffect(\n    () => {\n      window.addEventListener('keydown', downHandler);\n      window.addEventListener('keyup', upHandler);\n      // Remove event listeners on cleanupt\n      return () => {\n        window.removeEventListener('keydown', downHandler);\n        window.removeEventListener('keyup', upHandler);\n      };\n    },\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n    []\n  );\n\n  return keyPressed;\n}\n"]},"metadata":{},"sourceType":"module"}