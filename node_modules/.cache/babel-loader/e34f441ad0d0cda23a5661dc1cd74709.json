{"ast":null,"code":"import * as tslib_1 from \"tslib\";\nimport { StereoEffect } from \"./StereoEffect\";\nimport { LFO } from \"../source/oscillator/LFO\";\nimport { Gain } from \"../core/context/Gain\";\nimport { Signal } from \"../signal/Signal\";\nimport { optionsFromArguments } from \"../core/util/Defaults\";\nimport { readOnly } from \"../core/util/Interface\";\n/**\n * Tremolo modulates the amplitude of an incoming signal using an [[LFO]].\n * The effect is a stereo effect where the modulation phase is inverted in each channel.\n *\n * @example\n * import { Oscillator, Tremolo } from \"tone\";\n * // create a tremolo and start it's LFO\n * const tremolo = new Tremolo(9, 0.75).toDestination().start();\n * // route an oscillator through the tremolo and start it\n * const oscillator = new Oscillator().connect(tremolo).start();\n *\n * @category Effect\n */\n\nvar Tremolo =\n/** @class */\nfunction (_super) {\n  tslib_1.__extends(Tremolo, _super);\n\n  function Tremolo() {\n    var _this = _super.call(this, optionsFromArguments(Tremolo.getDefaults(), arguments, [\"frequency\", \"depth\"])) || this;\n\n    _this.name = \"Tremolo\";\n    var options = optionsFromArguments(Tremolo.getDefaults(), arguments, [\"frequency\", \"depth\"]);\n    _this._lfoL = new LFO({\n      context: _this.context,\n      type: options.type,\n      min: 1,\n      max: 0\n    });\n    _this._lfoR = new LFO({\n      context: _this.context,\n      type: options.type,\n      min: 1,\n      max: 0\n    });\n    _this._amplitudeL = new Gain({\n      context: _this.context\n    });\n    _this._amplitudeR = new Gain({\n      context: _this.context\n    });\n    _this.frequency = new Signal({\n      context: _this.context,\n      value: options.frequency,\n      units: \"frequency\"\n    });\n    _this.depth = new Signal({\n      context: _this.context,\n      value: options.depth,\n      units: \"normalRange\"\n    });\n    readOnly(_this, [\"frequency\", \"depth\"]);\n\n    _this.connectEffectLeft(_this._amplitudeL);\n\n    _this.connectEffectRight(_this._amplitudeR);\n\n    _this._lfoL.connect(_this._amplitudeL.gain);\n\n    _this._lfoR.connect(_this._amplitudeR.gain);\n\n    _this.frequency.fan(_this._lfoL.frequency, _this._lfoR.frequency);\n\n    _this.depth.fan(_this._lfoR.amplitude, _this._lfoL.amplitude);\n\n    _this.spread = options.spread;\n    return _this;\n  }\n\n  Tremolo.getDefaults = function () {\n    return Object.assign(StereoEffect.getDefaults(), {\n      frequency: 10,\n      type: \"sine\",\n      depth: 0.5,\n      spread: 180\n    });\n  };\n  /**\n   * Start the tremolo.\n   */\n\n\n  Tremolo.prototype.start = function (time) {\n    this._lfoL.start(time);\n\n    this._lfoR.start(time);\n\n    return this;\n  };\n  /**\n   * Stop the tremolo.\n   */\n\n\n  Tremolo.prototype.stop = function (time) {\n    this._lfoL.stop(time);\n\n    this._lfoR.stop(time);\n\n    return this;\n  };\n  /**\n   * Sync the effect to the transport.\n   */\n\n\n  Tremolo.prototype.sync = function () {\n    this._lfoL.sync();\n\n    this._lfoR.sync();\n\n    this.context.transport.syncSignal(this.frequency);\n    return this;\n  };\n  /**\n   * Unsync the filter from the transport\n   */\n\n\n  Tremolo.prototype.unsync = function () {\n    this._lfoL.unsync();\n\n    this._lfoR.unsync();\n\n    this.context.transport.unsyncSignal(this.frequency);\n    return this;\n  };\n\n  Object.defineProperty(Tremolo.prototype, \"type\", {\n    /**\n     * The oscillator type.\n     */\n    get: function () {\n      return this._lfoL.type;\n    },\n    set: function (type) {\n      this._lfoL.type = type;\n      this._lfoR.type = type;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(Tremolo.prototype, \"spread\", {\n    /**\n     * Amount of stereo spread. When set to 0, both LFO's will be panned centrally.\n     * When set to 180, LFO's will be panned hard left and right respectively.\n     */\n    get: function () {\n      return this._lfoR.phase - this._lfoL.phase; // 180\n    },\n    set: function (spread) {\n      this._lfoL.phase = 90 - spread / 2;\n      this._lfoR.phase = spread / 2 + 90;\n    },\n    enumerable: true,\n    configurable: true\n  });\n\n  Tremolo.prototype.dispose = function () {\n    _super.prototype.dispose.call(this);\n\n    this._lfoL.dispose();\n\n    this._lfoR.dispose();\n\n    this._amplitudeL.dispose();\n\n    this._amplitudeR.dispose();\n\n    this.frequency.dispose();\n    this.depth.dispose();\n    return this;\n  };\n\n  return Tremolo;\n}(StereoEffect);\n\nexport { Tremolo };","map":{"version":3,"sources":["../../../Tone/effect/Tremolo.ts"],"names":[],"mappings":"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","sourceRoot":"","sourcesContent":["import * as tslib_1 from \"tslib\";\nimport { StereoEffect } from \"./StereoEffect\";\nimport { LFO } from \"../source/oscillator/LFO\";\nimport { Gain } from \"../core/context/Gain\";\nimport { Signal } from \"../signal/Signal\";\nimport { optionsFromArguments } from \"../core/util/Defaults\";\nimport { readOnly } from \"../core/util/Interface\";\n/**\n * Tremolo modulates the amplitude of an incoming signal using an [[LFO]].\n * The effect is a stereo effect where the modulation phase is inverted in each channel.\n *\n * @example\n * import { Oscillator, Tremolo } from \"tone\";\n * // create a tremolo and start it's LFO\n * const tremolo = new Tremolo(9, 0.75).toDestination().start();\n * // route an oscillator through the tremolo and start it\n * const oscillator = new Oscillator().connect(tremolo).start();\n *\n * @category Effect\n */\nvar Tremolo = /** @class */ (function (_super) {\n    tslib_1.__extends(Tremolo, _super);\n    function Tremolo() {\n        var _this = _super.call(this, optionsFromArguments(Tremolo.getDefaults(), arguments, [\"frequency\", \"depth\"])) || this;\n        _this.name = \"Tremolo\";\n        var options = optionsFromArguments(Tremolo.getDefaults(), arguments, [\"frequency\", \"depth\"]);\n        _this._lfoL = new LFO({\n            context: _this.context,\n            type: options.type,\n            min: 1,\n            max: 0,\n        });\n        _this._lfoR = new LFO({\n            context: _this.context,\n            type: options.type,\n            min: 1,\n            max: 0,\n        });\n        _this._amplitudeL = new Gain({ context: _this.context });\n        _this._amplitudeR = new Gain({ context: _this.context });\n        _this.frequency = new Signal({\n            context: _this.context,\n            value: options.frequency,\n            units: \"frequency\",\n        });\n        _this.depth = new Signal({\n            context: _this.context,\n            value: options.depth,\n            units: \"normalRange\",\n        });\n        readOnly(_this, [\"frequency\", \"depth\"]);\n        _this.connectEffectLeft(_this._amplitudeL);\n        _this.connectEffectRight(_this._amplitudeR);\n        _this._lfoL.connect(_this._amplitudeL.gain);\n        _this._lfoR.connect(_this._amplitudeR.gain);\n        _this.frequency.fan(_this._lfoL.frequency, _this._lfoR.frequency);\n        _this.depth.fan(_this._lfoR.amplitude, _this._lfoL.amplitude);\n        _this.spread = options.spread;\n        return _this;\n    }\n    Tremolo.getDefaults = function () {\n        return Object.assign(StereoEffect.getDefaults(), {\n            frequency: 10,\n            type: \"sine\",\n            depth: 0.5,\n            spread: 180,\n        });\n    };\n    /**\n     * Start the tremolo.\n     */\n    Tremolo.prototype.start = function (time) {\n        this._lfoL.start(time);\n        this._lfoR.start(time);\n        return this;\n    };\n    /**\n     * Stop the tremolo.\n     */\n    Tremolo.prototype.stop = function (time) {\n        this._lfoL.stop(time);\n        this._lfoR.stop(time);\n        return this;\n    };\n    /**\n     * Sync the effect to the transport.\n     */\n    Tremolo.prototype.sync = function () {\n        this._lfoL.sync();\n        this._lfoR.sync();\n        this.context.transport.syncSignal(this.frequency);\n        return this;\n    };\n    /**\n     * Unsync the filter from the transport\n     */\n    Tremolo.prototype.unsync = function () {\n        this._lfoL.unsync();\n        this._lfoR.unsync();\n        this.context.transport.unsyncSignal(this.frequency);\n        return this;\n    };\n    Object.defineProperty(Tremolo.prototype, \"type\", {\n        /**\n         * The oscillator type.\n         */\n        get: function () {\n            return this._lfoL.type;\n        },\n        set: function (type) {\n            this._lfoL.type = type;\n            this._lfoR.type = type;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(Tremolo.prototype, \"spread\", {\n        /**\n         * Amount of stereo spread. When set to 0, both LFO's will be panned centrally.\n         * When set to 180, LFO's will be panned hard left and right respectively.\n         */\n        get: function () {\n            return this._lfoR.phase - this._lfoL.phase; // 180\n        },\n        set: function (spread) {\n            this._lfoL.phase = 90 - (spread / 2);\n            this._lfoR.phase = (spread / 2) + 90;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Tremolo.prototype.dispose = function () {\n        _super.prototype.dispose.call(this);\n        this._lfoL.dispose();\n        this._lfoR.dispose();\n        this._amplitudeL.dispose();\n        this._amplitudeR.dispose();\n        this.frequency.dispose();\n        this.depth.dispose();\n        return this;\n    };\n    return Tremolo;\n}(StereoEffect));\nexport { Tremolo };\n//# sourceMappingURL=Tremolo.js.map"]},"metadata":{},"sourceType":"module"}