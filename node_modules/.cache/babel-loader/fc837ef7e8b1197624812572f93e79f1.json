{"ast":null,"code":"import * as tslib_1 from \"tslib\";\nimport { optionsFromArguments } from \"../../core/util/Defaults\";\nimport { readOnly } from \"../../core/util/Interface\";\nimport { isNumber, isString } from \"../../core/util/TypeCheck\";\nimport { Signal } from \"../../signal/Signal\";\nimport { Source } from \"../Source\";\nimport { AMOscillator } from \"./AMOscillator\";\nimport { FatOscillator } from \"./FatOscillator\";\nimport { FMOscillator } from \"./FMOscillator\";\nimport { Oscillator } from \"./Oscillator\";\nimport { generateWaveform } from \"./OscillatorInterface\";\nimport { PulseOscillator } from \"./PulseOscillator\";\nimport { PWMOscillator } from \"./PWMOscillator\";\nvar OmniOscillatorSourceMap = {\n  am: AMOscillator,\n  fat: FatOscillator,\n  fm: FMOscillator,\n  oscillator: Oscillator,\n  pulse: PulseOscillator,\n  pwm: PWMOscillator\n};\n/**\n * OmniOscillator aggregates Tone.Oscillator, Tone.PulseOscillator,\n * Tone.PWMOscillator, Tone.FMOscillator, Tone.AMOscillator, and Tone.FatOscillator\n * into one class. The oscillator class can be changed by setting the `type`.\n * `omniOsc.type = \"pwm\"` will set it to the Tone.PWMOscillator. Prefixing\n * any of the basic types (\"sine\", \"square4\", etc.) with \"fm\", \"am\", or \"fat\"\n * will use the FMOscillator, AMOscillator or FatOscillator respectively.\n * For example: `omniOsc.type = \"fatsawtooth\"` will create set the oscillator\n * to a FatOscillator of type \"sawtooth\".\n * @example\n * import { OmniOscillator } from \"tone\";\n * const omniOsc = new OmniOscillator(\"C#4\", \"pwm\");\n * @category Source\n */\n\nvar OmniOscillator =\n/** @class */\nfunction (_super) {\n  tslib_1.__extends(OmniOscillator, _super);\n\n  function OmniOscillator() {\n    var _this = _super.call(this, optionsFromArguments(OmniOscillator.getDefaults(), arguments, [\"frequency\", \"type\"])) || this;\n\n    _this.name = \"OmniOscillator\";\n    var options = optionsFromArguments(OmniOscillator.getDefaults(), arguments, [\"frequency\", \"type\"]);\n    _this.frequency = new Signal({\n      context: _this.context,\n      units: \"frequency\",\n      value: options.frequency\n    });\n    _this.detune = new Signal({\n      context: _this.context,\n      units: \"cents\",\n      value: options.detune\n    });\n    readOnly(_this, [\"frequency\", \"detune\"]); // set the options\n\n    _this.set(options);\n\n    return _this;\n  }\n\n  OmniOscillator.getDefaults = function () {\n    return Object.assign(Oscillator.getDefaults(), FMOscillator.getDefaults(), AMOscillator.getDefaults(), FatOscillator.getDefaults(), PulseOscillator.getDefaults(), PWMOscillator.getDefaults());\n  };\n  /**\n   * start the oscillator\n   */\n\n\n  OmniOscillator.prototype._start = function (time) {\n    this._oscillator.start(time);\n  };\n  /**\n   * start the oscillator\n   */\n\n\n  OmniOscillator.prototype._stop = function (time) {\n    this._oscillator.stop(time);\n  };\n\n  OmniOscillator.prototype._restart = function (time) {\n    this._oscillator.restart(time);\n\n    return this;\n  };\n\n  Object.defineProperty(OmniOscillator.prototype, \"type\", {\n    /**\n     * The type of the oscillator. Can be any of the basic types: sine, square, triangle, sawtooth. Or\n     * prefix the basic types with \"fm\", \"am\", or \"fat\" to use the FMOscillator, AMOscillator or FatOscillator\n     * types. The oscillator could also be set to \"pwm\" or \"pulse\". All of the parameters of the\n     * oscillator's class are accessible when the oscillator is set to that type, but throws an error\n     * when it's not.\n     * @example\n     * import { OmniOscillator } from \"tone\";\n     * const omniOsc = new OmniOscillator().toDestination().start();\n     * omniOsc.type = \"pwm\";\n     * // modulationFrequency is parameter which is available\n     * // only when the type is \"pwm\".\n     * omniOsc.modulationFrequency.value = 0.5;\n     * @example\n     * import { OmniOscillator } from \"tone\";\n     * const omniOsc = new OmniOscillator().toDestination().start();\n     * // an square wave frequency modulated by a sawtooth\n     * omniOsc.type = \"fmsquare\";\n     * omniOsc.modulationType = \"sawtooth\";\n     */\n    get: function () {\n      var _this = this;\n\n      var prefix = \"\";\n\n      if ([\"am\", \"fm\", \"fat\"].some(function (p) {\n        return _this._sourceType === p;\n      })) {\n        prefix = this._sourceType;\n      }\n\n      return prefix + this._oscillator.type;\n    },\n    set: function (type) {\n      if (type.substr(0, 2) === \"fm\") {\n        this._createNewOscillator(\"fm\");\n\n        this._oscillator = this._oscillator;\n        this._oscillator.type = type.substr(2);\n      } else if (type.substr(0, 2) === \"am\") {\n        this._createNewOscillator(\"am\");\n\n        this._oscillator = this._oscillator;\n        this._oscillator.type = type.substr(2);\n      } else if (type.substr(0, 3) === \"fat\") {\n        this._createNewOscillator(\"fat\");\n\n        this._oscillator = this._oscillator;\n        this._oscillator.type = type.substr(3);\n      } else if (type === \"pwm\") {\n        this._createNewOscillator(\"pwm\");\n\n        this._oscillator = this._oscillator;\n      } else if (type === \"pulse\") {\n        this._createNewOscillator(\"pulse\");\n      } else {\n        this._createNewOscillator(\"oscillator\");\n\n        this._oscillator = this._oscillator;\n        this._oscillator.type = type;\n      }\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(OmniOscillator.prototype, \"partials\", {\n    /**\n     * The value is an empty array when the type is not \"custom\".\n     * This is not available on \"pwm\" and \"pulse\" oscillator types.\n     * See [[Oscillator.partials]]\n     */\n    get: function () {\n      return this._oscillator.partials;\n    },\n    set: function (partials) {\n      if (!this._getOscType(this._oscillator, \"pulse\") && !this._getOscType(this._oscillator, \"pwm\")) {\n        this._oscillator.partials = partials;\n      }\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(OmniOscillator.prototype, \"partialCount\", {\n    get: function () {\n      return this._oscillator.partialCount;\n    },\n    set: function (partialCount) {\n      if (!this._getOscType(this._oscillator, \"pulse\") && !this._getOscType(this._oscillator, \"pwm\")) {\n        this._oscillator.partialCount = partialCount;\n      }\n    },\n    enumerable: true,\n    configurable: true\n  });\n\n  OmniOscillator.prototype.set = function (props) {\n    // make sure the type is set first\n    if (Reflect.has(props, \"type\") && props.type) {\n      this.type = props.type;\n    } // then set the rest\n\n\n    _super.prototype.set.call(this, props);\n\n    return this;\n  };\n  /**\n   * connect the oscillator to the frequency and detune signals\n   */\n\n\n  OmniOscillator.prototype._createNewOscillator = function (oscType) {\n    var _this = this;\n\n    if (oscType !== this._sourceType) {\n      this._sourceType = oscType;\n      var OscConstructor = OmniOscillatorSourceMap[oscType]; // short delay to avoid clicks on the change\n\n      var now = this.now();\n\n      if (this._oscillator) {\n        var oldOsc_1 = this._oscillator;\n        oldOsc_1.stop(now); // dispose the old one\n\n        this.context.setTimeout(function () {\n          return oldOsc_1.dispose();\n        }, this.blockTime);\n      }\n\n      this._oscillator = new OscConstructor({\n        context: this.context\n      });\n      this.frequency.connect(this._oscillator.frequency);\n      this.detune.connect(this._oscillator.detune);\n\n      this._oscillator.connect(this.output);\n\n      this._oscillator.onstop = function () {\n        return _this.onstop(_this);\n      };\n\n      if (this.state === \"started\") {\n        this._oscillator.start(now);\n      }\n    }\n  };\n\n  Object.defineProperty(OmniOscillator.prototype, \"phase\", {\n    get: function () {\n      return this._oscillator.phase;\n    },\n    set: function (phase) {\n      this._oscillator.phase = phase;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(OmniOscillator.prototype, \"sourceType\", {\n    /**\n     * The source type of the oscillator.\n     * @example\n     * import { OmniOscillator } from \"tone\";\n     * const omniOsc = new OmniOscillator(440, \"fmsquare\");\n     * console.log(omniOsc.sourceType); // 'fm'\n     */\n    get: function () {\n      return this._sourceType;\n    },\n    set: function (sType) {\n      // the basetype defaults to sine\n      var baseType = \"sine\";\n\n      if (this._oscillator.type !== \"pwm\" && this._oscillator.type !== \"pulse\") {\n        baseType = this._oscillator.type;\n      } // set the type\n\n\n      if (sType === \"fm\") {\n        this.type = \"fm\" + baseType;\n      } else if (sType === \"am\") {\n        this.type = \"am\" + baseType;\n      } else if (sType === \"fat\") {\n        this.type = \"fat\" + baseType;\n      } else if (sType === \"oscillator\") {\n        this.type = baseType;\n      } else if (sType === \"pulse\") {\n        this.type = \"pulse\";\n      } else if (sType === \"pwm\") {\n        this.type = \"pwm\";\n      }\n    },\n    enumerable: true,\n    configurable: true\n  });\n\n  OmniOscillator.prototype._getOscType = function (osc, sourceType) {\n    return osc instanceof OmniOscillatorSourceMap[sourceType];\n  };\n\n  Object.defineProperty(OmniOscillator.prototype, \"baseType\", {\n    /**\n     * The base type of the oscillator. See [[Oscillator.baseType]]\n     * @example\n     * import { OmniOscillator } from \"tone\";\n     * const omniOsc = new OmniOscillator(440, \"fmsquare4\");\n     * omniOsc.sourceType; // 'fm'\n     * omniOsc.baseType; // 'square'\n     * omniOsc.partialCount; // 4\n     */\n    get: function () {\n      return this._oscillator.baseType;\n    },\n    set: function (baseType) {\n      if (!this._getOscType(this._oscillator, \"pulse\") && !this._getOscType(this._oscillator, \"pwm\") && baseType !== \"pulse\" && baseType !== \"pwm\") {\n        this._oscillator.baseType = baseType;\n      }\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(OmniOscillator.prototype, \"width\", {\n    /**\n     * The width of the oscillator when sourceType === \"pulse\".\n     * See [[PWMOscillator.width]]\n     * @example\n     * import { OmniOscillator } from \"tone\";\n     * const omniOsc = new OmniOscillator(440, \"pulse\");\n     * // can access the width attribute only if type === \"pulse\"\n     * omniOsc.width.value = 0.2;\n     */\n    get: function () {\n      if (this._getOscType(this._oscillator, \"pulse\")) {\n        return this._oscillator.width;\n      } else {\n        return undefined;\n      }\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(OmniOscillator.prototype, \"count\", {\n    /**\n     * The number of detuned oscillators when sourceType === \"fat\".\n     * See [[FatOscillator.count]]\n     */\n    get: function () {\n      if (this._getOscType(this._oscillator, \"fat\")) {\n        return this._oscillator.count;\n      } else {\n        return undefined;\n      }\n    },\n    set: function (count) {\n      if (this._getOscType(this._oscillator, \"fat\") && isNumber(count)) {\n        this._oscillator.count = count;\n      }\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(OmniOscillator.prototype, \"spread\", {\n    /**\n     * The detune spread between the oscillators when sourceType === \"fat\".\n     * See [[FatOscillator.count]]\n     */\n    get: function () {\n      if (this._getOscType(this._oscillator, \"fat\")) {\n        return this._oscillator.spread;\n      } else {\n        return undefined;\n      }\n    },\n    set: function (spread) {\n      if (this._getOscType(this._oscillator, \"fat\") && isNumber(spread)) {\n        this._oscillator.spread = spread;\n      }\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(OmniOscillator.prototype, \"modulationType\", {\n    /**\n     * The type of the modulator oscillator. Only if the oscillator is set to \"am\" or \"fm\" types.\n     * See [[AMOscillator]] or [[FMOscillator]]\n     */\n    get: function () {\n      if (this._getOscType(this._oscillator, \"fm\") || this._getOscType(this._oscillator, \"am\")) {\n        return this._oscillator.modulationType;\n      } else {\n        return undefined;\n      }\n    },\n    set: function (mType) {\n      if ((this._getOscType(this._oscillator, \"fm\") || this._getOscType(this._oscillator, \"am\")) && isString(mType)) {\n        this._oscillator.modulationType = mType;\n      }\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(OmniOscillator.prototype, \"modulationIndex\", {\n    /**\n     * The modulation index when the sourceType === \"fm\"\n     * See [[FMOscillator]].\n     */\n    get: function () {\n      if (this._getOscType(this._oscillator, \"fm\")) {\n        return this._oscillator.modulationIndex;\n      } else {\n        return undefined;\n      }\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(OmniOscillator.prototype, \"harmonicity\", {\n    /**\n     * Harmonicity is the frequency ratio between the carrier and the modulator oscillators.\n     * See [[AMOscillator]] or [[FMOscillator]]\n     */\n    get: function () {\n      if (this._getOscType(this._oscillator, \"fm\") || this._getOscType(this._oscillator, \"am\")) {\n        return this._oscillator.harmonicity;\n      } else {\n        return undefined;\n      }\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(OmniOscillator.prototype, \"modulationFrequency\", {\n    /**\n     * The modulationFrequency Signal of the oscillator when sourceType === \"pwm\"\n     * see [[PWMOscillator]]\n     * @min 0.1\n     * @max 5\n     */\n    get: function () {\n      if (this._getOscType(this._oscillator, \"pwm\")) {\n        return this._oscillator.modulationFrequency;\n      } else {\n        return undefined;\n      }\n    },\n    enumerable: true,\n    configurable: true\n  });\n\n  OmniOscillator.prototype.asArray = function (length) {\n    if (length === void 0) {\n      length = 1024;\n    }\n\n    return tslib_1.__awaiter(this, void 0, void 0, function () {\n      return tslib_1.__generator(this, function (_a) {\n        return [2\n        /*return*/\n        , generateWaveform(this, length)];\n      });\n    });\n  };\n\n  OmniOscillator.prototype.dispose = function () {\n    _super.prototype.dispose.call(this);\n\n    this.detune.dispose();\n    this.frequency.dispose();\n\n    this._oscillator.dispose();\n\n    return this;\n  };\n\n  return OmniOscillator;\n}(Source);\n\nexport { OmniOscillator };","map":{"version":3,"sources":["../../../../Tone/source/oscillator/OmniOscillator.ts"],"names":[],"mappings":"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","sourceRoot":"","sourcesContent":["import * as tslib_1 from \"tslib\";\nimport { optionsFromArguments } from \"../../core/util/Defaults\";\nimport { readOnly } from \"../../core/util/Interface\";\nimport { isNumber, isString } from \"../../core/util/TypeCheck\";\nimport { Signal } from \"../../signal/Signal\";\nimport { Source } from \"../Source\";\nimport { AMOscillator } from \"./AMOscillator\";\nimport { FatOscillator } from \"./FatOscillator\";\nimport { FMOscillator } from \"./FMOscillator\";\nimport { Oscillator } from \"./Oscillator\";\nimport { generateWaveform } from \"./OscillatorInterface\";\nimport { PulseOscillator } from \"./PulseOscillator\";\nimport { PWMOscillator } from \"./PWMOscillator\";\nvar OmniOscillatorSourceMap = {\n    am: AMOscillator,\n    fat: FatOscillator,\n    fm: FMOscillator,\n    oscillator: Oscillator,\n    pulse: PulseOscillator,\n    pwm: PWMOscillator,\n};\n/**\n * OmniOscillator aggregates Tone.Oscillator, Tone.PulseOscillator,\n * Tone.PWMOscillator, Tone.FMOscillator, Tone.AMOscillator, and Tone.FatOscillator\n * into one class. The oscillator class can be changed by setting the `type`.\n * `omniOsc.type = \"pwm\"` will set it to the Tone.PWMOscillator. Prefixing\n * any of the basic types (\"sine\", \"square4\", etc.) with \"fm\", \"am\", or \"fat\"\n * will use the FMOscillator, AMOscillator or FatOscillator respectively.\n * For example: `omniOsc.type = \"fatsawtooth\"` will create set the oscillator\n * to a FatOscillator of type \"sawtooth\".\n * @example\n * import { OmniOscillator } from \"tone\";\n * const omniOsc = new OmniOscillator(\"C#4\", \"pwm\");\n * @category Source\n */\nvar OmniOscillator = /** @class */ (function (_super) {\n    tslib_1.__extends(OmniOscillator, _super);\n    function OmniOscillator() {\n        var _this = _super.call(this, optionsFromArguments(OmniOscillator.getDefaults(), arguments, [\"frequency\", \"type\"])) || this;\n        _this.name = \"OmniOscillator\";\n        var options = optionsFromArguments(OmniOscillator.getDefaults(), arguments, [\"frequency\", \"type\"]);\n        _this.frequency = new Signal({\n            context: _this.context,\n            units: \"frequency\",\n            value: options.frequency,\n        });\n        _this.detune = new Signal({\n            context: _this.context,\n            units: \"cents\",\n            value: options.detune,\n        });\n        readOnly(_this, [\"frequency\", \"detune\"]);\n        // set the options\n        _this.set(options);\n        return _this;\n    }\n    OmniOscillator.getDefaults = function () {\n        return Object.assign(Oscillator.getDefaults(), FMOscillator.getDefaults(), AMOscillator.getDefaults(), FatOscillator.getDefaults(), PulseOscillator.getDefaults(), PWMOscillator.getDefaults());\n    };\n    /**\n     * start the oscillator\n     */\n    OmniOscillator.prototype._start = function (time) {\n        this._oscillator.start(time);\n    };\n    /**\n     * start the oscillator\n     */\n    OmniOscillator.prototype._stop = function (time) {\n        this._oscillator.stop(time);\n    };\n    OmniOscillator.prototype._restart = function (time) {\n        this._oscillator.restart(time);\n        return this;\n    };\n    Object.defineProperty(OmniOscillator.prototype, \"type\", {\n        /**\n         * The type of the oscillator. Can be any of the basic types: sine, square, triangle, sawtooth. Or\n         * prefix the basic types with \"fm\", \"am\", or \"fat\" to use the FMOscillator, AMOscillator or FatOscillator\n         * types. The oscillator could also be set to \"pwm\" or \"pulse\". All of the parameters of the\n         * oscillator's class are accessible when the oscillator is set to that type, but throws an error\n         * when it's not.\n         * @example\n         * import { OmniOscillator } from \"tone\";\n         * const omniOsc = new OmniOscillator().toDestination().start();\n         * omniOsc.type = \"pwm\";\n         * // modulationFrequency is parameter which is available\n         * // only when the type is \"pwm\".\n         * omniOsc.modulationFrequency.value = 0.5;\n         * @example\n         * import { OmniOscillator } from \"tone\";\n         * const omniOsc = new OmniOscillator().toDestination().start();\n         * // an square wave frequency modulated by a sawtooth\n         * omniOsc.type = \"fmsquare\";\n         * omniOsc.modulationType = \"sawtooth\";\n         */\n        get: function () {\n            var _this = this;\n            var prefix = \"\";\n            if ([\"am\", \"fm\", \"fat\"].some(function (p) { return _this._sourceType === p; })) {\n                prefix = this._sourceType;\n            }\n            return prefix + this._oscillator.type;\n        },\n        set: function (type) {\n            if (type.substr(0, 2) === \"fm\") {\n                this._createNewOscillator(\"fm\");\n                this._oscillator = this._oscillator;\n                this._oscillator.type = type.substr(2);\n            }\n            else if (type.substr(0, 2) === \"am\") {\n                this._createNewOscillator(\"am\");\n                this._oscillator = this._oscillator;\n                this._oscillator.type = type.substr(2);\n            }\n            else if (type.substr(0, 3) === \"fat\") {\n                this._createNewOscillator(\"fat\");\n                this._oscillator = this._oscillator;\n                this._oscillator.type = type.substr(3);\n            }\n            else if (type === \"pwm\") {\n                this._createNewOscillator(\"pwm\");\n                this._oscillator = this._oscillator;\n            }\n            else if (type === \"pulse\") {\n                this._createNewOscillator(\"pulse\");\n            }\n            else {\n                this._createNewOscillator(\"oscillator\");\n                this._oscillator = this._oscillator;\n                this._oscillator.type = type;\n            }\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(OmniOscillator.prototype, \"partials\", {\n        /**\n         * The value is an empty array when the type is not \"custom\".\n         * This is not available on \"pwm\" and \"pulse\" oscillator types.\n         * See [[Oscillator.partials]]\n         */\n        get: function () {\n            return this._oscillator.partials;\n        },\n        set: function (partials) {\n            if (!this._getOscType(this._oscillator, \"pulse\") && !this._getOscType(this._oscillator, \"pwm\")) {\n                this._oscillator.partials = partials;\n            }\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(OmniOscillator.prototype, \"partialCount\", {\n        get: function () {\n            return this._oscillator.partialCount;\n        },\n        set: function (partialCount) {\n            if (!this._getOscType(this._oscillator, \"pulse\") && !this._getOscType(this._oscillator, \"pwm\")) {\n                this._oscillator.partialCount = partialCount;\n            }\n        },\n        enumerable: true,\n        configurable: true\n    });\n    OmniOscillator.prototype.set = function (props) {\n        // make sure the type is set first\n        if (Reflect.has(props, \"type\") && props.type) {\n            this.type = props.type;\n        }\n        // then set the rest\n        _super.prototype.set.call(this, props);\n        return this;\n    };\n    /**\n     * connect the oscillator to the frequency and detune signals\n     */\n    OmniOscillator.prototype._createNewOscillator = function (oscType) {\n        var _this = this;\n        if (oscType !== this._sourceType) {\n            this._sourceType = oscType;\n            var OscConstructor = OmniOscillatorSourceMap[oscType];\n            // short delay to avoid clicks on the change\n            var now = this.now();\n            if (this._oscillator) {\n                var oldOsc_1 = this._oscillator;\n                oldOsc_1.stop(now);\n                // dispose the old one\n                this.context.setTimeout(function () { return oldOsc_1.dispose(); }, this.blockTime);\n            }\n            this._oscillator = new OscConstructor({\n                context: this.context,\n            });\n            this.frequency.connect(this._oscillator.frequency);\n            this.detune.connect(this._oscillator.detune);\n            this._oscillator.connect(this.output);\n            this._oscillator.onstop = function () { return _this.onstop(_this); };\n            if (this.state === \"started\") {\n                this._oscillator.start(now);\n            }\n        }\n    };\n    Object.defineProperty(OmniOscillator.prototype, \"phase\", {\n        get: function () {\n            return this._oscillator.phase;\n        },\n        set: function (phase) {\n            this._oscillator.phase = phase;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(OmniOscillator.prototype, \"sourceType\", {\n        /**\n         * The source type of the oscillator.\n         * @example\n         * import { OmniOscillator } from \"tone\";\n         * const omniOsc = new OmniOscillator(440, \"fmsquare\");\n         * console.log(omniOsc.sourceType); // 'fm'\n         */\n        get: function () {\n            return this._sourceType;\n        },\n        set: function (sType) {\n            // the basetype defaults to sine\n            var baseType = \"sine\";\n            if (this._oscillator.type !== \"pwm\" && this._oscillator.type !== \"pulse\") {\n                baseType = this._oscillator.type;\n            }\n            // set the type\n            if (sType === \"fm\") {\n                this.type = \"fm\" + baseType;\n            }\n            else if (sType === \"am\") {\n                this.type = \"am\" + baseType;\n            }\n            else if (sType === \"fat\") {\n                this.type = \"fat\" + baseType;\n            }\n            else if (sType === \"oscillator\") {\n                this.type = baseType;\n            }\n            else if (sType === \"pulse\") {\n                this.type = \"pulse\";\n            }\n            else if (sType === \"pwm\") {\n                this.type = \"pwm\";\n            }\n        },\n        enumerable: true,\n        configurable: true\n    });\n    OmniOscillator.prototype._getOscType = function (osc, sourceType) {\n        return osc instanceof OmniOscillatorSourceMap[sourceType];\n    };\n    Object.defineProperty(OmniOscillator.prototype, \"baseType\", {\n        /**\n         * The base type of the oscillator. See [[Oscillator.baseType]]\n         * @example\n         * import { OmniOscillator } from \"tone\";\n         * const omniOsc = new OmniOscillator(440, \"fmsquare4\");\n         * omniOsc.sourceType; // 'fm'\n         * omniOsc.baseType; // 'square'\n         * omniOsc.partialCount; // 4\n         */\n        get: function () {\n            return this._oscillator.baseType;\n        },\n        set: function (baseType) {\n            if (!this._getOscType(this._oscillator, \"pulse\") &&\n                !this._getOscType(this._oscillator, \"pwm\") &&\n                baseType !== \"pulse\" && baseType !== \"pwm\") {\n                this._oscillator.baseType = baseType;\n            }\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(OmniOscillator.prototype, \"width\", {\n        /**\n         * The width of the oscillator when sourceType === \"pulse\".\n         * See [[PWMOscillator.width]]\n         * @example\n         * import { OmniOscillator } from \"tone\";\n         * const omniOsc = new OmniOscillator(440, \"pulse\");\n         * // can access the width attribute only if type === \"pulse\"\n         * omniOsc.width.value = 0.2;\n         */\n        get: function () {\n            if (this._getOscType(this._oscillator, \"pulse\")) {\n                return this._oscillator.width;\n            }\n            else {\n                return undefined;\n            }\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(OmniOscillator.prototype, \"count\", {\n        /**\n         * The number of detuned oscillators when sourceType === \"fat\".\n         * See [[FatOscillator.count]]\n         */\n        get: function () {\n            if (this._getOscType(this._oscillator, \"fat\")) {\n                return this._oscillator.count;\n            }\n            else {\n                return undefined;\n            }\n        },\n        set: function (count) {\n            if (this._getOscType(this._oscillator, \"fat\") && isNumber(count)) {\n                this._oscillator.count = count;\n            }\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(OmniOscillator.prototype, \"spread\", {\n        /**\n         * The detune spread between the oscillators when sourceType === \"fat\".\n         * See [[FatOscillator.count]]\n         */\n        get: function () {\n            if (this._getOscType(this._oscillator, \"fat\")) {\n                return this._oscillator.spread;\n            }\n            else {\n                return undefined;\n            }\n        },\n        set: function (spread) {\n            if (this._getOscType(this._oscillator, \"fat\") && isNumber(spread)) {\n                this._oscillator.spread = spread;\n            }\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(OmniOscillator.prototype, \"modulationType\", {\n        /**\n         * The type of the modulator oscillator. Only if the oscillator is set to \"am\" or \"fm\" types.\n         * See [[AMOscillator]] or [[FMOscillator]]\n         */\n        get: function () {\n            if (this._getOscType(this._oscillator, \"fm\") || this._getOscType(this._oscillator, \"am\")) {\n                return this._oscillator.modulationType;\n            }\n            else {\n                return undefined;\n            }\n        },\n        set: function (mType) {\n            if ((this._getOscType(this._oscillator, \"fm\") || this._getOscType(this._oscillator, \"am\")) && isString(mType)) {\n                this._oscillator.modulationType = mType;\n            }\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(OmniOscillator.prototype, \"modulationIndex\", {\n        /**\n         * The modulation index when the sourceType === \"fm\"\n         * See [[FMOscillator]].\n         */\n        get: function () {\n            if (this._getOscType(this._oscillator, \"fm\")) {\n                return this._oscillator.modulationIndex;\n            }\n            else {\n                return undefined;\n            }\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(OmniOscillator.prototype, \"harmonicity\", {\n        /**\n         * Harmonicity is the frequency ratio between the carrier and the modulator oscillators.\n         * See [[AMOscillator]] or [[FMOscillator]]\n         */\n        get: function () {\n            if (this._getOscType(this._oscillator, \"fm\") || this._getOscType(this._oscillator, \"am\")) {\n                return this._oscillator.harmonicity;\n            }\n            else {\n                return undefined;\n            }\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(OmniOscillator.prototype, \"modulationFrequency\", {\n        /**\n         * The modulationFrequency Signal of the oscillator when sourceType === \"pwm\"\n         * see [[PWMOscillator]]\n         * @min 0.1\n         * @max 5\n         */\n        get: function () {\n            if (this._getOscType(this._oscillator, \"pwm\")) {\n                return this._oscillator.modulationFrequency;\n            }\n            else {\n                return undefined;\n            }\n        },\n        enumerable: true,\n        configurable: true\n    });\n    OmniOscillator.prototype.asArray = function (length) {\n        if (length === void 0) { length = 1024; }\n        return tslib_1.__awaiter(this, void 0, void 0, function () {\n            return tslib_1.__generator(this, function (_a) {\n                return [2 /*return*/, generateWaveform(this, length)];\n            });\n        });\n    };\n    OmniOscillator.prototype.dispose = function () {\n        _super.prototype.dispose.call(this);\n        this.detune.dispose();\n        this.frequency.dispose();\n        this._oscillator.dispose();\n        return this;\n    };\n    return OmniOscillator;\n}(Source));\nexport { OmniOscillator };\n//# sourceMappingURL=OmniOscillator.js.map"]},"metadata":{},"sourceType":"module"}