{"ast":null,"code":"import * as tslib_1 from \"tslib\";\nimport { FeedbackEffect } from \"./FeedbackEffect\";\nimport { optionsFromArguments } from \"../core/util/Defaults\";\nimport { LFO } from \"../source/oscillator/LFO\";\nimport { Delay } from \"../core/context/Delay\";\nimport { CrossFade } from \"../component/channel/CrossFade\";\nimport { Signal } from \"../signal/Signal\";\nimport { readOnly } from \"../core/util/Interface\";\nimport { intervalToFrequencyRatio } from \"../core/type/Conversions\";\n/**\n * PitchShift does near-realtime pitch shifting to the incoming signal.\n * The effect is achieved by speeding up or slowing down the delayTime\n * of a DelayNode using a sawtooth wave.\n * Algorithm found in [this pdf](http://dsp-book.narod.ru/soundproc.pdf).\n * Additional reference by [Miller Pucket](http://msp.ucsd.edu/techniques/v0.11/book-html/node115.html).\n * @category Effect\n */\n\nvar PitchShift =\n/** @class */\nfunction (_super) {\n  tslib_1.__extends(PitchShift, _super);\n\n  function PitchShift() {\n    var _this = _super.call(this, optionsFromArguments(PitchShift.getDefaults(), arguments, [\"pitch\"])) || this;\n\n    _this.name = \"PitchShift\";\n    var options = optionsFromArguments(PitchShift.getDefaults(), arguments, [\"pitch\"]);\n    _this._frequency = new Signal({\n      context: _this.context\n    });\n    _this._delayA = new Delay({\n      maxDelay: 1,\n      context: _this.context\n    });\n    _this._lfoA = new LFO({\n      context: _this.context,\n      min: 0,\n      max: 0.1,\n      type: \"sawtooth\"\n    }).connect(_this._delayA.delayTime);\n    _this._delayB = new Delay({\n      maxDelay: 1,\n      context: _this.context\n    });\n    _this._lfoB = new LFO({\n      context: _this.context,\n      min: 0,\n      max: 0.1,\n      type: \"sawtooth\",\n      phase: 180\n    }).connect(_this._delayB.delayTime);\n    _this._crossFade = new CrossFade({\n      context: _this.context\n    });\n    _this._crossFadeLFO = new LFO({\n      context: _this.context,\n      min: 0,\n      max: 1,\n      type: \"triangle\",\n      phase: 90\n    }).connect(_this._crossFade.fade);\n    _this._feedbackDelay = new Delay({\n      delayTime: options.delayTime,\n      context: _this.context\n    });\n    _this.delayTime = _this._feedbackDelay.delayTime;\n    readOnly(_this, \"delayTime\");\n    _this._pitch = options.pitch;\n    _this._windowSize = options.windowSize; // connect the two delay lines up\n\n    _this._delayA.connect(_this._crossFade.a);\n\n    _this._delayB.connect(_this._crossFade.b); // connect the frequency\n\n\n    _this._frequency.fan(_this._lfoA.frequency, _this._lfoB.frequency, _this._crossFadeLFO.frequency); // route the input\n\n\n    _this.effectSend.fan(_this._delayA, _this._delayB);\n\n    _this._crossFade.chain(_this._feedbackDelay, _this.effectReturn); // start the LFOs at the same time\n\n\n    var now = _this.now();\n\n    _this._lfoA.start(now);\n\n    _this._lfoB.start(now);\n\n    _this._crossFadeLFO.start(now); // set the initial value\n\n\n    _this.windowSize = _this._windowSize;\n    return _this;\n  }\n\n  PitchShift.getDefaults = function () {\n    return Object.assign(FeedbackEffect.getDefaults(), {\n      pitch: 0,\n      windowSize: 0.1,\n      delayTime: 0,\n      feedback: 0\n    });\n  };\n\n  Object.defineProperty(PitchShift.prototype, \"pitch\", {\n    /**\n     * Repitch the incoming signal by some interval (measured in semi-tones).\n     * @example\n     * import { Oscillator, PitchShift } from \"tone\";\n     * const pitchShift = new PitchShift().toDestination();\n     * const osc = new Oscillator().connect(pitchShift).start().toDestination();\n     * pitchShift.pitch = -12; // down one octave\n     * pitchShift.pitch = 7; // up a fifth\n     */\n    get: function () {\n      return this._pitch;\n    },\n    set: function (interval) {\n      this._pitch = interval;\n      var factor = 0;\n\n      if (interval < 0) {\n        this._lfoA.min = 0;\n        this._lfoA.max = this._windowSize;\n        this._lfoB.min = 0;\n        this._lfoB.max = this._windowSize;\n        factor = intervalToFrequencyRatio(interval - 1) + 1;\n      } else {\n        this._lfoA.min = this._windowSize;\n        this._lfoA.max = 0;\n        this._lfoB.min = this._windowSize;\n        this._lfoB.max = 0;\n        factor = intervalToFrequencyRatio(interval) - 1;\n      }\n\n      this._frequency.value = factor * (1.2 / this._windowSize);\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(PitchShift.prototype, \"windowSize\", {\n    /**\n     * The window size corresponds roughly to the sample length in a looping sampler.\n     * Smaller values are desirable for a less noticeable delay time of the pitch shifted\n     * signal, but larger values will result in smoother pitch shifting for larger intervals.\n     * A nominal range of 0.03 to 0.1 is recommended.\n     */\n    get: function () {\n      return this._windowSize;\n    },\n    set: function (size) {\n      this._windowSize = this.toSeconds(size);\n      this.pitch = this._pitch;\n    },\n    enumerable: true,\n    configurable: true\n  });\n\n  PitchShift.prototype.dispose = function () {\n    _super.prototype.dispose.call(this);\n\n    this._frequency.dispose();\n\n    this._delayA.dispose();\n\n    this._delayB.dispose();\n\n    this._lfoA.dispose();\n\n    this._lfoB.dispose();\n\n    this._crossFade.dispose();\n\n    this._crossFadeLFO.dispose();\n\n    this._feedbackDelay.dispose();\n\n    return this;\n  };\n\n  return PitchShift;\n}(FeedbackEffect);\n\nexport { PitchShift };","map":{"version":3,"sources":["../../../Tone/effect/PitchShift.ts"],"names":[],"mappings":"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","sourceRoot":"","sourcesContent":["import * as tslib_1 from \"tslib\";\nimport { FeedbackEffect } from \"./FeedbackEffect\";\nimport { optionsFromArguments } from \"../core/util/Defaults\";\nimport { LFO } from \"../source/oscillator/LFO\";\nimport { Delay } from \"../core/context/Delay\";\nimport { CrossFade } from \"../component/channel/CrossFade\";\nimport { Signal } from \"../signal/Signal\";\nimport { readOnly } from \"../core/util/Interface\";\nimport { intervalToFrequencyRatio } from \"../core/type/Conversions\";\n/**\n * PitchShift does near-realtime pitch shifting to the incoming signal.\n * The effect is achieved by speeding up or slowing down the delayTime\n * of a DelayNode using a sawtooth wave.\n * Algorithm found in [this pdf](http://dsp-book.narod.ru/soundproc.pdf).\n * Additional reference by [Miller Pucket](http://msp.ucsd.edu/techniques/v0.11/book-html/node115.html).\n * @category Effect\n */\nvar PitchShift = /** @class */ (function (_super) {\n    tslib_1.__extends(PitchShift, _super);\n    function PitchShift() {\n        var _this = _super.call(this, optionsFromArguments(PitchShift.getDefaults(), arguments, [\"pitch\"])) || this;\n        _this.name = \"PitchShift\";\n        var options = optionsFromArguments(PitchShift.getDefaults(), arguments, [\"pitch\"]);\n        _this._frequency = new Signal({ context: _this.context });\n        _this._delayA = new Delay({\n            maxDelay: 1,\n            context: _this.context\n        });\n        _this._lfoA = new LFO({\n            context: _this.context,\n            min: 0,\n            max: 0.1,\n            type: \"sawtooth\"\n        }).connect(_this._delayA.delayTime);\n        _this._delayB = new Delay({\n            maxDelay: 1,\n            context: _this.context\n        });\n        _this._lfoB = new LFO({\n            context: _this.context,\n            min: 0,\n            max: 0.1,\n            type: \"sawtooth\",\n            phase: 180\n        }).connect(_this._delayB.delayTime);\n        _this._crossFade = new CrossFade({ context: _this.context });\n        _this._crossFadeLFO = new LFO({\n            context: _this.context,\n            min: 0,\n            max: 1,\n            type: \"triangle\",\n            phase: 90\n        }).connect(_this._crossFade.fade);\n        _this._feedbackDelay = new Delay({\n            delayTime: options.delayTime,\n            context: _this.context,\n        });\n        _this.delayTime = _this._feedbackDelay.delayTime;\n        readOnly(_this, \"delayTime\");\n        _this._pitch = options.pitch;\n        _this._windowSize = options.windowSize;\n        // connect the two delay lines up\n        _this._delayA.connect(_this._crossFade.a);\n        _this._delayB.connect(_this._crossFade.b);\n        // connect the frequency\n        _this._frequency.fan(_this._lfoA.frequency, _this._lfoB.frequency, _this._crossFadeLFO.frequency);\n        // route the input\n        _this.effectSend.fan(_this._delayA, _this._delayB);\n        _this._crossFade.chain(_this._feedbackDelay, _this.effectReturn);\n        // start the LFOs at the same time\n        var now = _this.now();\n        _this._lfoA.start(now);\n        _this._lfoB.start(now);\n        _this._crossFadeLFO.start(now);\n        // set the initial value\n        _this.windowSize = _this._windowSize;\n        return _this;\n    }\n    PitchShift.getDefaults = function () {\n        return Object.assign(FeedbackEffect.getDefaults(), {\n            pitch: 0,\n            windowSize: 0.1,\n            delayTime: 0,\n            feedback: 0\n        });\n    };\n    Object.defineProperty(PitchShift.prototype, \"pitch\", {\n        /**\n         * Repitch the incoming signal by some interval (measured in semi-tones).\n         * @example\n         * import { Oscillator, PitchShift } from \"tone\";\n         * const pitchShift = new PitchShift().toDestination();\n         * const osc = new Oscillator().connect(pitchShift).start().toDestination();\n         * pitchShift.pitch = -12; // down one octave\n         * pitchShift.pitch = 7; // up a fifth\n         */\n        get: function () {\n            return this._pitch;\n        },\n        set: function (interval) {\n            this._pitch = interval;\n            var factor = 0;\n            if (interval < 0) {\n                this._lfoA.min = 0;\n                this._lfoA.max = this._windowSize;\n                this._lfoB.min = 0;\n                this._lfoB.max = this._windowSize;\n                factor = intervalToFrequencyRatio(interval - 1) + 1;\n            }\n            else {\n                this._lfoA.min = this._windowSize;\n                this._lfoA.max = 0;\n                this._lfoB.min = this._windowSize;\n                this._lfoB.max = 0;\n                factor = intervalToFrequencyRatio(interval) - 1;\n            }\n            this._frequency.value = factor * (1.2 / this._windowSize);\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(PitchShift.prototype, \"windowSize\", {\n        /**\n         * The window size corresponds roughly to the sample length in a looping sampler.\n         * Smaller values are desirable for a less noticeable delay time of the pitch shifted\n         * signal, but larger values will result in smoother pitch shifting for larger intervals.\n         * A nominal range of 0.03 to 0.1 is recommended.\n         */\n        get: function () {\n            return this._windowSize;\n        },\n        set: function (size) {\n            this._windowSize = this.toSeconds(size);\n            this.pitch = this._pitch;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    PitchShift.prototype.dispose = function () {\n        _super.prototype.dispose.call(this);\n        this._frequency.dispose();\n        this._delayA.dispose();\n        this._delayB.dispose();\n        this._lfoA.dispose();\n        this._lfoB.dispose();\n        this._crossFade.dispose();\n        this._crossFadeLFO.dispose();\n        this._feedbackDelay.dispose();\n        return this;\n    };\n    return PitchShift;\n}(FeedbackEffect));\nexport { PitchShift };\n//# sourceMappingURL=PitchShift.js.map"]},"metadata":{},"sourceType":"module"}