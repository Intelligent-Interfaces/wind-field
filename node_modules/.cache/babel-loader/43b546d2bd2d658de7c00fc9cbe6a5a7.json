{"ast":null,"code":"import * as tslib_1 from \"tslib\";\nimport { ToneAudioNode } from \"../../core/context/ToneAudioNode\";\nimport { Merge } from \"./Merge\";\nimport { Add } from \"../../signal/Add\";\nimport { Multiply } from \"../../signal/Multiply\";\nimport { Subtract } from \"../../signal/Subtract\";\nimport { Gain } from \"../../core/context/Gain\";\nimport { optionsFromArguments } from \"../../core/util/Defaults\";\n/**\n * MidSideMerge merges the mid and side signal after they've been separated by [[MidSideMerge]]\n * ```\n * Mid = (Left+Right)/sqrt(2);   // obtain mid-signal from left and right\n * Side = (Left-Right)/sqrt(2);   // obtain side-signal from left and righ\n * ```\n */\n\nvar MidSideMerge =\n/** @class */\nfunction (_super) {\n  tslib_1.__extends(MidSideMerge, _super);\n\n  function MidSideMerge() {\n    var _this = _super.call(this, optionsFromArguments(MidSideMerge.getDefaults(), arguments)) || this;\n\n    _this.name = \"MidSideMerge\";\n    _this.mid = new Gain({\n      context: _this.context\n    });\n    _this.side = new Gain({\n      context: _this.context\n    });\n    _this._left = new Add({\n      context: _this.context\n    });\n    _this._leftMult = new Multiply({\n      context: _this.context,\n      value: Math.SQRT1_2\n    });\n    _this._right = new Subtract({\n      context: _this.context\n    });\n    _this._rightMult = new Multiply({\n      context: _this.context,\n      value: Math.SQRT1_2\n    });\n    _this._merge = _this.output = new Merge({\n      context: _this.context\n    });\n\n    _this.mid.fan(_this._left);\n\n    _this.side.connect(_this._left.addend);\n\n    _this.mid.connect(_this._right);\n\n    _this.side.connect(_this._right.subtrahend);\n\n    _this._left.connect(_this._leftMult);\n\n    _this._right.connect(_this._rightMult);\n\n    _this._leftMult.connect(_this._merge, 0, 0);\n\n    _this._rightMult.connect(_this._merge, 0, 1);\n\n    return _this;\n  }\n\n  MidSideMerge.prototype.dispose = function () {\n    _super.prototype.dispose.call(this);\n\n    this.mid.dispose();\n    this.side.dispose();\n\n    this._leftMult.dispose();\n\n    this._rightMult.dispose();\n\n    this._left.dispose();\n\n    this._right.dispose();\n\n    return this;\n  };\n\n  return MidSideMerge;\n}(ToneAudioNode);\n\nexport { MidSideMerge };","map":{"version":3,"sources":["../../../../Tone/component/channel/MidSideMerge.ts"],"names":[],"mappings":";AAAA,SAAS,aAAT,QAAoD,kCAApD;AACA,SAAS,KAAT,QAAsB,SAAtB;AACA,SAAS,GAAT,QAAoB,kBAApB;AACA,SAAS,QAAT,QAAyB,uBAAzB;AACA,SAAS,QAAT,QAAyB,uBAAzB;AACA,SAAS,IAAT,QAAqB,yBAArB;AACA,SAAS,oBAAT,QAAqC,0BAArC;AAIA;;;;;;;;AAOA,IAAA,YAAA;AAAA;AAAA,UAAA,MAAA,EAAA;AAAkC,EAAA,OAAA,CAAA,SAAA,CAAA,YAAA,EAAA,MAAA;;AAkDjC,WAAA,YAAA,GAAA;AAAA,QAAA,KAAA,GACC,MAAA,CAAA,IAAA,CAAA,IAAA,EAAM,oBAAoB,CAAC,YAAY,CAAC,WAAb,EAAD,EAA6B,SAA7B,CAA1B,KAAkE,IADnE;;AAhDS,IAAA,KAAA,CAAA,IAAA,GAAe,cAAf;AAkDR,IAAA,KAAI,CAAC,GAAL,GAAW,IAAI,IAAJ,CAAS;AAAE,MAAA,OAAO,EAAE,KAAI,CAAC;AAAhB,KAAT,CAAX;AACA,IAAA,KAAI,CAAC,IAAL,GAAY,IAAI,IAAJ,CAAS;AAAE,MAAA,OAAO,EAAE,KAAI,CAAC;AAAhB,KAAT,CAAZ;AACA,IAAA,KAAI,CAAC,KAAL,GAAa,IAAI,GAAJ,CAAQ;AAAE,MAAA,OAAO,EAAE,KAAI,CAAC;AAAhB,KAAR,CAAb;AACA,IAAA,KAAI,CAAC,SAAL,GAAiB,IAAI,QAAJ,CAAa;AAC7B,MAAA,OAAO,EAAE,KAAI,CAAC,OADe;AAE7B,MAAA,KAAK,EAAE,IAAI,CAAC;AAFiB,KAAb,CAAjB;AAIA,IAAA,KAAI,CAAC,MAAL,GAAc,IAAI,QAAJ,CAAa;AAAE,MAAA,OAAO,EAAE,KAAI,CAAC;AAAhB,KAAb,CAAd;AACA,IAAA,KAAI,CAAC,UAAL,GAAkB,IAAI,QAAJ,CAAa;AAC9B,MAAA,OAAO,EAAE,KAAI,CAAC,OADgB;AAE9B,MAAA,KAAK,EAAE,IAAI,CAAC;AAFkB,KAAb,CAAlB;AAIA,IAAA,KAAI,CAAC,MAAL,GAAc,KAAI,CAAC,MAAL,GAAc,IAAI,KAAJ,CAAU;AAAE,MAAA,OAAO,EAAE,KAAI,CAAC;AAAhB,KAAV,CAA5B;;AAEA,IAAA,KAAI,CAAC,GAAL,CAAS,GAAT,CAAa,KAAI,CAAC,KAAlB;;AACA,IAAA,KAAI,CAAC,IAAL,CAAU,OAAV,CAAkB,KAAI,CAAC,KAAL,CAAW,MAA7B;;AACA,IAAA,KAAI,CAAC,GAAL,CAAS,OAAT,CAAiB,KAAI,CAAC,MAAtB;;AACA,IAAA,KAAI,CAAC,IAAL,CAAU,OAAV,CAAkB,KAAI,CAAC,MAAL,CAAY,UAA9B;;AACA,IAAA,KAAI,CAAC,KAAL,CAAW,OAAX,CAAmB,KAAI,CAAC,SAAxB;;AACA,IAAA,KAAI,CAAC,MAAL,CAAY,OAAZ,CAAoB,KAAI,CAAC,UAAzB;;AACA,IAAA,KAAI,CAAC,SAAL,CAAe,OAAf,CAAuB,KAAI,CAAC,MAA5B,EAAoC,CAApC,EAAuC,CAAvC;;AACA,IAAA,KAAI,CAAC,UAAL,CAAgB,OAAhB,CAAwB,KAAI,CAAC,MAA7B,EAAqC,CAArC,EAAwC,CAAxC;;;AACA;;AAED,EAAA,YAAA,CAAA,SAAA,CAAA,OAAA,GAAA,YAAA;AACC,IAAA,MAAA,CAAA,SAAA,CAAM,OAAN,CAAa,IAAb,CAAa,IAAb;;AACA,SAAK,GAAL,CAAS,OAAT;AACA,SAAK,IAAL,CAAU,OAAV;;AACA,SAAK,SAAL,CAAe,OAAf;;AACA,SAAK,UAAL,CAAgB,OAAhB;;AACA,SAAK,KAAL,CAAW,OAAX;;AACA,SAAK,MAAL,CAAY,OAAZ;;AACA,WAAO,IAAP;AACA,GATD;;AAUD,SAAA,YAAA;AAAC,CAtFD,CAAkC,aAAlC,CAAA","sourceRoot":"","sourcesContent":["import * as tslib_1 from \"tslib\";\nimport { ToneAudioNode } from \"../../core/context/ToneAudioNode\";\nimport { Merge } from \"./Merge\";\nimport { Add } from \"../../signal/Add\";\nimport { Multiply } from \"../../signal/Multiply\";\nimport { Subtract } from \"../../signal/Subtract\";\nimport { Gain } from \"../../core/context/Gain\";\nimport { optionsFromArguments } from \"../../core/util/Defaults\";\n/**\n * MidSideMerge merges the mid and side signal after they've been separated by [[MidSideMerge]]\n * ```\n * Mid = (Left+Right)/sqrt(2);   // obtain mid-signal from left and right\n * Side = (Left-Right)/sqrt(2);   // obtain side-signal from left and righ\n * ```\n */\nvar MidSideMerge = /** @class */ (function (_super) {\n    tslib_1.__extends(MidSideMerge, _super);\n    function MidSideMerge() {\n        var _this = _super.call(this, optionsFromArguments(MidSideMerge.getDefaults(), arguments)) || this;\n        _this.name = \"MidSideMerge\";\n        _this.mid = new Gain({ context: _this.context });\n        _this.side = new Gain({ context: _this.context });\n        _this._left = new Add({ context: _this.context });\n        _this._leftMult = new Multiply({\n            context: _this.context,\n            value: Math.SQRT1_2\n        });\n        _this._right = new Subtract({ context: _this.context });\n        _this._rightMult = new Multiply({\n            context: _this.context,\n            value: Math.SQRT1_2\n        });\n        _this._merge = _this.output = new Merge({ context: _this.context });\n        _this.mid.fan(_this._left);\n        _this.side.connect(_this._left.addend);\n        _this.mid.connect(_this._right);\n        _this.side.connect(_this._right.subtrahend);\n        _this._left.connect(_this._leftMult);\n        _this._right.connect(_this._rightMult);\n        _this._leftMult.connect(_this._merge, 0, 0);\n        _this._rightMult.connect(_this._merge, 0, 1);\n        return _this;\n    }\n    MidSideMerge.prototype.dispose = function () {\n        _super.prototype.dispose.call(this);\n        this.mid.dispose();\n        this.side.dispose();\n        this._leftMult.dispose();\n        this._rightMult.dispose();\n        this._left.dispose();\n        this._right.dispose();\n        return this;\n    };\n    return MidSideMerge;\n}(ToneAudioNode));\nexport { MidSideMerge };\n//# sourceMappingURL=MidSideMerge.js.map"]},"metadata":{},"sourceType":"module"}