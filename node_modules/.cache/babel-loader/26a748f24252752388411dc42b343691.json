{"ast":null,"code":"import { noOp } from \"../util/Interface\";\n/**\n * TransportEvent is an internal class used by [[Transport]]\n * to schedule events. Do no invoke this class directly, it is\n * handled from within Tone.Transport.\n */\n\nvar TransportEvent =\n/** @class */\nfunction () {\n  /**\n   * @param transport The transport object which the event belongs to\n   */\n  function TransportEvent(transport, opts) {\n    /**\n     * The unique id of the event\n     */\n    this.id = TransportEvent._eventId++;\n    var options = Object.assign(TransportEvent.getDefaults(), opts);\n    this.transport = transport;\n    this.callback = options.callback;\n    this._once = options.once;\n    this.time = options.time;\n  }\n\n  TransportEvent.getDefaults = function () {\n    return {\n      callback: noOp,\n      once: false,\n      time: 0\n    };\n  };\n  /**\n   * Invoke the event callback.\n   * @param  time  The AudioContext time in seconds of the event\n   */\n\n\n  TransportEvent.prototype.invoke = function (time) {\n    if (this.callback) {\n      this.callback(time);\n\n      if (this._once) {\n        this.transport.clear(this.id);\n      }\n    }\n  };\n  /**\n   * Clean up\n   */\n\n\n  TransportEvent.prototype.dispose = function () {\n    this.callback = undefined;\n    return this;\n  };\n  /**\n   * Current ID counter\n   */\n\n\n  TransportEvent._eventId = 0;\n  return TransportEvent;\n}();\n\nexport { TransportEvent };","map":{"version":3,"sources":["../../../../Tone/core/clock/TransportEvent.ts"],"names":[],"mappings":"AACA,SAAS,IAAT,QAAqB,mBAArB;AAUA;;;;;;AAKA,IAAA,cAAA;AAAA;AAAA,YAAA;AA2BC;;;AAGA,WAAA,cAAA,CAAY,SAAZ,EAAkC,IAAlC,EAAsE;AAvBtE;;;AAGA,SAAA,EAAA,GAAa,cAAc,CAAC,QAAf,EAAb;AAsBC,QAAM,OAAO,GAA0B,MAAM,CAAC,MAAP,CAAc,cAAc,CAAC,WAAf,EAAd,EAA4C,IAA5C,CAAvC;AAEA,SAAK,SAAL,GAAiB,SAAjB;AACA,SAAK,QAAL,GAAgB,OAAO,CAAC,QAAxB;AACA,SAAK,KAAL,GAAa,OAAO,CAAC,IAArB;AACA,SAAK,IAAL,GAAY,OAAO,CAAC,IAApB;AACA;;AAEM,EAAA,cAAA,CAAA,WAAA,GAAP,YAAA;AACC,WAAO;AACN,MAAA,QAAQ,EAAE,IADJ;AAEN,MAAA,IAAI,EAAE,KAFA;AAGN,MAAA,IAAI,EAAE;AAHA,KAAP;AAKA,GANM;AAaP;;;;;;AAIA,EAAA,cAAA,CAAA,SAAA,CAAA,MAAA,GAAA,UAAO,IAAP,EAAoB;AACnB,QAAI,KAAK,QAAT,EAAmB;AAClB,WAAK,QAAL,CAAc,IAAd;;AACA,UAAI,KAAK,KAAT,EAAgB;AACf,aAAK,SAAL,CAAe,KAAf,CAAqB,KAAK,EAA1B;AACA;AACD;AACD,GAPD;AASA;;;;;AAGA,EAAA,cAAA,CAAA,SAAA,CAAA,OAAA,GAAA,YAAA;AACC,SAAK,QAAL,GAAgB,SAAhB;AACA,WAAO,IAAP;AACA,GAHD;AArBA;;;;;AAGe,EAAA,cAAA,CAAA,QAAA,GAAW,CAAX;AAsBhB,SAAA,cAAA;AAAC,CAzED,EAAA;;SAAa,c","sourceRoot":"","sourcesContent":["import { noOp } from \"../util/Interface\";\n/**\n * TransportEvent is an internal class used by [[Transport]]\n * to schedule events. Do no invoke this class directly, it is\n * handled from within Tone.Transport.\n */\nvar TransportEvent = /** @class */ (function () {\n    /**\n     * @param transport The transport object which the event belongs to\n     */\n    function TransportEvent(transport, opts) {\n        /**\n         * The unique id of the event\n         */\n        this.id = TransportEvent._eventId++;\n        var options = Object.assign(TransportEvent.getDefaults(), opts);\n        this.transport = transport;\n        this.callback = options.callback;\n        this._once = options.once;\n        this.time = options.time;\n    }\n    TransportEvent.getDefaults = function () {\n        return {\n            callback: noOp,\n            once: false,\n            time: 0,\n        };\n    };\n    /**\n     * Invoke the event callback.\n     * @param  time  The AudioContext time in seconds of the event\n     */\n    TransportEvent.prototype.invoke = function (time) {\n        if (this.callback) {\n            this.callback(time);\n            if (this._once) {\n                this.transport.clear(this.id);\n            }\n        }\n    };\n    /**\n     * Clean up\n     */\n    TransportEvent.prototype.dispose = function () {\n        this.callback = undefined;\n        return this;\n    };\n    /**\n     * Current ID counter\n     */\n    TransportEvent._eventId = 0;\n    return TransportEvent;\n}());\nexport { TransportEvent };\n//# sourceMappingURL=TransportEvent.js.map"]},"metadata":{},"sourceType":"module"}