{"ast":null,"code":"import * as tslib_1 from \"tslib\";\nimport { Param } from \"../../core/context/Param\";\nimport { ToneAudioNode } from \"../../core/context/ToneAudioNode\";\nimport { optionsFromArguments } from \"../../core/util/Defaults\";\nimport { readOnly } from \"../../core/util/Interface\";\n/**\n * Panner is an equal power Left/Right Panner. It is a wrapper around the StereoPannerNode.\n * @example\n * import { Oscillator, Panner } from \"tone\";\n * // pan the input signal hard right.\n * const panner = new Panner(1).toDestination();\n * const osc = new Oscillator().connect(panner).start();\n * @category Component\n */\n\nvar Panner =\n/** @class */\nfunction (_super) {\n  tslib_1.__extends(Panner, _super);\n\n  function Panner() {\n    var _this = _super.call(this, Object.assign(optionsFromArguments(Panner.getDefaults(), arguments, [\"pan\"]))) || this;\n\n    _this.name = \"Panner\";\n    /**\n     * the panner node\n     */\n\n    _this._panner = _this.context.createStereoPanner();\n    _this.input = _this._panner;\n    _this.output = _this._panner;\n    var options = optionsFromArguments(Panner.getDefaults(), arguments, [\"pan\"]);\n    _this.pan = new Param({\n      context: _this.context,\n      param: _this._panner.pan,\n      value: options.pan,\n      minValue: -1,\n      maxValue: 1\n    }); // this is necessary for standardized-audio-context\n    // doesn't make any difference for the native AudioContext\n    // https://github.com/chrisguttandin/standardized-audio-context/issues/647\n\n    _this._panner.channelCount = 1;\n    _this._panner.channelCountMode = \"explicit\"; // initial value\n\n    readOnly(_this, \"pan\");\n    return _this;\n  }\n\n  Panner.getDefaults = function () {\n    return Object.assign(ToneAudioNode.getDefaults(), {\n      pan: 0\n    });\n  };\n\n  Panner.prototype.dispose = function () {\n    _super.prototype.dispose.call(this);\n\n    this._panner.disconnect();\n\n    this.pan.dispose();\n    return this;\n  };\n\n  return Panner;\n}(ToneAudioNode);\n\nexport { Panner };","map":{"version":3,"sources":["../../../../Tone/component/channel/Panner.ts"],"names":[],"mappings":";AAAA,SAAS,KAAT,QAAsB,0BAAtB;AACA,SAAS,aAAT,QAAoD,kCAApD;AAEA,SAAS,oBAAT,QAAqC,0BAArC;AACA,SAAS,QAAT,QAAyB,2BAAzB;AAMA;;;;;;;;;;AASA,IAAA,MAAA;AAAA;AAAA,UAAA,MAAA,EAAA;AAA4B,EAAA,OAAA,CAAA,SAAA,CAAA,MAAA,EAAA,MAAA;;AAuB3B,WAAA,MAAA,GAAA;AAAA,QAAA,KAAA,GACC,MAAA,CAAA,IAAA,CAAA,IAAA,EAAM,MAAM,CAAC,MAAP,CAAc,oBAAoB,CAAC,MAAM,CAAC,WAAP,EAAD,EAAuB,SAAvB,EAAkC,CAAC,KAAD,CAAlC,CAAlC,CAAN,KAAoF,IADrF;;AArBS,IAAA,KAAA,CAAA,IAAA,GAAe,QAAf;AAET;;;;AAGQ,IAAA,KAAA,CAAA,OAAA,GAA4B,KAAI,CAAC,OAAL,CAAa,kBAAb,EAA5B;AACC,IAAA,KAAA,CAAA,KAAA,GAA0B,KAAI,CAAC,OAA/B;AACA,IAAA,KAAA,CAAA,MAAA,GAA2B,KAAI,CAAC,OAAhC;AAgBR,QAAM,OAAO,GAAG,oBAAoB,CAAC,MAAM,CAAC,WAAP,EAAD,EAAuB,SAAvB,EAAkC,CAAC,KAAD,CAAlC,CAApC;AAEA,IAAA,KAAI,CAAC,GAAL,GAAW,IAAI,KAAJ,CAAU;AACpB,MAAA,OAAO,EAAE,KAAI,CAAC,OADM;AAEpB,MAAA,KAAK,EAAE,KAAI,CAAC,OAAL,CAAa,GAFA;AAGpB,MAAA,KAAK,EAAE,OAAO,CAAC,GAHK;AAIpB,MAAA,QAAQ,EAAE,CAAC,CAJS;AAKpB,MAAA,QAAQ,EAAE;AALU,KAAV,CAAX,CAJD,CAYC;AACA;AACA;;AACA,IAAA,KAAI,CAAC,OAAL,CAAa,YAAb,GAA4B,CAA5B;AACA,IAAA,KAAI,CAAC,OAAL,CAAa,gBAAb,GAAgC,UAAhC,CAhBD,CAkBC;;AACA,IAAA,QAAQ,CAAC,KAAD,EAAO,KAAP,CAAR;;AACA;;AAEM,EAAA,MAAA,CAAA,WAAA,GAAP,YAAA;AACC,WAAO,MAAM,CAAC,MAAP,CAAc,aAAa,CAAC,WAAd,EAAd,EAA2C;AACjD,MAAA,GAAG,EAAE;AAD4C,KAA3C,CAAP;AAGA,GAJM;;AAMP,EAAA,MAAA,CAAA,SAAA,CAAA,OAAA,GAAA,YAAA;AACC,IAAA,MAAA,CAAA,SAAA,CAAM,OAAN,CAAa,IAAb,CAAa,IAAb;;AACA,SAAK,OAAL,CAAa,UAAb;;AACA,SAAK,GAAL,CAAS,OAAT;AACA,WAAO,IAAP;AACA,GALD;;AAMD,SAAA,MAAA;AAAC,CAzDD,CAA4B,aAA5B,CAAA","sourceRoot":"","sourcesContent":["import * as tslib_1 from \"tslib\";\nimport { Param } from \"../../core/context/Param\";\nimport { ToneAudioNode } from \"../../core/context/ToneAudioNode\";\nimport { optionsFromArguments } from \"../../core/util/Defaults\";\nimport { readOnly } from \"../../core/util/Interface\";\n/**\n * Panner is an equal power Left/Right Panner. It is a wrapper around the StereoPannerNode.\n * @example\n * import { Oscillator, Panner } from \"tone\";\n * // pan the input signal hard right.\n * const panner = new Panner(1).toDestination();\n * const osc = new Oscillator().connect(panner).start();\n * @category Component\n */\nvar Panner = /** @class */ (function (_super) {\n    tslib_1.__extends(Panner, _super);\n    function Panner() {\n        var _this = _super.call(this, Object.assign(optionsFromArguments(Panner.getDefaults(), arguments, [\"pan\"]))) || this;\n        _this.name = \"Panner\";\n        /**\n         * the panner node\n         */\n        _this._panner = _this.context.createStereoPanner();\n        _this.input = _this._panner;\n        _this.output = _this._panner;\n        var options = optionsFromArguments(Panner.getDefaults(), arguments, [\"pan\"]);\n        _this.pan = new Param({\n            context: _this.context,\n            param: _this._panner.pan,\n            value: options.pan,\n            minValue: -1,\n            maxValue: 1,\n        });\n        // this is necessary for standardized-audio-context\n        // doesn't make any difference for the native AudioContext\n        // https://github.com/chrisguttandin/standardized-audio-context/issues/647\n        _this._panner.channelCount = 1;\n        _this._panner.channelCountMode = \"explicit\";\n        // initial value\n        readOnly(_this, \"pan\");\n        return _this;\n    }\n    Panner.getDefaults = function () {\n        return Object.assign(ToneAudioNode.getDefaults(), {\n            pan: 0,\n        });\n    };\n    Panner.prototype.dispose = function () {\n        _super.prototype.dispose.call(this);\n        this._panner.disconnect();\n        this.pan.dispose();\n        return this;\n    };\n    return Panner;\n}(ToneAudioNode));\nexport { Panner };\n//# sourceMappingURL=Panner.js.map"]},"metadata":{},"sourceType":"module"}