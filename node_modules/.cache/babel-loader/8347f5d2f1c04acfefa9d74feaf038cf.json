{"ast":null,"code":"import * as tslib_1 from \"tslib\";\nimport { ToneEvent } from \"./ToneEvent\";\nimport { ToneWithContext } from \"../core/context/ToneWithContext\";\nimport { optionsFromArguments } from \"../core/util/Defaults\";\nimport { noOp } from \"../core/util/Interface\";\n/**\n * Loop creates a looped callback at the\n * specified interval. The callback can be\n * started, stopped and scheduled along\n * the Transport's timeline.\n * @example\n * import { Loop, Transport } from \"tone\";\n * const loop = new Loop((time) => {\n * \t// triggered every eighth note.\n * \tconsole.log(time);\n * }, \"8n\").start(0);\n * Transport.start();\n * @category Event\n */\n\nvar Loop =\n/** @class */\nfunction (_super) {\n  tslib_1.__extends(Loop, _super);\n\n  function Loop() {\n    var _this = _super.call(this, optionsFromArguments(Loop.getDefaults(), arguments, [\"callback\", \"interval\"])) || this;\n\n    _this.name = \"Loop\";\n    var options = optionsFromArguments(Loop.getDefaults(), arguments, [\"callback\", \"interval\"]);\n    _this._event = new ToneEvent({\n      context: _this.context,\n      callback: _this._tick.bind(_this),\n      loop: true,\n      loopEnd: options.interval,\n      playbackRate: options.playbackRate,\n      probability: options.probability\n    });\n    _this.callback = options.callback; // set the iterations\n\n    _this.iterations = options.iterations;\n    return _this;\n  }\n\n  Loop.getDefaults = function () {\n    return Object.assign(ToneWithContext.getDefaults(), {\n      interval: \"4n\",\n      callback: noOp,\n      playbackRate: 1,\n      iterations: Infinity,\n      probability: 1,\n      mute: false,\n      humanize: false\n    });\n  };\n  /**\n   * Start the loop at the specified time along the Transport's timeline.\n   * @param  time  When to start the Loop.\n   */\n\n\n  Loop.prototype.start = function (time) {\n    this._event.start(time);\n\n    return this;\n  };\n  /**\n   * Stop the loop at the given time.\n   * @param  time  When to stop the Loop.\n   */\n\n\n  Loop.prototype.stop = function (time) {\n    this._event.stop(time);\n\n    return this;\n  };\n  /**\n   * Cancel all scheduled events greater than or equal to the given time\n   * @param  time  The time after which events will be cancel.\n   */\n\n\n  Loop.prototype.cancel = function (time) {\n    this._event.cancel(time);\n\n    return this;\n  };\n  /**\n   * Internal function called when the notes should be called\n   * @param time  The time the event occurs\n   */\n\n\n  Loop.prototype._tick = function (time) {\n    this.callback(time);\n  };\n\n  Object.defineProperty(Loop.prototype, \"state\", {\n    /**\n     * The state of the Loop, either started or stopped.\n     */\n    get: function () {\n      return this._event.state;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(Loop.prototype, \"progress\", {\n    /**\n     * The progress of the loop as a value between 0-1. 0, when the loop is stopped or done iterating.\n     */\n    get: function () {\n      return this._event.progress;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(Loop.prototype, \"interval\", {\n    /**\n     * The time between successive callbacks.\n     * @example\n     * import { Loop, Transport } from \"tone\";\n     * const loop = new Loop();\n     * loop.interval = \"8n\"; // loop every 8n\n     */\n    get: function () {\n      return this._event.loopEnd;\n    },\n    set: function (interval) {\n      this._event.loopEnd = interval;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(Loop.prototype, \"playbackRate\", {\n    /**\n     * The playback rate of the loop. The normal playback rate is 1 (no change).\n     * A `playbackRate` of 2 would be twice as fast.\n     */\n    get: function () {\n      return this._event.playbackRate;\n    },\n    set: function (rate) {\n      this._event.playbackRate = rate;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(Loop.prototype, \"humanize\", {\n    /**\n     * Random variation +/-0.01s to the scheduled time.\n     * Or give it a time value which it will randomize by.\n     */\n    get: function () {\n      return this._event.humanize;\n    },\n    set: function (variation) {\n      this._event.humanize = variation;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(Loop.prototype, \"probability\", {\n    /**\n     * The probably of the callback being invoked.\n     */\n    get: function () {\n      return this._event.probability;\n    },\n    set: function (prob) {\n      this._event.probability = prob;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(Loop.prototype, \"mute\", {\n    /**\n     * Muting the Loop means that no callbacks are invoked.\n     */\n    get: function () {\n      return this._event.mute;\n    },\n    set: function (mute) {\n      this._event.mute = mute;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(Loop.prototype, \"iterations\", {\n    /**\n     * The number of iterations of the loop. The default value is `Infinity` (loop forever).\n     */\n    get: function () {\n      if (this._event.loop === true) {\n        return Infinity;\n      } else {\n        return this._event.loop;\n      }\n    },\n    set: function (iters) {\n      if (iters === Infinity) {\n        this._event.loop = true;\n      } else {\n        this._event.loop = iters;\n      }\n    },\n    enumerable: true,\n    configurable: true\n  });\n\n  Loop.prototype.dispose = function () {\n    _super.prototype.dispose.call(this);\n\n    this._event.dispose();\n\n    return this;\n  };\n\n  return Loop;\n}(ToneWithContext);\n\nexport { Loop };","map":{"version":3,"sources":["../../../Tone/event/Loop.ts"],"names":[],"mappings":";AAAA,SAAS,SAAT,QAA0B,aAA1B;AAEA,SAAS,eAAT,QAAwD,iCAAxD;AACA,SAAS,oBAAT,QAAqC,uBAArC;AACA,SAAS,IAAT,QAAqB,wBAArB;AAaA;;;;;;;;;;;;;;;AAcA,IAAA,IAAA;AAAA;AAAA,UAAA,MAAA,EAAA;AAAqE,EAAA,OAAA,CAAA,SAAA,CAAA,IAAA,EAAA,MAAA;;AAoBpE,WAAA,IAAA,GAAA;AAAA,QAAA,KAAA,GACC,MAAA,CAAA,IAAA,CAAA,IAAA,EAAM,oBAAoB,CAAC,IAAI,CAAC,WAAL,EAAD,EAAqB,SAArB,EAAgC,CAAC,UAAD,EAAa,UAAb,CAAhC,CAA1B,KAAoF,IADrF;;AAlBS,IAAA,KAAA,CAAA,IAAA,GAAe,MAAf;AAoBR,QAAM,OAAO,GAAG,oBAAoB,CAAC,IAAI,CAAC,WAAL,EAAD,EAAqB,SAArB,EAAgC,CAAC,UAAD,EAAa,UAAb,CAAhC,CAApC;AAEA,IAAA,KAAI,CAAC,MAAL,GAAc,IAAI,SAAJ,CAAc;AAC3B,MAAA,OAAO,EAAE,KAAI,CAAC,OADa;AAE3B,MAAA,QAAQ,EAAE,KAAI,CAAC,KAAL,CAAW,IAAX,CAAgB,KAAhB,CAFiB;AAG3B,MAAA,IAAI,EAAE,IAHqB;AAI3B,MAAA,OAAO,EAAE,OAAO,CAAC,QAJU;AAK3B,MAAA,YAAY,EAAE,OAAO,CAAC,YALK;AAM3B,MAAA,WAAW,EAAE,OAAO,CAAC;AANM,KAAd,CAAd;AASA,IAAA,KAAI,CAAC,QAAL,GAAgB,OAAO,CAAC,QAAxB,CAbD,CAcC;;AACA,IAAA,KAAI,CAAC,UAAL,GAAkB,OAAO,CAAC,UAA1B;;AACA;;AAEM,EAAA,IAAA,CAAA,WAAA,GAAP,YAAA;AACC,WAAO,MAAM,CAAC,MAAP,CAAc,eAAe,CAAC,WAAhB,EAAd,EAA6C;AACnD,MAAA,QAAQ,EAAE,IADyC;AAEnD,MAAA,QAAQ,EAAE,IAFyC;AAGnD,MAAA,YAAY,EAAE,CAHqC;AAInD,MAAA,UAAU,EAAE,QAJuC;AAKnD,MAAA,WAAW,EAAE,CALsC;AAMnD,MAAA,IAAI,EAAE,KAN6C;AAOnD,MAAA,QAAQ,EAAE;AAPyC,KAA7C,CAAP;AASA,GAVM;AAYP;;;;;;AAIA,EAAA,IAAA,CAAA,SAAA,CAAA,KAAA,GAAA,UAAM,IAAN,EAA0B;AACzB,SAAK,MAAL,CAAY,KAAZ,CAAkB,IAAlB;;AACA,WAAO,IAAP;AACA,GAHD;AAKA;;;;;;AAIA,EAAA,IAAA,CAAA,SAAA,CAAA,IAAA,GAAA,UAAK,IAAL,EAAyB;AACxB,SAAK,MAAL,CAAY,IAAZ,CAAiB,IAAjB;;AACA,WAAO,IAAP;AACA,GAHD;AAKA;;;;;;AAIA,EAAA,IAAA,CAAA,SAAA,CAAA,MAAA,GAAA,UAAO,IAAP,EAA2B;AAC1B,SAAK,MAAL,CAAY,MAAZ,CAAmB,IAAnB;;AACA,WAAO,IAAP;AACA,GAHD;AAKA;;;;;;AAIU,EAAA,IAAA,CAAA,SAAA,CAAA,KAAA,GAAV,UAAgB,IAAhB,EAA6B;AAC5B,SAAK,QAAL,CAAc,IAAd;AACA,GAFS;;AAOV,EAAA,MAAA,CAAA,cAAA,CAAI,IAAA,CAAA,SAAJ,EAAI,OAAJ,EAAS;AAHT;;;SAGA,YAAA;AACC,aAAO,KAAK,MAAL,CAAY,KAAnB;AACA,KAFQ;oBAAA;;AAAA,GAAT;AAOA,EAAA,MAAA,CAAA,cAAA,CAAI,IAAA,CAAA,SAAJ,EAAI,UAAJ,EAAY;AAHZ;;;SAGA,YAAA;AACC,aAAO,KAAK,MAAL,CAAY,QAAnB;AACA,KAFW;oBAAA;;AAAA,GAAZ;AAWA,EAAA,MAAA,CAAA,cAAA,CAAI,IAAA,CAAA,SAAJ,EAAI,UAAJ,EAAY;AAPZ;;;;;;;SAOA,YAAA;AACC,aAAO,KAAK,MAAL,CAAY,OAAnB;AACA,KAFW;SAGZ,UAAa,QAAb,EAAqB;AACpB,WAAK,MAAL,CAAY,OAAZ,GAAsB,QAAtB;AACA,KALW;oBAAA;;AAAA,GAAZ;AAWA,EAAA,MAAA,CAAA,cAAA,CAAI,IAAA,CAAA,SAAJ,EAAI,cAAJ,EAAgB;AAJhB;;;;SAIA,YAAA;AACC,aAAO,KAAK,MAAL,CAAY,YAAnB;AACA,KAFe;SAGhB,UAAiB,IAAjB,EAAqB;AACpB,WAAK,MAAL,CAAY,YAAZ,GAA2B,IAA3B;AACA,KALe;oBAAA;;AAAA,GAAhB;AAWA,EAAA,MAAA,CAAA,cAAA,CAAI,IAAA,CAAA,SAAJ,EAAI,UAAJ,EAAY;AAJZ;;;;SAIA,YAAA;AACC,aAAO,KAAK,MAAL,CAAY,QAAnB;AACA,KAFW;SAGZ,UAAa,SAAb,EAAsB;AACrB,WAAK,MAAL,CAAY,QAAZ,GAAuB,SAAvB;AACA,KALW;oBAAA;;AAAA,GAAZ;AAUA,EAAA,MAAA,CAAA,cAAA,CAAI,IAAA,CAAA,SAAJ,EAAI,aAAJ,EAAe;AAHf;;;SAGA,YAAA;AACC,aAAO,KAAK,MAAL,CAAY,WAAnB;AACA,KAFc;SAIf,UAAgB,IAAhB,EAAoB;AACnB,WAAK,MAAL,CAAY,WAAZ,GAA0B,IAA1B;AACA,KANc;oBAAA;;AAAA,GAAf;AAWA,EAAA,MAAA,CAAA,cAAA,CAAI,IAAA,CAAA,SAAJ,EAAI,MAAJ,EAAQ;AAHR;;;SAGA,YAAA;AACC,aAAO,KAAK,MAAL,CAAY,IAAnB;AACA,KAFO;SAIR,UAAS,IAAT,EAAa;AACZ,WAAK,MAAL,CAAY,IAAZ,GAAmB,IAAnB;AACA,KANO;oBAAA;;AAAA,GAAR;AAWA,EAAA,MAAA,CAAA,cAAA,CAAI,IAAA,CAAA,SAAJ,EAAI,YAAJ,EAAc;AAHd;;;SAGA,YAAA;AACC,UAAI,KAAK,MAAL,CAAY,IAAZ,KAAqB,IAAzB,EAA+B;AAC9B,eAAO,QAAP;AACA,OAFD,MAEO;AACN,eAAO,KAAK,MAAL,CAAY,IAAnB;AACA;AACD,KANa;SAOd,UAAe,KAAf,EAAoB;AACnB,UAAI,KAAK,KAAK,QAAd,EAAwB;AACvB,aAAK,MAAL,CAAY,IAAZ,GAAmB,IAAnB;AACA,OAFD,MAEO;AACN,aAAK,MAAL,CAAY,IAAZ,GAAmB,KAAnB;AACA;AACD,KAba;oBAAA;;AAAA,GAAd;;AAeA,EAAA,IAAA,CAAA,SAAA,CAAA,OAAA,GAAA,YAAA;AACC,IAAA,MAAA,CAAA,SAAA,CAAM,OAAN,CAAa,IAAb,CAAa,IAAb;;AACA,SAAK,MAAL,CAAY,OAAZ;;AACA,WAAO,IAAP;AACA,GAJD;;AAKD,SAAA,IAAA;AAAC,CApLD,CAAqE,eAArE,CAAA","sourceRoot":"","sourcesContent":["import * as tslib_1 from \"tslib\";\nimport { ToneEvent } from \"./ToneEvent\";\nimport { ToneWithContext } from \"../core/context/ToneWithContext\";\nimport { optionsFromArguments } from \"../core/util/Defaults\";\nimport { noOp } from \"../core/util/Interface\";\n/**\n * Loop creates a looped callback at the\n * specified interval. The callback can be\n * started, stopped and scheduled along\n * the Transport's timeline.\n * @example\n * import { Loop, Transport } from \"tone\";\n * const loop = new Loop((time) => {\n * \t// triggered every eighth note.\n * \tconsole.log(time);\n * }, \"8n\").start(0);\n * Transport.start();\n * @category Event\n */\nvar Loop = /** @class */ (function (_super) {\n    tslib_1.__extends(Loop, _super);\n    function Loop() {\n        var _this = _super.call(this, optionsFromArguments(Loop.getDefaults(), arguments, [\"callback\", \"interval\"])) || this;\n        _this.name = \"Loop\";\n        var options = optionsFromArguments(Loop.getDefaults(), arguments, [\"callback\", \"interval\"]);\n        _this._event = new ToneEvent({\n            context: _this.context,\n            callback: _this._tick.bind(_this),\n            loop: true,\n            loopEnd: options.interval,\n            playbackRate: options.playbackRate,\n            probability: options.probability\n        });\n        _this.callback = options.callback;\n        // set the iterations\n        _this.iterations = options.iterations;\n        return _this;\n    }\n    Loop.getDefaults = function () {\n        return Object.assign(ToneWithContext.getDefaults(), {\n            interval: \"4n\",\n            callback: noOp,\n            playbackRate: 1,\n            iterations: Infinity,\n            probability: 1,\n            mute: false,\n            humanize: false\n        });\n    };\n    /**\n     * Start the loop at the specified time along the Transport's timeline.\n     * @param  time  When to start the Loop.\n     */\n    Loop.prototype.start = function (time) {\n        this._event.start(time);\n        return this;\n    };\n    /**\n     * Stop the loop at the given time.\n     * @param  time  When to stop the Loop.\n     */\n    Loop.prototype.stop = function (time) {\n        this._event.stop(time);\n        return this;\n    };\n    /**\n     * Cancel all scheduled events greater than or equal to the given time\n     * @param  time  The time after which events will be cancel.\n     */\n    Loop.prototype.cancel = function (time) {\n        this._event.cancel(time);\n        return this;\n    };\n    /**\n     * Internal function called when the notes should be called\n     * @param time  The time the event occurs\n     */\n    Loop.prototype._tick = function (time) {\n        this.callback(time);\n    };\n    Object.defineProperty(Loop.prototype, \"state\", {\n        /**\n         * The state of the Loop, either started or stopped.\n         */\n        get: function () {\n            return this._event.state;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(Loop.prototype, \"progress\", {\n        /**\n         * The progress of the loop as a value between 0-1. 0, when the loop is stopped or done iterating.\n         */\n        get: function () {\n            return this._event.progress;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(Loop.prototype, \"interval\", {\n        /**\n         * The time between successive callbacks.\n         * @example\n         * import { Loop, Transport } from \"tone\";\n         * const loop = new Loop();\n         * loop.interval = \"8n\"; // loop every 8n\n         */\n        get: function () {\n            return this._event.loopEnd;\n        },\n        set: function (interval) {\n            this._event.loopEnd = interval;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(Loop.prototype, \"playbackRate\", {\n        /**\n         * The playback rate of the loop. The normal playback rate is 1 (no change).\n         * A `playbackRate` of 2 would be twice as fast.\n         */\n        get: function () {\n            return this._event.playbackRate;\n        },\n        set: function (rate) {\n            this._event.playbackRate = rate;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(Loop.prototype, \"humanize\", {\n        /**\n         * Random variation +/-0.01s to the scheduled time.\n         * Or give it a time value which it will randomize by.\n         */\n        get: function () {\n            return this._event.humanize;\n        },\n        set: function (variation) {\n            this._event.humanize = variation;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(Loop.prototype, \"probability\", {\n        /**\n         * The probably of the callback being invoked.\n         */\n        get: function () {\n            return this._event.probability;\n        },\n        set: function (prob) {\n            this._event.probability = prob;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(Loop.prototype, \"mute\", {\n        /**\n         * Muting the Loop means that no callbacks are invoked.\n         */\n        get: function () {\n            return this._event.mute;\n        },\n        set: function (mute) {\n            this._event.mute = mute;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(Loop.prototype, \"iterations\", {\n        /**\n         * The number of iterations of the loop. The default value is `Infinity` (loop forever).\n         */\n        get: function () {\n            if (this._event.loop === true) {\n                return Infinity;\n            }\n            else {\n                return this._event.loop;\n            }\n        },\n        set: function (iters) {\n            if (iters === Infinity) {\n                this._event.loop = true;\n            }\n            else {\n                this._event.loop = iters;\n            }\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Loop.prototype.dispose = function () {\n        _super.prototype.dispose.call(this);\n        this._event.dispose();\n        return this;\n    };\n    return Loop;\n}(ToneWithContext));\nexport { Loop };\n//# sourceMappingURL=Loop.js.map"]},"metadata":{},"sourceType":"module"}