{"ast":null,"code":"import * as tslib_1 from \"tslib\";\nimport { ToneAudioBuffer } from \"../../core/context/ToneAudioBuffer\";\nimport { defaultArg, optionsFromArguments } from \"../../core/util/Defaults\";\nimport { noOp } from \"../../core/util/Interface\";\nimport { isUndef } from \"../../core/util/TypeCheck\";\nimport { Source } from \"../Source\";\nimport { ToneBufferSource } from \"./ToneBufferSource\";\nimport { assertRange } from \"../../core/util/Debug\";\nimport { timeRange } from \"../../core/util/Decorator\";\n/**\n * Player is an audio file player with start, loop, and stop functions.\n * @example\n * import { Player } from \"tone\";\n * const player = new Player(\"https://tonejs.github.io/examples/audio/FWDL.mp3\").toDestination();\n * // play as soon as the buffer is loaded\n * player.autostart = true;\n * @category Source\n */\n\nvar Player =\n/** @class */\nfunction (_super) {\n  tslib_1.__extends(Player, _super);\n\n  function Player() {\n    var _this = _super.call(this, optionsFromArguments(Player.getDefaults(), arguments, [\"url\", \"onload\"])) || this;\n\n    _this.name = \"Player\";\n    /**\n     * All of the active buffer source nodes\n     */\n\n    _this._activeSources = new Set();\n    var options = optionsFromArguments(Player.getDefaults(), arguments, [\"url\", \"onload\"]);\n    _this._buffer = new ToneAudioBuffer({\n      onload: _this._onload.bind(_this, options.onload),\n      reverse: options.reverse,\n      url: options.url\n    });\n    _this.autostart = options.autostart;\n    _this._loop = options.loop;\n    _this._loopStart = options.loopStart;\n    _this._loopEnd = options.loopEnd;\n    _this._playbackRate = options.playbackRate;\n    _this.fadeIn = options.fadeIn;\n    _this.fadeOut = options.fadeOut;\n    return _this;\n  }\n\n  Player.getDefaults = function () {\n    return Object.assign(Source.getDefaults(), {\n      autostart: false,\n      fadeIn: 0,\n      fadeOut: 0,\n      loop: false,\n      loopEnd: 0,\n      loopStart: 0,\n      onload: noOp,\n      playbackRate: 1,\n      reverse: false\n    });\n  };\n  /**\n   * Load the audio file as an audio buffer.\n   * Decodes the audio asynchronously and invokes\n   * the callback once the audio buffer loads.\n   * Note: this does not need to be called if a url\n   * was passed in to the constructor. Only use this\n   * if you want to manually load a new url.\n   * @param url The url of the buffer to load. Filetype support depends on the browser.\n   */\n\n\n  Player.prototype.load = function (url) {\n    return tslib_1.__awaiter(this, void 0, void 0, function () {\n      return tslib_1.__generator(this, function (_a) {\n        switch (_a.label) {\n          case 0:\n            return [4\n            /*yield*/\n            , this._buffer.load(url)];\n\n          case 1:\n            _a.sent();\n\n            this._onload();\n\n            return [2\n            /*return*/\n            , this];\n        }\n      });\n    });\n  };\n  /**\n   * Internal callback when the buffer is loaded.\n   */\n\n\n  Player.prototype._onload = function (callback) {\n    if (callback === void 0) {\n      callback = noOp;\n    }\n\n    callback();\n\n    if (this.autostart) {\n      this.start();\n    }\n  };\n  /**\n   * Internal callback when the buffer is done playing.\n   */\n\n\n  Player.prototype._onSourceEnd = function (source) {\n    // invoke the onstop function\n    this.onstop(this); // delete the source from the active sources\n\n    this._activeSources.delete(source);\n\n    if (this._activeSources.size === 0 && !this._synced && this._state.getValueAtTime(this.now()) === \"started\") {\n      this._state.setStateAtTime(\"stopped\", this.now());\n    }\n  };\n  /**\n   * Play the buffer at the given startTime. Optionally add an offset\n   * and/or duration which will play the buffer from a position\n   * within the buffer for the given duration.\n   *\n   * @param  time When the player should start.\n   * @param  offset The offset from the beginning of the sample to start at.\n   * @param  duration How long the sample should play. If no duration is given, it will default to the full length of the sample (minus any offset)\n   */\n\n\n  Player.prototype.start = function (time, offset, duration) {\n    _super.prototype.start.call(this, time, offset, duration);\n\n    return this;\n  };\n  /**\n   * Internal start method\n   */\n\n\n  Player.prototype._start = function (startTime, offset, duration) {\n    // if it's a loop the default offset is the loopStart point\n    if (this._loop) {\n      offset = defaultArg(offset, this._loopStart);\n    } else {\n      // otherwise the default offset is 0\n      offset = defaultArg(offset, 0);\n    } // compute the values in seconds\n\n\n    var computedOffset = this.toSeconds(offset); // if it's synced, it should factor in the playback rate for computing the offset\n\n    if (this._synced) {\n      computedOffset *= this._playbackRate;\n    } // compute the duration which is either the passed in duration of the buffer.duration - offset\n\n\n    var origDuration = duration;\n    duration = defaultArg(duration, Math.max(this._buffer.duration - computedOffset, 0));\n    var computedDuration = this.toSeconds(duration); // scale it by the playback rate\n\n    computedDuration = computedDuration / this._playbackRate; // get the start time\n\n    startTime = this.toSeconds(startTime); // make the source\n\n    var source = new ToneBufferSource({\n      buffer: this._buffer,\n      context: this.context,\n      fadeIn: this.fadeIn,\n      fadeOut: this.fadeOut,\n      loop: this._loop,\n      loopEnd: this._loopEnd,\n      loopStart: this._loopStart,\n      onended: this._onSourceEnd.bind(this),\n      playbackRate: this._playbackRate\n    }).connect(this.output); // set the looping properties\n\n    if (!this._loop && !this._synced) {\n      // cancel the previous stop\n      this._state.cancel(startTime + computedDuration); // if it's not looping, set the state change at the end of the sample\n\n\n      this._state.setStateAtTime(\"stopped\", startTime + computedDuration, {\n        implicitEnd: true\n      });\n    } // add it to the array of active sources\n\n\n    this._activeSources.add(source); // start it\n\n\n    if (this._loop && isUndef(origDuration)) {\n      source.start(startTime, computedOffset);\n    } else {\n      // subtract the fade out time\n      source.start(startTime, computedOffset, computedDuration - this.toSeconds(this.fadeOut));\n    }\n  };\n  /**\n   * Stop playback.\n   */\n\n\n  Player.prototype._stop = function (time) {\n    var computedTime = this.toSeconds(time);\n\n    this._activeSources.forEach(function (source) {\n      return source.stop(computedTime);\n    });\n  };\n  /**\n   * Stop and then restart the player from the beginning (or offset)\n   * @param  time When the player should start.\n   * @param  offset The offset from the beginning of the sample to start at.\n   * @param  duration How long the sample should play. If no duration is given,\n   * \t\t\t\t\tit will default to the full length of the sample (minus any offset)\n   */\n\n\n  Player.prototype.restart = function (time, offset, duration) {\n    _super.prototype.restart.call(this, time, offset, duration);\n\n    return this;\n  };\n\n  Player.prototype._restart = function (time, offset, duration) {\n    this._stop(time);\n\n    this._start(time, offset, duration);\n  };\n  /**\n   * Seek to a specific time in the player's buffer. If the\n   * source is no longer playing at that time, it will stop.\n   * @param offset The time to seek to.\n   * @param when The time for the seek event to occur.\n   * @example\n   * import { Player } from \"tone\";\n   * const player = new Player(\"https://tonejs.github.io/examples/audio/FWDL.mp3\", () => {\n   * \tplayer.start();\n   * \t// seek to the offset in 1 second from now\n   * \tplayer.seek(0.4, \"+1\");\n   * }).toDestination();\n   */\n\n\n  Player.prototype.seek = function (offset, when) {\n    var computedTime = this.toSeconds(when);\n\n    if (this._state.getValueAtTime(computedTime) === \"started\") {\n      var computedOffset = this.toSeconds(offset); // if it's currently playing, stop it\n\n      this._stop(computedTime); // restart it at the given time\n\n\n      this._start(computedTime, computedOffset);\n    }\n\n    return this;\n  };\n  /**\n   * Set the loop start and end. Will only loop if loop is set to true.\n   * @param loopStart The loop start time\n   * @param loopEnd The loop end time\n   * @example\n   * import { Player } from \"tone\";\n   * const player = new Player(\"https://tonejs.github.io/examples/audio/FWDL.mp3\").toDestination();\n   * // loop between the given points\n   * player.setLoopPoints(0.2, 0.3);\n   * player.loop = true;\n   * player.autostart = true;\n   */\n\n\n  Player.prototype.setLoopPoints = function (loopStart, loopEnd) {\n    this.loopStart = loopStart;\n    this.loopEnd = loopEnd;\n    return this;\n  };\n\n  Object.defineProperty(Player.prototype, \"loopStart\", {\n    /**\n     * If loop is true, the loop will start at this position.\n     */\n    get: function () {\n      return this._loopStart;\n    },\n    set: function (loopStart) {\n      this._loopStart = loopStart;\n\n      if (this.buffer.loaded) {\n        assertRange(this.toSeconds(loopStart), 0, this.buffer.duration);\n      } // get the current source\n\n\n      this._activeSources.forEach(function (source) {\n        source.loopStart = loopStart;\n      });\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(Player.prototype, \"loopEnd\", {\n    /**\n     * If loop is true, the loop will end at this position.\n     */\n    get: function () {\n      return this._loopEnd;\n    },\n    set: function (loopEnd) {\n      this._loopEnd = loopEnd;\n\n      if (this.buffer.loaded) {\n        assertRange(this.toSeconds(loopEnd), 0, this.buffer.duration);\n      } // get the current source\n\n\n      this._activeSources.forEach(function (source) {\n        source.loopEnd = loopEnd;\n      });\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(Player.prototype, \"buffer\", {\n    /**\n     * The audio buffer belonging to the player.\n     */\n    get: function () {\n      return this._buffer;\n    },\n    set: function (buffer) {\n      this._buffer.set(buffer);\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(Player.prototype, \"loop\", {\n    /**\n     * If the buffer should loop once it's over.\n     */\n    get: function () {\n      return this._loop;\n    },\n    set: function (loop) {\n      // if no change, do nothing\n      if (this._loop === loop) {\n        return;\n      }\n\n      this._loop = loop; // set the loop of all of the sources\n\n      this._activeSources.forEach(function (source) {\n        source.loop = loop;\n      });\n\n      if (loop) {\n        // remove the next stopEvent\n        var stopEvent = this._state.getNextState(\"stopped\", this.now());\n\n        if (stopEvent) {\n          this._state.cancel(stopEvent.time);\n        }\n      }\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(Player.prototype, \"playbackRate\", {\n    /**\n     * The playback speed. 1 is normal speed. This is not a signal because\n     * Safari and iOS currently don't support playbackRate as a signal.\n     */\n    get: function () {\n      return this._playbackRate;\n    },\n    set: function (rate) {\n      this._playbackRate = rate;\n      var now = this.now(); // cancel the stop event since it's at a different time now\n\n      var stopEvent = this._state.getNextState(\"stopped\", now);\n\n      if (stopEvent && stopEvent.implicitEnd) {\n        this._state.cancel(stopEvent.time);\n\n        this._activeSources.forEach(function (source) {\n          return source.cancelStop();\n        });\n      } // set all the sources\n\n\n      this._activeSources.forEach(function (source) {\n        source.playbackRate.setValueAtTime(rate, now);\n      });\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(Player.prototype, \"reverse\", {\n    /**\n     * The direction the buffer should play in\n     */\n    get: function () {\n      return this._buffer.reverse;\n    },\n    set: function (rev) {\n      this._buffer.reverse = rev;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(Player.prototype, \"loaded\", {\n    /**\n     * If the buffer is loaded\n     */\n    get: function () {\n      return this._buffer.loaded;\n    },\n    enumerable: true,\n    configurable: true\n  });\n\n  Player.prototype.dispose = function () {\n    _super.prototype.dispose.call(this); // disconnect all of the players\n\n\n    this._activeSources.forEach(function (source) {\n      return source.dispose();\n    });\n\n    this._activeSources.clear();\n\n    this._buffer.dispose();\n\n    return this;\n  };\n\n  tslib_1.__decorate([timeRange(0)], Player.prototype, \"fadeIn\", void 0);\n\n  tslib_1.__decorate([timeRange(0)], Player.prototype, \"fadeOut\", void 0);\n\n  return Player;\n}(Source);\n\nexport { Player };","map":{"version":3,"sources":["../../../../Tone/source/buffer/Player.ts"],"names":[],"mappings":"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","sourceRoot":"","sourcesContent":["import * as tslib_1 from \"tslib\";\nimport { ToneAudioBuffer } from \"../../core/context/ToneAudioBuffer\";\nimport { defaultArg, optionsFromArguments } from \"../../core/util/Defaults\";\nimport { noOp } from \"../../core/util/Interface\";\nimport { isUndef } from \"../../core/util/TypeCheck\";\nimport { Source } from \"../Source\";\nimport { ToneBufferSource } from \"./ToneBufferSource\";\nimport { assertRange } from \"../../core/util/Debug\";\nimport { timeRange } from \"../../core/util/Decorator\";\n/**\n * Player is an audio file player with start, loop, and stop functions.\n * @example\n * import { Player } from \"tone\";\n * const player = new Player(\"https://tonejs.github.io/examples/audio/FWDL.mp3\").toDestination();\n * // play as soon as the buffer is loaded\n * player.autostart = true;\n * @category Source\n */\nvar Player = /** @class */ (function (_super) {\n    tslib_1.__extends(Player, _super);\n    function Player() {\n        var _this = _super.call(this, optionsFromArguments(Player.getDefaults(), arguments, [\"url\", \"onload\"])) || this;\n        _this.name = \"Player\";\n        /**\n         * All of the active buffer source nodes\n         */\n        _this._activeSources = new Set();\n        var options = optionsFromArguments(Player.getDefaults(), arguments, [\"url\", \"onload\"]);\n        _this._buffer = new ToneAudioBuffer({\n            onload: _this._onload.bind(_this, options.onload),\n            reverse: options.reverse,\n            url: options.url,\n        });\n        _this.autostart = options.autostart;\n        _this._loop = options.loop;\n        _this._loopStart = options.loopStart;\n        _this._loopEnd = options.loopEnd;\n        _this._playbackRate = options.playbackRate;\n        _this.fadeIn = options.fadeIn;\n        _this.fadeOut = options.fadeOut;\n        return _this;\n    }\n    Player.getDefaults = function () {\n        return Object.assign(Source.getDefaults(), {\n            autostart: false,\n            fadeIn: 0,\n            fadeOut: 0,\n            loop: false,\n            loopEnd: 0,\n            loopStart: 0,\n            onload: noOp,\n            playbackRate: 1,\n            reverse: false,\n        });\n    };\n    /**\n     * Load the audio file as an audio buffer.\n     * Decodes the audio asynchronously and invokes\n     * the callback once the audio buffer loads.\n     * Note: this does not need to be called if a url\n     * was passed in to the constructor. Only use this\n     * if you want to manually load a new url.\n     * @param url The url of the buffer to load. Filetype support depends on the browser.\n     */\n    Player.prototype.load = function (url) {\n        return tslib_1.__awaiter(this, void 0, void 0, function () {\n            return tslib_1.__generator(this, function (_a) {\n                switch (_a.label) {\n                    case 0: return [4 /*yield*/, this._buffer.load(url)];\n                    case 1:\n                        _a.sent();\n                        this._onload();\n                        return [2 /*return*/, this];\n                }\n            });\n        });\n    };\n    /**\n     * Internal callback when the buffer is loaded.\n     */\n    Player.prototype._onload = function (callback) {\n        if (callback === void 0) { callback = noOp; }\n        callback();\n        if (this.autostart) {\n            this.start();\n        }\n    };\n    /**\n     * Internal callback when the buffer is done playing.\n     */\n    Player.prototype._onSourceEnd = function (source) {\n        // invoke the onstop function\n        this.onstop(this);\n        // delete the source from the active sources\n        this._activeSources.delete(source);\n        if (this._activeSources.size === 0 && !this._synced &&\n            this._state.getValueAtTime(this.now()) === \"started\") {\n            this._state.setStateAtTime(\"stopped\", this.now());\n        }\n    };\n    /**\n     * Play the buffer at the given startTime. Optionally add an offset\n     * and/or duration which will play the buffer from a position\n     * within the buffer for the given duration.\n     *\n     * @param  time When the player should start.\n     * @param  offset The offset from the beginning of the sample to start at.\n     * @param  duration How long the sample should play. If no duration is given, it will default to the full length of the sample (minus any offset)\n     */\n    Player.prototype.start = function (time, offset, duration) {\n        _super.prototype.start.call(this, time, offset, duration);\n        return this;\n    };\n    /**\n     * Internal start method\n     */\n    Player.prototype._start = function (startTime, offset, duration) {\n        // if it's a loop the default offset is the loopStart point\n        if (this._loop) {\n            offset = defaultArg(offset, this._loopStart);\n        }\n        else {\n            // otherwise the default offset is 0\n            offset = defaultArg(offset, 0);\n        }\n        // compute the values in seconds\n        var computedOffset = this.toSeconds(offset);\n        // if it's synced, it should factor in the playback rate for computing the offset\n        if (this._synced) {\n            computedOffset *= this._playbackRate;\n        }\n        // compute the duration which is either the passed in duration of the buffer.duration - offset\n        var origDuration = duration;\n        duration = defaultArg(duration, Math.max(this._buffer.duration - computedOffset, 0));\n        var computedDuration = this.toSeconds(duration);\n        // scale it by the playback rate\n        computedDuration = computedDuration / this._playbackRate;\n        // get the start time\n        startTime = this.toSeconds(startTime);\n        // make the source\n        var source = new ToneBufferSource({\n            buffer: this._buffer,\n            context: this.context,\n            fadeIn: this.fadeIn,\n            fadeOut: this.fadeOut,\n            loop: this._loop,\n            loopEnd: this._loopEnd,\n            loopStart: this._loopStart,\n            onended: this._onSourceEnd.bind(this),\n            playbackRate: this._playbackRate,\n        }).connect(this.output);\n        // set the looping properties\n        if (!this._loop && !this._synced) {\n            // cancel the previous stop\n            this._state.cancel(startTime + computedDuration);\n            // if it's not looping, set the state change at the end of the sample\n            this._state.setStateAtTime(\"stopped\", startTime + computedDuration, {\n                implicitEnd: true,\n            });\n        }\n        // add it to the array of active sources\n        this._activeSources.add(source);\n        // start it\n        if (this._loop && isUndef(origDuration)) {\n            source.start(startTime, computedOffset);\n        }\n        else {\n            // subtract the fade out time\n            source.start(startTime, computedOffset, computedDuration - this.toSeconds(this.fadeOut));\n        }\n    };\n    /**\n     * Stop playback.\n     */\n    Player.prototype._stop = function (time) {\n        var computedTime = this.toSeconds(time);\n        this._activeSources.forEach(function (source) { return source.stop(computedTime); });\n    };\n    /**\n     * Stop and then restart the player from the beginning (or offset)\n     * @param  time When the player should start.\n     * @param  offset The offset from the beginning of the sample to start at.\n     * @param  duration How long the sample should play. If no duration is given,\n     * \t\t\t\t\tit will default to the full length of the sample (minus any offset)\n     */\n    Player.prototype.restart = function (time, offset, duration) {\n        _super.prototype.restart.call(this, time, offset, duration);\n        return this;\n    };\n    Player.prototype._restart = function (time, offset, duration) {\n        this._stop(time);\n        this._start(time, offset, duration);\n    };\n    /**\n     * Seek to a specific time in the player's buffer. If the\n     * source is no longer playing at that time, it will stop.\n     * @param offset The time to seek to.\n     * @param when The time for the seek event to occur.\n     * @example\n     * import { Player } from \"tone\";\n     * const player = new Player(\"https://tonejs.github.io/examples/audio/FWDL.mp3\", () => {\n     * \tplayer.start();\n     * \t// seek to the offset in 1 second from now\n     * \tplayer.seek(0.4, \"+1\");\n     * }).toDestination();\n     */\n    Player.prototype.seek = function (offset, when) {\n        var computedTime = this.toSeconds(when);\n        if (this._state.getValueAtTime(computedTime) === \"started\") {\n            var computedOffset = this.toSeconds(offset);\n            // if it's currently playing, stop it\n            this._stop(computedTime);\n            // restart it at the given time\n            this._start(computedTime, computedOffset);\n        }\n        return this;\n    };\n    /**\n     * Set the loop start and end. Will only loop if loop is set to true.\n     * @param loopStart The loop start time\n     * @param loopEnd The loop end time\n     * @example\n     * import { Player } from \"tone\";\n     * const player = new Player(\"https://tonejs.github.io/examples/audio/FWDL.mp3\").toDestination();\n     * // loop between the given points\n     * player.setLoopPoints(0.2, 0.3);\n     * player.loop = true;\n     * player.autostart = true;\n     */\n    Player.prototype.setLoopPoints = function (loopStart, loopEnd) {\n        this.loopStart = loopStart;\n        this.loopEnd = loopEnd;\n        return this;\n    };\n    Object.defineProperty(Player.prototype, \"loopStart\", {\n        /**\n         * If loop is true, the loop will start at this position.\n         */\n        get: function () {\n            return this._loopStart;\n        },\n        set: function (loopStart) {\n            this._loopStart = loopStart;\n            if (this.buffer.loaded) {\n                assertRange(this.toSeconds(loopStart), 0, this.buffer.duration);\n            }\n            // get the current source\n            this._activeSources.forEach(function (source) {\n                source.loopStart = loopStart;\n            });\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(Player.prototype, \"loopEnd\", {\n        /**\n         * If loop is true, the loop will end at this position.\n         */\n        get: function () {\n            return this._loopEnd;\n        },\n        set: function (loopEnd) {\n            this._loopEnd = loopEnd;\n            if (this.buffer.loaded) {\n                assertRange(this.toSeconds(loopEnd), 0, this.buffer.duration);\n            }\n            // get the current source\n            this._activeSources.forEach(function (source) {\n                source.loopEnd = loopEnd;\n            });\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(Player.prototype, \"buffer\", {\n        /**\n         * The audio buffer belonging to the player.\n         */\n        get: function () {\n            return this._buffer;\n        },\n        set: function (buffer) {\n            this._buffer.set(buffer);\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(Player.prototype, \"loop\", {\n        /**\n         * If the buffer should loop once it's over.\n         */\n        get: function () {\n            return this._loop;\n        },\n        set: function (loop) {\n            // if no change, do nothing\n            if (this._loop === loop) {\n                return;\n            }\n            this._loop = loop;\n            // set the loop of all of the sources\n            this._activeSources.forEach(function (source) {\n                source.loop = loop;\n            });\n            if (loop) {\n                // remove the next stopEvent\n                var stopEvent = this._state.getNextState(\"stopped\", this.now());\n                if (stopEvent) {\n                    this._state.cancel(stopEvent.time);\n                }\n            }\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(Player.prototype, \"playbackRate\", {\n        /**\n         * The playback speed. 1 is normal speed. This is not a signal because\n         * Safari and iOS currently don't support playbackRate as a signal.\n         */\n        get: function () {\n            return this._playbackRate;\n        },\n        set: function (rate) {\n            this._playbackRate = rate;\n            var now = this.now();\n            // cancel the stop event since it's at a different time now\n            var stopEvent = this._state.getNextState(\"stopped\", now);\n            if (stopEvent && stopEvent.implicitEnd) {\n                this._state.cancel(stopEvent.time);\n                this._activeSources.forEach(function (source) { return source.cancelStop(); });\n            }\n            // set all the sources\n            this._activeSources.forEach(function (source) {\n                source.playbackRate.setValueAtTime(rate, now);\n            });\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(Player.prototype, \"reverse\", {\n        /**\n         * The direction the buffer should play in\n         */\n        get: function () {\n            return this._buffer.reverse;\n        },\n        set: function (rev) {\n            this._buffer.reverse = rev;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(Player.prototype, \"loaded\", {\n        /**\n         * If the buffer is loaded\n         */\n        get: function () {\n            return this._buffer.loaded;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Player.prototype.dispose = function () {\n        _super.prototype.dispose.call(this);\n        // disconnect all of the players\n        this._activeSources.forEach(function (source) { return source.dispose(); });\n        this._activeSources.clear();\n        this._buffer.dispose();\n        return this;\n    };\n    tslib_1.__decorate([\n        timeRange(0)\n    ], Player.prototype, \"fadeIn\", void 0);\n    tslib_1.__decorate([\n        timeRange(0)\n    ], Player.prototype, \"fadeOut\", void 0);\n    return Player;\n}(Source));\nexport { Player };\n//# sourceMappingURL=Player.js.map"]},"metadata":{},"sourceType":"module"}