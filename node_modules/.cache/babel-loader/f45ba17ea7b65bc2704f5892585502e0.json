{"ast":null,"code":"import * as tslib_1 from \"tslib\";\nimport { ToneWithContext } from \"../context/ToneWithContext\";\nimport { Timeline } from \"./Timeline\";\nimport { onContextClose, onContextInit } from \"../context/ContextInitialization\";\n/**\n * Draw is useful for synchronizing visuals and audio events.\n * Callbacks from Tone.Transport or any of the Tone.Event classes\n * always happen _before_ the scheduled time and are not synchronized\n * to the animation frame so they are not good for triggering tightly\n * synchronized visuals and sound. Draw makes it easy to schedule\n * callbacks using the AudioContext time and uses requestAnimationFrame.\n * @example\n * import { Draw, Transport } from \"tone\";\n * Transport.schedule((time) => {\n *  \t// use the time argument to schedule a callback with Draw\n *  \tDraw.schedule(() => {\n *  \t\t// do drawing or DOM manipulation here\n *  \t}, time);\n * }, \"+0.5\");\n * @category Core\n */\n\nvar Draw =\n/** @class */\nfunction (_super) {\n  tslib_1.__extends(Draw, _super);\n\n  function Draw() {\n    var _this = _super !== null && _super.apply(this, arguments) || this;\n\n    _this.name = \"Draw\";\n    /**\n     * The duration after which events are not invoked.\n     */\n\n    _this.expiration = 0.25;\n    /**\n     * The amount of time before the scheduled time\n     * that the callback can be invoked. Default is\n     * half the time of an animation frame (0.008 seconds).\n     */\n\n    _this.anticipation = 0.008;\n    /**\n     * All of the events.\n     */\n\n    _this._events = new Timeline();\n    /**\n     * The draw loop\n     */\n\n    _this._boundDrawLoop = _this._drawLoop.bind(_this);\n    /**\n     * The animation frame id\n     */\n\n    _this._animationFrame = -1;\n    return _this;\n  }\n  /**\n   * Schedule a function at the given time to be invoked\n   * on the nearest animation frame.\n   * @param  callback  Callback is invoked at the given time.\n   * @param  time      The time relative to the AudioContext time to invoke the callback.\n   */\n\n\n  Draw.prototype.schedule = function (callback, time) {\n    this._events.add({\n      callback: callback,\n      time: this.toSeconds(time)\n    }); // start the draw loop on the first event\n\n\n    if (this._events.length === 1) {\n      this._animationFrame = requestAnimationFrame(this._boundDrawLoop);\n    }\n\n    return this;\n  };\n  /**\n   * Cancel events scheduled after the given time\n   * @param  after  Time after which scheduled events will be removed from the scheduling timeline.\n   */\n\n\n  Draw.prototype.cancel = function (after) {\n    this._events.cancel(this.toSeconds(after));\n\n    return this;\n  };\n  /**\n   * The draw loop\n   */\n\n\n  Draw.prototype._drawLoop = function () {\n    var now = this.context.currentTime;\n\n    while (this._events.length && this._events.peek().time - this.anticipation <= now) {\n      var event_1 = this._events.shift();\n\n      if (event_1 && now - event_1.time <= this.expiration) {\n        event_1.callback();\n      }\n    }\n\n    if (this._events.length > 0) {\n      this._animationFrame = requestAnimationFrame(this._boundDrawLoop);\n    }\n  };\n\n  Draw.prototype.dispose = function () {\n    _super.prototype.dispose.call(this);\n\n    this._events.dispose();\n\n    cancelAnimationFrame(this._animationFrame);\n    return this;\n  };\n\n  return Draw;\n}(ToneWithContext);\n\nexport { Draw }; //-------------------------------------\n// \tINITIALIZATION\n//-------------------------------------\n\nonContextInit(function (context) {\n  context.draw = new Draw({\n    context: context\n  });\n});\nonContextClose(function (context) {\n  context.draw.dispose();\n});","map":{"version":3,"sources":["../../../../Tone/core/util/Draw.ts"],"names":[],"mappings":"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","sourceRoot":"","sourcesContent":["import * as tslib_1 from \"tslib\";\nimport { ToneWithContext } from \"../context/ToneWithContext\";\nimport { Timeline } from \"./Timeline\";\nimport { onContextClose, onContextInit } from \"../context/ContextInitialization\";\n/**\n * Draw is useful for synchronizing visuals and audio events.\n * Callbacks from Tone.Transport or any of the Tone.Event classes\n * always happen _before_ the scheduled time and are not synchronized\n * to the animation frame so they are not good for triggering tightly\n * synchronized visuals and sound. Draw makes it easy to schedule\n * callbacks using the AudioContext time and uses requestAnimationFrame.\n * @example\n * import { Draw, Transport } from \"tone\";\n * Transport.schedule((time) => {\n *  \t// use the time argument to schedule a callback with Draw\n *  \tDraw.schedule(() => {\n *  \t\t// do drawing or DOM manipulation here\n *  \t}, time);\n * }, \"+0.5\");\n * @category Core\n */\nvar Draw = /** @class */ (function (_super) {\n    tslib_1.__extends(Draw, _super);\n    function Draw() {\n        var _this = _super !== null && _super.apply(this, arguments) || this;\n        _this.name = \"Draw\";\n        /**\n         * The duration after which events are not invoked.\n         */\n        _this.expiration = 0.25;\n        /**\n         * The amount of time before the scheduled time\n         * that the callback can be invoked. Default is\n         * half the time of an animation frame (0.008 seconds).\n         */\n        _this.anticipation = 0.008;\n        /**\n         * All of the events.\n         */\n        _this._events = new Timeline();\n        /**\n         * The draw loop\n         */\n        _this._boundDrawLoop = _this._drawLoop.bind(_this);\n        /**\n         * The animation frame id\n         */\n        _this._animationFrame = -1;\n        return _this;\n    }\n    /**\n     * Schedule a function at the given time to be invoked\n     * on the nearest animation frame.\n     * @param  callback  Callback is invoked at the given time.\n     * @param  time      The time relative to the AudioContext time to invoke the callback.\n     */\n    Draw.prototype.schedule = function (callback, time) {\n        this._events.add({\n            callback: callback,\n            time: this.toSeconds(time),\n        });\n        // start the draw loop on the first event\n        if (this._events.length === 1) {\n            this._animationFrame = requestAnimationFrame(this._boundDrawLoop);\n        }\n        return this;\n    };\n    /**\n     * Cancel events scheduled after the given time\n     * @param  after  Time after which scheduled events will be removed from the scheduling timeline.\n     */\n    Draw.prototype.cancel = function (after) {\n        this._events.cancel(this.toSeconds(after));\n        return this;\n    };\n    /**\n     * The draw loop\n     */\n    Draw.prototype._drawLoop = function () {\n        var now = this.context.currentTime;\n        while (this._events.length && this._events.peek().time - this.anticipation <= now) {\n            var event_1 = this._events.shift();\n            if (event_1 && now - event_1.time <= this.expiration) {\n                event_1.callback();\n            }\n        }\n        if (this._events.length > 0) {\n            this._animationFrame = requestAnimationFrame(this._boundDrawLoop);\n        }\n    };\n    Draw.prototype.dispose = function () {\n        _super.prototype.dispose.call(this);\n        this._events.dispose();\n        cancelAnimationFrame(this._animationFrame);\n        return this;\n    };\n    return Draw;\n}(ToneWithContext));\nexport { Draw };\n//-------------------------------------\n// \tINITIALIZATION\n//-------------------------------------\nonContextInit(function (context) {\n    context.draw = new Draw({ context: context });\n});\nonContextClose(function (context) {\n    context.draw.dispose();\n});\n//# sourceMappingURL=Draw.js.map"]},"metadata":{},"sourceType":"module"}