{"ast":null,"code":"import * as tslib_1 from \"tslib\";\nimport { Param } from \"../../core/context/Param\";\nimport { ToneAudioNode } from \"../../core/context/ToneAudioNode\";\nimport { optionsFromArguments } from \"../../core/util/Defaults\";\nimport \"../../core/context/Listener\";\n/**\n * A spatialized panner node which supports equalpower or HRTF panning.\n * @category Component\n */\n\nvar Panner3D =\n/** @class */\nfunction (_super) {\n  tslib_1.__extends(Panner3D, _super);\n\n  function Panner3D() {\n    var _this = _super.call(this, optionsFromArguments(Panner3D.getDefaults(), arguments, [\"positionX\", \"positionY\", \"positionZ\"])) || this;\n\n    _this.name = \"Panner3D\";\n    var options = optionsFromArguments(Panner3D.getDefaults(), arguments, [\"positionX\", \"positionY\", \"positionZ\"]);\n    _this._panner = _this.input = _this.output = _this.context.createPanner(); // set some values\n\n    _this.panningModel = options.panningModel;\n    _this.maxDistance = options.maxDistance;\n    _this.distanceModel = options.distanceModel;\n    _this.coneOuterGain = options.coneOuterGain;\n    _this.coneOuterAngle = options.coneOuterAngle;\n    _this.coneInnerAngle = options.coneInnerAngle;\n    _this.refDistance = options.refDistance;\n    _this.rolloffFactor = options.rolloffFactor;\n    _this.positionX = new Param({\n      context: _this.context,\n      param: _this._panner.positionX,\n      value: options.positionX\n    });\n    _this.positionY = new Param({\n      context: _this.context,\n      param: _this._panner.positionY,\n      value: options.positionY\n    });\n    _this.positionZ = new Param({\n      context: _this.context,\n      param: _this._panner.positionZ,\n      value: options.positionZ\n    });\n    _this.orientationX = new Param({\n      context: _this.context,\n      param: _this._panner.orientationX,\n      value: options.orientationX\n    });\n    _this.orientationY = new Param({\n      context: _this.context,\n      param: _this._panner.orientationY,\n      value: options.orientationY\n    });\n    _this.orientationZ = new Param({\n      context: _this.context,\n      param: _this._panner.orientationZ,\n      value: options.orientationZ\n    });\n    return _this;\n  }\n\n  Panner3D.getDefaults = function () {\n    return Object.assign(ToneAudioNode.getDefaults(), {\n      coneInnerAngle: 360,\n      coneOuterAngle: 360,\n      coneOuterGain: 0,\n      distanceModel: \"inverse\",\n      maxDistance: 10000,\n      orientationX: 0,\n      orientationY: 0,\n      orientationZ: 0,\n      panningModel: \"equalpower\",\n      positionX: 0,\n      positionY: 0,\n      positionZ: 0,\n      refDistance: 1,\n      rolloffFactor: 1\n    });\n  };\n  /**\n   * Sets the position of the source in 3d space.\n   */\n\n\n  Panner3D.prototype.setPosition = function (x, y, z) {\n    this.positionX.value = x;\n    this.positionY.value = y;\n    this.positionZ.value = z;\n    return this;\n  };\n  /**\n   * Sets the orientation of the source in 3d space.\n   */\n\n\n  Panner3D.prototype.setOrientation = function (x, y, z) {\n    this.orientationX.value = x;\n    this.orientationY.value = y;\n    this.orientationZ.value = z;\n    return this;\n  };\n\n  Object.defineProperty(Panner3D.prototype, \"panningModel\", {\n    /**\n     * The panning model. Either \"equalpower\" or \"HRTF\".\n     */\n    get: function () {\n      return this._panner.panningModel;\n    },\n    set: function (val) {\n      this._panner.panningModel = val;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(Panner3D.prototype, \"refDistance\", {\n    /**\n     * A reference distance for reducing volume as source move further from the listener\n     */\n    get: function () {\n      return this._panner.refDistance;\n    },\n    set: function (val) {\n      this._panner.refDistance = val;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(Panner3D.prototype, \"rolloffFactor\", {\n    /**\n     * Describes how quickly the volume is reduced as source moves away from listener.\n     */\n    get: function () {\n      return this._panner.rolloffFactor;\n    },\n    set: function (val) {\n      this._panner.rolloffFactor = val;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(Panner3D.prototype, \"distanceModel\", {\n    /**\n     * The distance model used by,  \"linear\", \"inverse\", or \"exponential\".\n     */\n    get: function () {\n      return this._panner.distanceModel;\n    },\n    set: function (val) {\n      this._panner.distanceModel = val;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(Panner3D.prototype, \"coneInnerAngle\", {\n    /**\n     * The angle, in degrees, inside of which there will be no volume reduction\n     */\n    get: function () {\n      return this._panner.coneInnerAngle;\n    },\n    set: function (val) {\n      this._panner.coneInnerAngle = val;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(Panner3D.prototype, \"coneOuterAngle\", {\n    /**\n     * The angle, in degrees, outside of which the volume will be reduced\n     * to a constant value of coneOuterGain\n     */\n    get: function () {\n      return this._panner.coneOuterAngle;\n    },\n    set: function (val) {\n      this._panner.coneOuterAngle = val;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(Panner3D.prototype, \"coneOuterGain\", {\n    /**\n     * The gain outside of the coneOuterAngle\n     */\n    get: function () {\n      return this._panner.coneOuterGain;\n    },\n    set: function (val) {\n      this._panner.coneOuterGain = val;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(Panner3D.prototype, \"maxDistance\", {\n    /**\n     * The maximum distance between source and listener,\n     * after which the volume will not be reduced any further.\n     */\n    get: function () {\n      return this._panner.maxDistance;\n    },\n    set: function (val) {\n      this._panner.maxDistance = val;\n    },\n    enumerable: true,\n    configurable: true\n  });\n\n  Panner3D.prototype.dispose = function () {\n    _super.prototype.dispose.call(this);\n\n    this._panner.disconnect();\n\n    this.orientationX.dispose();\n    this.orientationY.dispose();\n    this.orientationZ.dispose();\n    this.positionX.dispose();\n    this.positionY.dispose();\n    this.positionZ.dispose();\n    return this;\n  };\n\n  return Panner3D;\n}(ToneAudioNode);\n\nexport { Panner3D };","map":{"version":3,"sources":["../../../../Tone/component/channel/Panner3D.ts"],"names":[],"mappings":"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","sourceRoot":"","sourcesContent":["import * as tslib_1 from \"tslib\";\nimport { Param } from \"../../core/context/Param\";\nimport { ToneAudioNode } from \"../../core/context/ToneAudioNode\";\nimport { optionsFromArguments } from \"../../core/util/Defaults\";\nimport \"../../core/context/Listener\";\n/**\n * A spatialized panner node which supports equalpower or HRTF panning.\n * @category Component\n */\nvar Panner3D = /** @class */ (function (_super) {\n    tslib_1.__extends(Panner3D, _super);\n    function Panner3D() {\n        var _this = _super.call(this, optionsFromArguments(Panner3D.getDefaults(), arguments, [\"positionX\", \"positionY\", \"positionZ\"])) || this;\n        _this.name = \"Panner3D\";\n        var options = optionsFromArguments(Panner3D.getDefaults(), arguments, [\"positionX\", \"positionY\", \"positionZ\"]);\n        _this._panner = _this.input = _this.output = _this.context.createPanner();\n        // set some values\n        _this.panningModel = options.panningModel;\n        _this.maxDistance = options.maxDistance;\n        _this.distanceModel = options.distanceModel;\n        _this.coneOuterGain = options.coneOuterGain;\n        _this.coneOuterAngle = options.coneOuterAngle;\n        _this.coneInnerAngle = options.coneInnerAngle;\n        _this.refDistance = options.refDistance;\n        _this.rolloffFactor = options.rolloffFactor;\n        _this.positionX = new Param({\n            context: _this.context,\n            param: _this._panner.positionX,\n            value: options.positionX,\n        });\n        _this.positionY = new Param({\n            context: _this.context,\n            param: _this._panner.positionY,\n            value: options.positionY,\n        });\n        _this.positionZ = new Param({\n            context: _this.context,\n            param: _this._panner.positionZ,\n            value: options.positionZ,\n        });\n        _this.orientationX = new Param({\n            context: _this.context,\n            param: _this._panner.orientationX,\n            value: options.orientationX,\n        });\n        _this.orientationY = new Param({\n            context: _this.context,\n            param: _this._panner.orientationY,\n            value: options.orientationY,\n        });\n        _this.orientationZ = new Param({\n            context: _this.context,\n            param: _this._panner.orientationZ,\n            value: options.orientationZ,\n        });\n        return _this;\n    }\n    Panner3D.getDefaults = function () {\n        return Object.assign(ToneAudioNode.getDefaults(), {\n            coneInnerAngle: 360,\n            coneOuterAngle: 360,\n            coneOuterGain: 0,\n            distanceModel: \"inverse\",\n            maxDistance: 10000,\n            orientationX: 0,\n            orientationY: 0,\n            orientationZ: 0,\n            panningModel: \"equalpower\",\n            positionX: 0,\n            positionY: 0,\n            positionZ: 0,\n            refDistance: 1,\n            rolloffFactor: 1,\n        });\n    };\n    /**\n     * Sets the position of the source in 3d space.\n     */\n    Panner3D.prototype.setPosition = function (x, y, z) {\n        this.positionX.value = x;\n        this.positionY.value = y;\n        this.positionZ.value = z;\n        return this;\n    };\n    /**\n     * Sets the orientation of the source in 3d space.\n     */\n    Panner3D.prototype.setOrientation = function (x, y, z) {\n        this.orientationX.value = x;\n        this.orientationY.value = y;\n        this.orientationZ.value = z;\n        return this;\n    };\n    Object.defineProperty(Panner3D.prototype, \"panningModel\", {\n        /**\n         * The panning model. Either \"equalpower\" or \"HRTF\".\n         */\n        get: function () {\n            return this._panner.panningModel;\n        },\n        set: function (val) {\n            this._panner.panningModel = val;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(Panner3D.prototype, \"refDistance\", {\n        /**\n         * A reference distance for reducing volume as source move further from the listener\n         */\n        get: function () {\n            return this._panner.refDistance;\n        },\n        set: function (val) {\n            this._panner.refDistance = val;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(Panner3D.prototype, \"rolloffFactor\", {\n        /**\n         * Describes how quickly the volume is reduced as source moves away from listener.\n         */\n        get: function () {\n            return this._panner.rolloffFactor;\n        },\n        set: function (val) {\n            this._panner.rolloffFactor = val;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(Panner3D.prototype, \"distanceModel\", {\n        /**\n         * The distance model used by,  \"linear\", \"inverse\", or \"exponential\".\n         */\n        get: function () {\n            return this._panner.distanceModel;\n        },\n        set: function (val) {\n            this._panner.distanceModel = val;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(Panner3D.prototype, \"coneInnerAngle\", {\n        /**\n         * The angle, in degrees, inside of which there will be no volume reduction\n         */\n        get: function () {\n            return this._panner.coneInnerAngle;\n        },\n        set: function (val) {\n            this._panner.coneInnerAngle = val;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(Panner3D.prototype, \"coneOuterAngle\", {\n        /**\n         * The angle, in degrees, outside of which the volume will be reduced\n         * to a constant value of coneOuterGain\n         */\n        get: function () {\n            return this._panner.coneOuterAngle;\n        },\n        set: function (val) {\n            this._panner.coneOuterAngle = val;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(Panner3D.prototype, \"coneOuterGain\", {\n        /**\n         * The gain outside of the coneOuterAngle\n         */\n        get: function () {\n            return this._panner.coneOuterGain;\n        },\n        set: function (val) {\n            this._panner.coneOuterGain = val;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(Panner3D.prototype, \"maxDistance\", {\n        /**\n         * The maximum distance between source and listener,\n         * after which the volume will not be reduced any further.\n         */\n        get: function () {\n            return this._panner.maxDistance;\n        },\n        set: function (val) {\n            this._panner.maxDistance = val;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Panner3D.prototype.dispose = function () {\n        _super.prototype.dispose.call(this);\n        this._panner.disconnect();\n        this.orientationX.dispose();\n        this.orientationY.dispose();\n        this.orientationZ.dispose();\n        this.positionX.dispose();\n        this.positionY.dispose();\n        this.positionZ.dispose();\n        return this;\n    };\n    return Panner3D;\n}(ToneAudioNode));\nexport { Panner3D };\n//# sourceMappingURL=Panner3D.js.map"]},"metadata":{},"sourceType":"module"}