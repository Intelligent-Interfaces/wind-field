{"ast":null,"code":"import * as tslib_1 from \"tslib\";\nimport { ToneAudioNode } from \"../../core/context/ToneAudioNode\";\nimport { ToneAudioBuffer } from \"../../core/context/ToneAudioBuffer\";\nimport { optionsFromArguments } from \"../../core/util/Defaults\";\nimport { Gain } from \"../../core/context/Gain\";\nimport { noOp } from \"../../core/util/Interface\";\n/**\n * Convolver is a wrapper around the Native Web Audio\n * [ConvolverNode](http://webaudio.github.io/web-audio-api/#the-convolvernode-interface).\n * Convolution is useful for reverb and filter emulation. Read more about convolution reverb on\n * [Wikipedia](https://en.wikipedia.org/wiki/Convolution_reverb).\n *\n * @example\n * import { Convolver } from \"tone\";\n * // initializing the convolver with an impulse response\n * const convolver = new Convolver(\"./path/to/ir.wav\").toDestination();\n * @category Component\n */\n\nvar Convolver =\n/** @class */\nfunction (_super) {\n  tslib_1.__extends(Convolver, _super);\n\n  function Convolver() {\n    var _this = _super.call(this, optionsFromArguments(Convolver.getDefaults(), arguments, [\"url\", \"onload\"])) || this;\n\n    _this.name = \"Convolver\";\n    /**\n     * The native ConvolverNode\n     */\n\n    _this._convolver = _this.context.createConvolver();\n    var options = optionsFromArguments(Convolver.getDefaults(), arguments, [\"url\", \"onload\"]);\n    _this._buffer = new ToneAudioBuffer(options.url, function (buffer) {\n      _this.buffer = buffer;\n      options.onload();\n    });\n    _this.input = new Gain({\n      context: _this.context\n    });\n    _this.output = new Gain({\n      context: _this.context\n    }); // set if it's already loaded, set it immediately\n\n    if (_this._buffer.loaded) {\n      _this.buffer = _this._buffer;\n    } // initially set normalization\n\n\n    _this.normalize = options.normalize; // connect it up\n\n    _this.input.chain(_this._convolver, _this.output);\n\n    return _this;\n  }\n\n  Convolver.getDefaults = function () {\n    return Object.assign(ToneAudioNode.getDefaults(), {\n      normalize: true,\n      onload: noOp\n    });\n  };\n  /**\n   * Load an impulse response url as an audio buffer.\n   * Decodes the audio asynchronously and invokes\n   * the callback once the audio buffer loads.\n   * @param url The url of the buffer to load. filetype support depends on the browser.\n   */\n\n\n  Convolver.prototype.load = function (url) {\n    return tslib_1.__awaiter(this, void 0, void 0, function () {\n      var _a;\n\n      return tslib_1.__generator(this, function (_b) {\n        switch (_b.label) {\n          case 0:\n            _a = this;\n            return [4\n            /*yield*/\n            , this._buffer.load(url)];\n\n          case 1:\n            _a.buffer = _b.sent();\n            return [2\n            /*return*/\n            ];\n        }\n      });\n    });\n  };\n\n  Object.defineProperty(Convolver.prototype, \"buffer\", {\n    /**\n     * The convolver's buffer\n     */\n    get: function () {\n      if (this._buffer.length) {\n        return this._buffer;\n      } else {\n        return null;\n      }\n    },\n    set: function (buffer) {\n      if (buffer) {\n        this._buffer.set(buffer);\n      } // if it's already got a buffer, create a new one\n\n\n      if (this._convolver.buffer) {\n        // disconnect the old one\n        this.input.disconnect();\n\n        this._convolver.disconnect(); // create and connect a new one\n\n\n        this._convolver = this.context.createConvolver();\n        this.input.connect(this._convolver);\n      }\n\n      var buff = this._buffer.get();\n\n      this._convolver.buffer = buff ? buff : null;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(Convolver.prototype, \"normalize\", {\n    /**\n     * The normalize property of the ConvolverNode interface is a boolean that\n     * controls whether the impulse response from the buffer will be scaled by\n     * an equal-power normalization when the buffer attribute is set, or not.\n     */\n    get: function () {\n      return this._convolver.normalize;\n    },\n    set: function (norm) {\n      this._convolver.normalize = norm;\n    },\n    enumerable: true,\n    configurable: true\n  });\n\n  Convolver.prototype.dispose = function () {\n    _super.prototype.dispose.call(this);\n\n    this._buffer.dispose();\n\n    this._convolver.disconnect();\n\n    return this;\n  };\n\n  return Convolver;\n}(ToneAudioNode);\n\nexport { Convolver };","map":{"version":3,"sources":["../../../../Tone/component/filter/Convolver.ts"],"names":[],"mappings":"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","sourceRoot":"","sourcesContent":["import * as tslib_1 from \"tslib\";\nimport { ToneAudioNode } from \"../../core/context/ToneAudioNode\";\nimport { ToneAudioBuffer } from \"../../core/context/ToneAudioBuffer\";\nimport { optionsFromArguments } from \"../../core/util/Defaults\";\nimport { Gain } from \"../../core/context/Gain\";\nimport { noOp } from \"../../core/util/Interface\";\n/**\n * Convolver is a wrapper around the Native Web Audio\n * [ConvolverNode](http://webaudio.github.io/web-audio-api/#the-convolvernode-interface).\n * Convolution is useful for reverb and filter emulation. Read more about convolution reverb on\n * [Wikipedia](https://en.wikipedia.org/wiki/Convolution_reverb).\n *\n * @example\n * import { Convolver } from \"tone\";\n * // initializing the convolver with an impulse response\n * const convolver = new Convolver(\"./path/to/ir.wav\").toDestination();\n * @category Component\n */\nvar Convolver = /** @class */ (function (_super) {\n    tslib_1.__extends(Convolver, _super);\n    function Convolver() {\n        var _this = _super.call(this, optionsFromArguments(Convolver.getDefaults(), arguments, [\"url\", \"onload\"])) || this;\n        _this.name = \"Convolver\";\n        /**\n         * The native ConvolverNode\n         */\n        _this._convolver = _this.context.createConvolver();\n        var options = optionsFromArguments(Convolver.getDefaults(), arguments, [\"url\", \"onload\"]);\n        _this._buffer = new ToneAudioBuffer(options.url, function (buffer) {\n            _this.buffer = buffer;\n            options.onload();\n        });\n        _this.input = new Gain({ context: _this.context });\n        _this.output = new Gain({ context: _this.context });\n        // set if it's already loaded, set it immediately\n        if (_this._buffer.loaded) {\n            _this.buffer = _this._buffer;\n        }\n        // initially set normalization\n        _this.normalize = options.normalize;\n        // connect it up\n        _this.input.chain(_this._convolver, _this.output);\n        return _this;\n    }\n    Convolver.getDefaults = function () {\n        return Object.assign(ToneAudioNode.getDefaults(), {\n            normalize: true,\n            onload: noOp,\n        });\n    };\n    /**\n     * Load an impulse response url as an audio buffer.\n     * Decodes the audio asynchronously and invokes\n     * the callback once the audio buffer loads.\n     * @param url The url of the buffer to load. filetype support depends on the browser.\n     */\n    Convolver.prototype.load = function (url) {\n        return tslib_1.__awaiter(this, void 0, void 0, function () {\n            var _a;\n            return tslib_1.__generator(this, function (_b) {\n                switch (_b.label) {\n                    case 0:\n                        _a = this;\n                        return [4 /*yield*/, this._buffer.load(url)];\n                    case 1:\n                        _a.buffer = _b.sent();\n                        return [2 /*return*/];\n                }\n            });\n        });\n    };\n    Object.defineProperty(Convolver.prototype, \"buffer\", {\n        /**\n         * The convolver's buffer\n         */\n        get: function () {\n            if (this._buffer.length) {\n                return this._buffer;\n            }\n            else {\n                return null;\n            }\n        },\n        set: function (buffer) {\n            if (buffer) {\n                this._buffer.set(buffer);\n            }\n            // if it's already got a buffer, create a new one\n            if (this._convolver.buffer) {\n                // disconnect the old one\n                this.input.disconnect();\n                this._convolver.disconnect();\n                // create and connect a new one\n                this._convolver = this.context.createConvolver();\n                this.input.connect(this._convolver);\n            }\n            var buff = this._buffer.get();\n            this._convolver.buffer = buff ? buff : null;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(Convolver.prototype, \"normalize\", {\n        /**\n         * The normalize property of the ConvolverNode interface is a boolean that\n         * controls whether the impulse response from the buffer will be scaled by\n         * an equal-power normalization when the buffer attribute is set, or not.\n         */\n        get: function () {\n            return this._convolver.normalize;\n        },\n        set: function (norm) {\n            this._convolver.normalize = norm;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Convolver.prototype.dispose = function () {\n        _super.prototype.dispose.call(this);\n        this._buffer.dispose();\n        this._convolver.disconnect();\n        return this;\n    };\n    return Convolver;\n}(ToneAudioNode));\nexport { Convolver };\n//# sourceMappingURL=Convolver.js.map"]},"metadata":{},"sourceType":"module"}