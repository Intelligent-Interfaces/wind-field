{"ast":null,"code":"import * as tslib_1 from \"tslib\";\nimport { StereoEffect } from \"./StereoEffect\";\nimport { optionsFromArguments } from \"../core/util/Defaults\";\nimport { readOnly } from \"../core/util/Interface\";\nimport { Signal } from \"../signal/Signal\";\nimport { LowpassCombFilter } from \"../component/filter/LowpassCombFilter\";\n/**\n * An array of comb filter delay values from Freeverb implementation\n */\n\nvar combFilterTunings = [1557 / 44100, 1617 / 44100, 1491 / 44100, 1422 / 44100, 1277 / 44100, 1356 / 44100, 1188 / 44100, 1116 / 44100];\n/**\n * An array of allpass filter frequency values from Freeverb implementation\n */\n\nvar allpassFilterFrequencies = [225, 556, 441, 341];\n/**\n * Freeverb is a reverb based on [Freeverb](https://ccrma.stanford.edu/~jos/pasp/Freeverb.html).\n * Read more on reverb on [Sound On Sound](https://web.archive.org/web/20160404083902/http://www.soundonsound.com:80/sos/feb01/articles/synthsecrets.asp).\n * Freeverb is now implemented with an AudioWorkletNode which may result on performance degradation on some platforms\n * @example\n * import { Freeverb, NoiseSynth } from \"tone\";\n * const freeverb = new Freeverb().toDestination();\n * freeverb.dampening = 1000;\n * // routing synth through the reverb\n * const synth = new NoiseSynth().connect(freeverb);\n * synth.triggerAttackRelease(0.05);\n * @category Effect\n */\n\nvar Freeverb =\n/** @class */\nfunction (_super) {\n  tslib_1.__extends(Freeverb, _super);\n\n  function Freeverb() {\n    var _this = _super.call(this, optionsFromArguments(Freeverb.getDefaults(), arguments, [\"roomSize\", \"dampening\"])) || this;\n\n    _this.name = \"Freeverb\";\n    /**\n     * the comb filters\n     */\n\n    _this._combFilters = [];\n    /**\n     * the allpass filters on the left\n     */\n\n    _this._allpassFiltersL = [];\n    /**\n     * the allpass filters on the right\n     */\n\n    _this._allpassFiltersR = [];\n    var options = optionsFromArguments(Freeverb.getDefaults(), arguments, [\"roomSize\", \"dampening\"]);\n    _this.roomSize = new Signal({\n      context: _this.context,\n      value: options.roomSize,\n      units: \"normalRange\"\n    }); // make the allpass filters on the right\n\n    _this._allpassFiltersL = allpassFilterFrequencies.map(function (freq) {\n      var allpassL = _this.context.createBiquadFilter();\n\n      allpassL.type = \"allpass\";\n      allpassL.frequency.value = freq;\n      return allpassL;\n    }); // make the allpass filters on the left\n\n    _this._allpassFiltersR = allpassFilterFrequencies.map(function (freq) {\n      var allpassR = _this.context.createBiquadFilter();\n\n      allpassR.type = \"allpass\";\n      allpassR.frequency.value = freq;\n      return allpassR;\n    }); // make the comb filters\n\n    _this._combFilters = combFilterTunings.map(function (delayTime, index) {\n      var lfpf = new LowpassCombFilter({\n        context: _this.context,\n        dampening: options.dampening,\n        delayTime: delayTime\n      });\n\n      if (index < combFilterTunings.length / 2) {\n        _this.connectEffectLeft.apply(_this, tslib_1.__spread([lfpf], _this._allpassFiltersL));\n      } else {\n        _this.connectEffectRight.apply(_this, tslib_1.__spread([lfpf], _this._allpassFiltersR));\n      }\n\n      _this.roomSize.connect(lfpf.resonance);\n\n      return lfpf;\n    });\n    readOnly(_this, [\"roomSize\"]);\n    return _this;\n  }\n\n  Freeverb.getDefaults = function () {\n    return Object.assign(StereoEffect.getDefaults(), {\n      roomSize: 0.7,\n      dampening: 3000\n    });\n  };\n\n  Object.defineProperty(Freeverb.prototype, \"dampening\", {\n    /**\n     * The amount of dampening of the reverberant signal.\n     */\n    get: function () {\n      return this._combFilters[0].dampening;\n    },\n    set: function (d) {\n      this._combFilters.forEach(function (c) {\n        return c.dampening = d;\n      });\n    },\n    enumerable: true,\n    configurable: true\n  });\n\n  Freeverb.prototype.dispose = function () {\n    _super.prototype.dispose.call(this);\n\n    this._allpassFiltersL.forEach(function (al) {\n      return al.disconnect();\n    });\n\n    this._allpassFiltersR.forEach(function (ar) {\n      return ar.disconnect();\n    });\n\n    this._combFilters.forEach(function (cf) {\n      return cf.dispose();\n    });\n\n    this.roomSize.dispose();\n    return this;\n  };\n\n  return Freeverb;\n}(StereoEffect);\n\nexport { Freeverb };","map":{"version":3,"sources":["../../../Tone/effect/Freeverb.ts"],"names":[],"mappings":"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","sourceRoot":"","sourcesContent":["import * as tslib_1 from \"tslib\";\nimport { StereoEffect } from \"./StereoEffect\";\nimport { optionsFromArguments } from \"../core/util/Defaults\";\nimport { readOnly } from \"../core/util/Interface\";\nimport { Signal } from \"../signal/Signal\";\nimport { LowpassCombFilter } from \"../component/filter/LowpassCombFilter\";\n/**\n * An array of comb filter delay values from Freeverb implementation\n */\nvar combFilterTunings = [1557 / 44100, 1617 / 44100, 1491 / 44100, 1422 / 44100, 1277 / 44100, 1356 / 44100, 1188 / 44100, 1116 / 44100];\n/**\n * An array of allpass filter frequency values from Freeverb implementation\n */\nvar allpassFilterFrequencies = [225, 556, 441, 341];\n/**\n * Freeverb is a reverb based on [Freeverb](https://ccrma.stanford.edu/~jos/pasp/Freeverb.html).\n * Read more on reverb on [Sound On Sound](https://web.archive.org/web/20160404083902/http://www.soundonsound.com:80/sos/feb01/articles/synthsecrets.asp).\n * Freeverb is now implemented with an AudioWorkletNode which may result on performance degradation on some platforms\n * @example\n * import { Freeverb, NoiseSynth } from \"tone\";\n * const freeverb = new Freeverb().toDestination();\n * freeverb.dampening = 1000;\n * // routing synth through the reverb\n * const synth = new NoiseSynth().connect(freeverb);\n * synth.triggerAttackRelease(0.05);\n * @category Effect\n */\nvar Freeverb = /** @class */ (function (_super) {\n    tslib_1.__extends(Freeverb, _super);\n    function Freeverb() {\n        var _this = _super.call(this, optionsFromArguments(Freeverb.getDefaults(), arguments, [\"roomSize\", \"dampening\"])) || this;\n        _this.name = \"Freeverb\";\n        /**\n         * the comb filters\n         */\n        _this._combFilters = [];\n        /**\n         * the allpass filters on the left\n         */\n        _this._allpassFiltersL = [];\n        /**\n         * the allpass filters on the right\n         */\n        _this._allpassFiltersR = [];\n        var options = optionsFromArguments(Freeverb.getDefaults(), arguments, [\"roomSize\", \"dampening\"]);\n        _this.roomSize = new Signal({\n            context: _this.context,\n            value: options.roomSize,\n            units: \"normalRange\",\n        });\n        // make the allpass filters on the right\n        _this._allpassFiltersL = allpassFilterFrequencies.map(function (freq) {\n            var allpassL = _this.context.createBiquadFilter();\n            allpassL.type = \"allpass\";\n            allpassL.frequency.value = freq;\n            return allpassL;\n        });\n        // make the allpass filters on the left\n        _this._allpassFiltersR = allpassFilterFrequencies.map(function (freq) {\n            var allpassR = _this.context.createBiquadFilter();\n            allpassR.type = \"allpass\";\n            allpassR.frequency.value = freq;\n            return allpassR;\n        });\n        // make the comb filters\n        _this._combFilters = combFilterTunings.map(function (delayTime, index) {\n            var lfpf = new LowpassCombFilter({\n                context: _this.context,\n                dampening: options.dampening,\n                delayTime: delayTime,\n            });\n            if (index < combFilterTunings.length / 2) {\n                _this.connectEffectLeft.apply(_this, tslib_1.__spread([lfpf], _this._allpassFiltersL));\n            }\n            else {\n                _this.connectEffectRight.apply(_this, tslib_1.__spread([lfpf], _this._allpassFiltersR));\n            }\n            _this.roomSize.connect(lfpf.resonance);\n            return lfpf;\n        });\n        readOnly(_this, [\"roomSize\"]);\n        return _this;\n    }\n    Freeverb.getDefaults = function () {\n        return Object.assign(StereoEffect.getDefaults(), {\n            roomSize: 0.7,\n            dampening: 3000\n        });\n    };\n    Object.defineProperty(Freeverb.prototype, \"dampening\", {\n        /**\n         * The amount of dampening of the reverberant signal.\n         */\n        get: function () {\n            return this._combFilters[0].dampening;\n        },\n        set: function (d) {\n            this._combFilters.forEach(function (c) { return c.dampening = d; });\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Freeverb.prototype.dispose = function () {\n        _super.prototype.dispose.call(this);\n        this._allpassFiltersL.forEach(function (al) { return al.disconnect(); });\n        this._allpassFiltersR.forEach(function (ar) { return ar.disconnect(); });\n        this._combFilters.forEach(function (cf) { return cf.dispose(); });\n        this.roomSize.dispose();\n        return this;\n    };\n    return Freeverb;\n}(StereoEffect));\nexport { Freeverb };\n//# sourceMappingURL=Freeverb.js.map"]},"metadata":{},"sourceType":"module"}