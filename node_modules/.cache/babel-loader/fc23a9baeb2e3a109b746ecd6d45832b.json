{"ast":null,"code":"import * as tslib_1 from \"tslib\";\nimport { optionsFromArguments } from \"../../core/util/Defaults\";\nimport { readOnly } from \"../../core/util/Interface\";\nimport { Multiply } from \"../../signal/Multiply\";\nimport { Source } from \"../Source\";\nimport { Oscillator } from \"./Oscillator\";\nimport { generateWaveform } from \"./OscillatorInterface\";\nimport { PulseOscillator } from \"./PulseOscillator\";\n/**\n * PWMOscillator modulates the width of a Tone.PulseOscillator\n * at the modulationFrequency. This has the effect of continuously\n * changing the timbre of the oscillator by altering the harmonics\n * generated.\n * @example\n * import { PWMOscillator } from \"tone\";\n * const pwm = new PWMOscillator(\"Ab3\", 0.3).toDestination().start();\n * @category Source\n */\n\nvar PWMOscillator =\n/** @class */\nfunction (_super) {\n  tslib_1.__extends(PWMOscillator, _super);\n\n  function PWMOscillator() {\n    var _this = _super.call(this, optionsFromArguments(PWMOscillator.getDefaults(), arguments, [\"frequency\", \"modulationFrequency\"])) || this;\n\n    _this.name = \"PWMOscillator\";\n    _this.sourceType = \"pwm\";\n    /**\n     * Scale the oscillator so it doesn't go silent\n     * at the extreme values.\n     */\n\n    _this._scale = new Multiply({\n      context: _this.context,\n      value: 2\n    });\n    var options = optionsFromArguments(PWMOscillator.getDefaults(), arguments, [\"frequency\", \"modulationFrequency\"]);\n    _this._pulse = new PulseOscillator({\n      context: _this.context,\n      frequency: options.modulationFrequency\n    }); // change the pulse oscillator type\n    // @ts-ignore\n\n    _this._pulse._sawtooth.type = \"sine\";\n    _this.modulationFrequency = _this._pulse.frequency;\n    _this._modulator = new Oscillator({\n      context: _this.context,\n      detune: options.detune,\n      frequency: options.frequency,\n      onstop: function () {\n        return _this.onstop(_this);\n      },\n      phase: options.phase\n    });\n    _this.frequency = _this._modulator.frequency;\n    _this.detune = _this._modulator.detune; // connections\n\n    _this._modulator.chain(_this._scale, _this._pulse.width);\n\n    _this._pulse.connect(_this.output);\n\n    readOnly(_this, [\"modulationFrequency\", \"frequency\", \"detune\"]);\n    return _this;\n  }\n\n  PWMOscillator.getDefaults = function () {\n    return Object.assign(Source.getDefaults(), {\n      detune: 0,\n      frequency: 440,\n      modulationFrequency: 0.4,\n      phase: 0,\n      type: \"pwm\"\n    });\n  };\n  /**\n   * start the oscillator\n   */\n\n\n  PWMOscillator.prototype._start = function (time) {\n    time = this.toSeconds(time);\n\n    this._modulator.start(time);\n\n    this._pulse.start(time);\n  };\n  /**\n   * stop the oscillator\n   */\n\n\n  PWMOscillator.prototype._stop = function (time) {\n    time = this.toSeconds(time);\n\n    this._modulator.stop(time);\n\n    this._pulse.stop(time);\n  };\n  /**\n   * restart the oscillator\n   */\n\n\n  PWMOscillator.prototype._restart = function (time) {\n    this._modulator.restart(time);\n\n    this._pulse.restart(time);\n  };\n\n  Object.defineProperty(PWMOscillator.prototype, \"type\", {\n    /**\n     * The type of the oscillator. Always returns \"pwm\".\n     */\n    get: function () {\n      return \"pwm\";\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(PWMOscillator.prototype, \"baseType\", {\n    /**\n     * The baseType of the oscillator. Always returns \"pwm\".\n     */\n    get: function () {\n      return \"pwm\";\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(PWMOscillator.prototype, \"partials\", {\n    /**\n     * The partials of the waveform. Cannot set partials for this waveform type\n     */\n    get: function () {\n      return [];\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(PWMOscillator.prototype, \"partialCount\", {\n    /**\n     * No partials for this waveform type.\n     */\n    get: function () {\n      return 0;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(PWMOscillator.prototype, \"phase\", {\n    /**\n     * The phase of the oscillator in degrees.\n     */\n    get: function () {\n      return this._modulator.phase;\n    },\n    set: function (phase) {\n      this._modulator.phase = phase;\n    },\n    enumerable: true,\n    configurable: true\n  });\n\n  PWMOscillator.prototype.asArray = function (length) {\n    if (length === void 0) {\n      length = 1024;\n    }\n\n    return tslib_1.__awaiter(this, void 0, void 0, function () {\n      return tslib_1.__generator(this, function (_a) {\n        return [2\n        /*return*/\n        , generateWaveform(this, length)];\n      });\n    });\n  };\n  /**\n   * Clean up.\n   */\n\n\n  PWMOscillator.prototype.dispose = function () {\n    _super.prototype.dispose.call(this);\n\n    this._pulse.dispose();\n\n    this._scale.dispose();\n\n    this._modulator.dispose();\n\n    return this;\n  };\n\n  return PWMOscillator;\n}(Source);\n\nexport { PWMOscillator };","map":{"version":3,"sources":["../../../../Tone/source/oscillator/PWMOscillator.ts"],"names":[],"mappings":"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","sourceRoot":"","sourcesContent":["import * as tslib_1 from \"tslib\";\nimport { optionsFromArguments } from \"../../core/util/Defaults\";\nimport { readOnly } from \"../../core/util/Interface\";\nimport { Multiply } from \"../../signal/Multiply\";\nimport { Source } from \"../Source\";\nimport { Oscillator } from \"./Oscillator\";\nimport { generateWaveform } from \"./OscillatorInterface\";\nimport { PulseOscillator } from \"./PulseOscillator\";\n/**\n * PWMOscillator modulates the width of a Tone.PulseOscillator\n * at the modulationFrequency. This has the effect of continuously\n * changing the timbre of the oscillator by altering the harmonics\n * generated.\n * @example\n * import { PWMOscillator } from \"tone\";\n * const pwm = new PWMOscillator(\"Ab3\", 0.3).toDestination().start();\n * @category Source\n */\nvar PWMOscillator = /** @class */ (function (_super) {\n    tslib_1.__extends(PWMOscillator, _super);\n    function PWMOscillator() {\n        var _this = _super.call(this, optionsFromArguments(PWMOscillator.getDefaults(), arguments, [\"frequency\", \"modulationFrequency\"])) || this;\n        _this.name = \"PWMOscillator\";\n        _this.sourceType = \"pwm\";\n        /**\n         * Scale the oscillator so it doesn't go silent\n         * at the extreme values.\n         */\n        _this._scale = new Multiply({\n            context: _this.context,\n            value: 2,\n        });\n        var options = optionsFromArguments(PWMOscillator.getDefaults(), arguments, [\"frequency\", \"modulationFrequency\"]);\n        _this._pulse = new PulseOscillator({\n            context: _this.context,\n            frequency: options.modulationFrequency,\n        });\n        // change the pulse oscillator type\n        // @ts-ignore\n        _this._pulse._sawtooth.type = \"sine\";\n        _this.modulationFrequency = _this._pulse.frequency;\n        _this._modulator = new Oscillator({\n            context: _this.context,\n            detune: options.detune,\n            frequency: options.frequency,\n            onstop: function () { return _this.onstop(_this); },\n            phase: options.phase,\n        });\n        _this.frequency = _this._modulator.frequency;\n        _this.detune = _this._modulator.detune;\n        // connections\n        _this._modulator.chain(_this._scale, _this._pulse.width);\n        _this._pulse.connect(_this.output);\n        readOnly(_this, [\"modulationFrequency\", \"frequency\", \"detune\"]);\n        return _this;\n    }\n    PWMOscillator.getDefaults = function () {\n        return Object.assign(Source.getDefaults(), {\n            detune: 0,\n            frequency: 440,\n            modulationFrequency: 0.4,\n            phase: 0,\n            type: \"pwm\",\n        });\n    };\n    /**\n     * start the oscillator\n     */\n    PWMOscillator.prototype._start = function (time) {\n        time = this.toSeconds(time);\n        this._modulator.start(time);\n        this._pulse.start(time);\n    };\n    /**\n     * stop the oscillator\n     */\n    PWMOscillator.prototype._stop = function (time) {\n        time = this.toSeconds(time);\n        this._modulator.stop(time);\n        this._pulse.stop(time);\n    };\n    /**\n     * restart the oscillator\n     */\n    PWMOscillator.prototype._restart = function (time) {\n        this._modulator.restart(time);\n        this._pulse.restart(time);\n    };\n    Object.defineProperty(PWMOscillator.prototype, \"type\", {\n        /**\n         * The type of the oscillator. Always returns \"pwm\".\n         */\n        get: function () {\n            return \"pwm\";\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(PWMOscillator.prototype, \"baseType\", {\n        /**\n         * The baseType of the oscillator. Always returns \"pwm\".\n         */\n        get: function () {\n            return \"pwm\";\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(PWMOscillator.prototype, \"partials\", {\n        /**\n         * The partials of the waveform. Cannot set partials for this waveform type\n         */\n        get: function () {\n            return [];\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(PWMOscillator.prototype, \"partialCount\", {\n        /**\n         * No partials for this waveform type.\n         */\n        get: function () {\n            return 0;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(PWMOscillator.prototype, \"phase\", {\n        /**\n         * The phase of the oscillator in degrees.\n         */\n        get: function () {\n            return this._modulator.phase;\n        },\n        set: function (phase) {\n            this._modulator.phase = phase;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    PWMOscillator.prototype.asArray = function (length) {\n        if (length === void 0) { length = 1024; }\n        return tslib_1.__awaiter(this, void 0, void 0, function () {\n            return tslib_1.__generator(this, function (_a) {\n                return [2 /*return*/, generateWaveform(this, length)];\n            });\n        });\n    };\n    /**\n     * Clean up.\n     */\n    PWMOscillator.prototype.dispose = function () {\n        _super.prototype.dispose.call(this);\n        this._pulse.dispose();\n        this._scale.dispose();\n        this._modulator.dispose();\n        return this;\n    };\n    return PWMOscillator;\n}(Source));\nexport { PWMOscillator };\n//# sourceMappingURL=PWMOscillator.js.map"]},"metadata":{},"sourceType":"module"}