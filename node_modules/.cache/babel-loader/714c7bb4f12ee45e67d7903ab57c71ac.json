{"ast":null,"code":"import * as tslib_1 from \"tslib\";\nimport { Gain } from \"../../core/context/Gain\";\nimport { connectSeries, ToneAudioNode } from \"../../core/context/ToneAudioNode\";\nimport { optionsFromArguments } from \"../../core/util/Defaults\";\nimport { readOnly, writable } from \"../../core/util/Interface\";\nimport { isNumber } from \"../../core/util/TypeCheck\";\nimport { Signal } from \"../../signal/Signal\";\nimport { assert } from \"../../core/util/Debug\";\n/**\n * Tone.Filter is a filter which allows for all of the same native methods\n * as the [BiquadFilterNode](http://webaudio.github.io/web-audio-api/#the-biquadfilternode-interface).\n * Tone.Filter has the added ability to set the filter rolloff at -12\n * (default), -24 and -48.\n * @example\n * import { Filter, Noise } from \"tone\";\n *\n * const filter = new Filter(1500, \"highpass\").toDestination();\n * filter.frequency.rampTo(20000, 10);\n * const noise = new Noise().connect(filter).start();\n * @category Component\n */\n\nvar Filter =\n/** @class */\nfunction (_super) {\n  tslib_1.__extends(Filter, _super);\n\n  function Filter() {\n    var _this = _super.call(this, optionsFromArguments(Filter.getDefaults(), arguments, [\"frequency\", \"type\", \"rolloff\"])) || this;\n\n    _this.name = \"Filter\";\n    _this.input = new Gain({\n      context: _this.context\n    });\n    _this.output = new Gain({\n      context: _this.context\n    });\n    _this._filters = [];\n    var options = optionsFromArguments(Filter.getDefaults(), arguments, [\"frequency\", \"type\", \"rolloff\"]);\n    _this._filters = [];\n    _this.Q = new Signal({\n      context: _this.context,\n      units: \"positive\",\n      value: options.Q\n    });\n    _this.frequency = new Signal({\n      context: _this.context,\n      units: \"frequency\",\n      value: options.frequency\n    });\n    _this.detune = new Signal({\n      context: _this.context,\n      units: \"cents\",\n      value: options.detune\n    });\n    _this.gain = new Signal({\n      context: _this.context,\n      units: \"decibels\",\n      value: options.gain\n    });\n    _this._type = options.type;\n    _this.rolloff = options.rolloff;\n    readOnly(_this, [\"detune\", \"frequency\", \"gain\", \"Q\"]);\n    return _this;\n  }\n\n  Filter.getDefaults = function () {\n    return Object.assign(ToneAudioNode.getDefaults(), {\n      Q: 1,\n      detune: 0,\n      frequency: 350,\n      gain: 0,\n      rolloff: -12,\n      type: \"lowpass\"\n    });\n  };\n\n  Object.defineProperty(Filter.prototype, \"type\", {\n    /**\n     * The type of the filter. Types: \"lowpass\", \"highpass\",\n     * \"bandpass\", \"lowshelf\", \"highshelf\", \"notch\", \"allpass\", or \"peaking\".\n     */\n    get: function () {\n      return this._type;\n    },\n    set: function (type) {\n      var types = [\"lowpass\", \"highpass\", \"bandpass\", \"lowshelf\", \"highshelf\", \"notch\", \"allpass\", \"peaking\"];\n      assert(types.indexOf(type) !== -1, \"Invalid filter type: \" + type);\n      this._type = type;\n\n      this._filters.forEach(function (filter) {\n        return filter.type = type;\n      });\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(Filter.prototype, \"rolloff\", {\n    /**\n     * The rolloff of the filter which is the drop in db\n     * per octave. Implemented internally by cascading filters.\n     * Only accepts the values -12, -24, -48 and -96.\n     */\n    get: function () {\n      return this._rolloff;\n    },\n    set: function (rolloff) {\n      var rolloffNum = isNumber(rolloff) ? rolloff : parseInt(rolloff, 10);\n      var possibilities = [-12, -24, -48, -96];\n      var cascadingCount = possibilities.indexOf(rolloffNum); // check the rolloff is valid\n\n      assert(cascadingCount !== -1, \"rolloff can only be \" + possibilities.join(\", \"));\n      cascadingCount += 1;\n      this._rolloff = rolloffNum;\n      this.input.disconnect();\n\n      this._filters.forEach(function (filter) {\n        return filter.disconnect();\n      });\n\n      this._filters = new Array(cascadingCount);\n\n      for (var count = 0; count < cascadingCount; count++) {\n        var filter = this.context.createBiquadFilter();\n        filter.type = this._type;\n        this.frequency.connect(filter.frequency);\n        this.detune.connect(filter.detune);\n        this.Q.connect(filter.Q);\n        this.gain.connect(filter.gain);\n        this._filters[count] = filter;\n      }\n\n      this._internalChannels = this._filters;\n      connectSeries.apply(void 0, tslib_1.__spread([this.input], this._internalChannels, [this.output]));\n    },\n    enumerable: true,\n    configurable: true\n  });\n  /**\n   * Get the frequency response curve. This curve represents how the filter\n   * responses to frequencies between 20hz-20khz.\n   * @param  len The number of values to return\n   * @return The frequency response curve between 20-20kHz\n   */\n\n  Filter.prototype.getFrequencyResponse = function (len) {\n    var _this = this;\n\n    if (len === void 0) {\n      len = 128;\n    } // start with all 1s\n\n\n    var totalResponse = new Float32Array(len).map(function () {\n      return 1;\n    });\n    var freqValues = new Float32Array(len);\n\n    for (var i = 0; i < len; i++) {\n      var norm = Math.pow(i / len, 2);\n      var freq = norm * (20000 - 20) + 20;\n      freqValues[i] = freq;\n    }\n\n    var magValues = new Float32Array(len);\n    var phaseValues = new Float32Array(len);\n\n    this._filters.forEach(function () {\n      var filterClone = _this.context.createBiquadFilter();\n\n      filterClone.type = _this._type;\n      filterClone.Q.value = _this.Q.value;\n      filterClone.frequency.value = _this.frequency.value;\n      filterClone.gain.value = _this.gain.value;\n      filterClone.getFrequencyResponse(freqValues, magValues, phaseValues);\n      magValues.forEach(function (val, i) {\n        totalResponse[i] *= val;\n      });\n    });\n\n    return totalResponse;\n  };\n  /**\n   * Clean up.\n   */\n\n\n  Filter.prototype.dispose = function () {\n    _super.prototype.dispose.call(this);\n\n    this._filters.forEach(function (filter) {\n      filter.disconnect();\n    });\n\n    writable(this, [\"detune\", \"frequency\", \"gain\", \"Q\"]);\n    this.frequency.dispose();\n    this.Q.dispose();\n    this.detune.dispose();\n    this.gain.dispose();\n    return this;\n  };\n\n  return Filter;\n}(ToneAudioNode);\n\nexport { Filter };","map":{"version":3,"sources":["../../../../Tone/component/filter/Filter.ts"],"names":[],"mappings":"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","sourceRoot":"","sourcesContent":["import * as tslib_1 from \"tslib\";\nimport { Gain } from \"../../core/context/Gain\";\nimport { connectSeries, ToneAudioNode } from \"../../core/context/ToneAudioNode\";\nimport { optionsFromArguments } from \"../../core/util/Defaults\";\nimport { readOnly, writable } from \"../../core/util/Interface\";\nimport { isNumber } from \"../../core/util/TypeCheck\";\nimport { Signal } from \"../../signal/Signal\";\nimport { assert } from \"../../core/util/Debug\";\n/**\n * Tone.Filter is a filter which allows for all of the same native methods\n * as the [BiquadFilterNode](http://webaudio.github.io/web-audio-api/#the-biquadfilternode-interface).\n * Tone.Filter has the added ability to set the filter rolloff at -12\n * (default), -24 and -48.\n * @example\n * import { Filter, Noise } from \"tone\";\n *\n * const filter = new Filter(1500, \"highpass\").toDestination();\n * filter.frequency.rampTo(20000, 10);\n * const noise = new Noise().connect(filter).start();\n * @category Component\n */\nvar Filter = /** @class */ (function (_super) {\n    tslib_1.__extends(Filter, _super);\n    function Filter() {\n        var _this = _super.call(this, optionsFromArguments(Filter.getDefaults(), arguments, [\"frequency\", \"type\", \"rolloff\"])) || this;\n        _this.name = \"Filter\";\n        _this.input = new Gain({ context: _this.context });\n        _this.output = new Gain({ context: _this.context });\n        _this._filters = [];\n        var options = optionsFromArguments(Filter.getDefaults(), arguments, [\"frequency\", \"type\", \"rolloff\"]);\n        _this._filters = [];\n        _this.Q = new Signal({\n            context: _this.context,\n            units: \"positive\",\n            value: options.Q,\n        });\n        _this.frequency = new Signal({\n            context: _this.context,\n            units: \"frequency\",\n            value: options.frequency,\n        });\n        _this.detune = new Signal({\n            context: _this.context,\n            units: \"cents\",\n            value: options.detune,\n        });\n        _this.gain = new Signal({\n            context: _this.context,\n            units: \"decibels\",\n            value: options.gain,\n        });\n        _this._type = options.type;\n        _this.rolloff = options.rolloff;\n        readOnly(_this, [\"detune\", \"frequency\", \"gain\", \"Q\"]);\n        return _this;\n    }\n    Filter.getDefaults = function () {\n        return Object.assign(ToneAudioNode.getDefaults(), {\n            Q: 1,\n            detune: 0,\n            frequency: 350,\n            gain: 0,\n            rolloff: -12,\n            type: \"lowpass\",\n        });\n    };\n    Object.defineProperty(Filter.prototype, \"type\", {\n        /**\n         * The type of the filter. Types: \"lowpass\", \"highpass\",\n         * \"bandpass\", \"lowshelf\", \"highshelf\", \"notch\", \"allpass\", or \"peaking\".\n         */\n        get: function () {\n            return this._type;\n        },\n        set: function (type) {\n            var types = [\"lowpass\", \"highpass\", \"bandpass\",\n                \"lowshelf\", \"highshelf\", \"notch\", \"allpass\", \"peaking\"];\n            assert(types.indexOf(type) !== -1, \"Invalid filter type: \" + type);\n            this._type = type;\n            this._filters.forEach(function (filter) { return filter.type = type; });\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(Filter.prototype, \"rolloff\", {\n        /**\n         * The rolloff of the filter which is the drop in db\n         * per octave. Implemented internally by cascading filters.\n         * Only accepts the values -12, -24, -48 and -96.\n         */\n        get: function () {\n            return this._rolloff;\n        },\n        set: function (rolloff) {\n            var rolloffNum = isNumber(rolloff) ? rolloff : parseInt(rolloff, 10);\n            var possibilities = [-12, -24, -48, -96];\n            var cascadingCount = possibilities.indexOf(rolloffNum);\n            // check the rolloff is valid\n            assert(cascadingCount !== -1, \"rolloff can only be \" + possibilities.join(\", \"));\n            cascadingCount += 1;\n            this._rolloff = rolloffNum;\n            this.input.disconnect();\n            this._filters.forEach(function (filter) { return filter.disconnect(); });\n            this._filters = new Array(cascadingCount);\n            for (var count = 0; count < cascadingCount; count++) {\n                var filter = this.context.createBiquadFilter();\n                filter.type = this._type;\n                this.frequency.connect(filter.frequency);\n                this.detune.connect(filter.detune);\n                this.Q.connect(filter.Q);\n                this.gain.connect(filter.gain);\n                this._filters[count] = filter;\n            }\n            this._internalChannels = this._filters;\n            connectSeries.apply(void 0, tslib_1.__spread([this.input], this._internalChannels, [this.output]));\n        },\n        enumerable: true,\n        configurable: true\n    });\n    /**\n     * Get the frequency response curve. This curve represents how the filter\n     * responses to frequencies between 20hz-20khz.\n     * @param  len The number of values to return\n     * @return The frequency response curve between 20-20kHz\n     */\n    Filter.prototype.getFrequencyResponse = function (len) {\n        var _this = this;\n        if (len === void 0) { len = 128; }\n        // start with all 1s\n        var totalResponse = new Float32Array(len).map(function () { return 1; });\n        var freqValues = new Float32Array(len);\n        for (var i = 0; i < len; i++) {\n            var norm = Math.pow(i / len, 2);\n            var freq = norm * (20000 - 20) + 20;\n            freqValues[i] = freq;\n        }\n        var magValues = new Float32Array(len);\n        var phaseValues = new Float32Array(len);\n        this._filters.forEach(function () {\n            var filterClone = _this.context.createBiquadFilter();\n            filterClone.type = _this._type;\n            filterClone.Q.value = _this.Q.value;\n            filterClone.frequency.value = _this.frequency.value;\n            filterClone.gain.value = _this.gain.value;\n            filterClone.getFrequencyResponse(freqValues, magValues, phaseValues);\n            magValues.forEach(function (val, i) {\n                totalResponse[i] *= val;\n            });\n        });\n        return totalResponse;\n    };\n    /**\n     * Clean up.\n     */\n    Filter.prototype.dispose = function () {\n        _super.prototype.dispose.call(this);\n        this._filters.forEach(function (filter) {\n            filter.disconnect();\n        });\n        writable(this, [\"detune\", \"frequency\", \"gain\", \"Q\"]);\n        this.frequency.dispose();\n        this.Q.dispose();\n        this.detune.dispose();\n        this.gain.dispose();\n        return this;\n    };\n    return Filter;\n}(ToneAudioNode));\nexport { Filter };\n//# sourceMappingURL=Filter.js.map"]},"metadata":{},"sourceType":"module"}