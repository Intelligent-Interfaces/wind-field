{"ast":null,"code":"import * as tslib_1 from \"tslib\";\nimport { Effect } from \"./Effect\";\nimport { MidSideSplit } from \"../component/channel/MidSideSplit\";\nimport { MidSideMerge } from \"../component/channel/MidSideMerge\";\n/**\n * Mid/Side processing separates the the 'mid' signal\n * (which comes out of both the left and the right channel)\n * and the 'side' (which only comes out of the the side channels)\n * and effects them separately before being recombined.\n * Applies a Mid/Side seperation and recombination.\n * Algorithm found in [kvraudio forums](http://www.kvraudio.com/forum/viewtopic.php?t=212587).\n * This is a base-class for Mid/Side Effects.\n */\n\nvar MidSideEffect =\n/** @class */\nfunction (_super) {\n  tslib_1.__extends(MidSideEffect, _super);\n\n  function MidSideEffect(options) {\n    var _this = _super.call(this, options) || this;\n\n    _this.name = \"MidSideEffect\";\n    _this._midSideMerge = new MidSideMerge({\n      context: _this.context\n    });\n    _this._midSideSplit = new MidSideSplit({\n      context: _this.context\n    });\n    _this._midSend = _this._midSideSplit.mid;\n    _this._sideSend = _this._midSideSplit.side;\n    _this._midReturn = _this._midSideMerge.mid;\n    _this._sideReturn = _this._midSideMerge.side; // the connections\n\n    _this.effectSend.connect(_this._midSideSplit);\n\n    _this._midSideMerge.connect(_this.effectReturn);\n\n    return _this;\n  }\n  /**\n   * Connect the mid chain of the effect\n   */\n\n\n  MidSideEffect.prototype.connectEffectMid = function () {\n    var _a;\n\n    var nodes = [];\n\n    for (var _i = 0; _i < arguments.length; _i++) {\n      nodes[_i] = arguments[_i];\n    }\n\n    (_a = this._midSend).chain.apply(_a, tslib_1.__spread(nodes, [this._midReturn]));\n  };\n  /**\n   * Connect the side chain of the effect\n   */\n\n\n  MidSideEffect.prototype.connectEffectSide = function () {\n    var _a;\n\n    var nodes = [];\n\n    for (var _i = 0; _i < arguments.length; _i++) {\n      nodes[_i] = arguments[_i];\n    }\n\n    (_a = this._sideSend).chain.apply(_a, tslib_1.__spread(nodes, [this._sideReturn]));\n  };\n\n  MidSideEffect.prototype.dispose = function () {\n    _super.prototype.dispose.call(this);\n\n    this._midSideSplit.dispose();\n\n    this._midSideMerge.dispose();\n\n    this._midSend.dispose();\n\n    this._sideSend.dispose();\n\n    this._midReturn.dispose();\n\n    this._sideReturn.dispose();\n\n    return this;\n  };\n\n  return MidSideEffect;\n}(Effect);\n\nexport { MidSideEffect };","map":{"version":3,"sources":["../../../Tone/effect/MidSideEffect.ts"],"names":[],"mappings":";AAAA,SAAS,MAAT,QAAsC,UAAtC;AACA,SAAS,YAAT,QAA6B,mCAA7B;AACA,SAAS,YAAT,QAA6B,mCAA7B;AAKA;;;;;;;;;;AASA,IAAA,aAAA;AAAA;AAAA,UAAA,MAAA,EAAA;AAAkF,EAAA,OAAA,CAAA,SAAA,CAAA,aAAA,EAAA,MAAA;;AAkCjF,WAAA,aAAA,CAAY,OAAZ,EAAyC;AAAzC,QAAA,KAAA,GAEC,MAAA,CAAA,IAAA,CAAA,IAAA,EAAM,OAAN,KAAc,IAFf;;AAhCS,IAAA,KAAA,CAAA,IAAA,GAAe,eAAf;AAoCR,IAAA,KAAI,CAAC,aAAL,GAAqB,IAAI,YAAJ,CAAiB;AAAE,MAAA,OAAO,EAAE,KAAI,CAAC;AAAhB,KAAjB,CAArB;AACA,IAAA,KAAI,CAAC,aAAL,GAAqB,IAAI,YAAJ,CAAiB;AAAE,MAAA,OAAO,EAAE,KAAI,CAAC;AAAhB,KAAjB,CAArB;AACA,IAAA,KAAI,CAAC,QAAL,GAAgB,KAAI,CAAC,aAAL,CAAmB,GAAnC;AACA,IAAA,KAAI,CAAC,SAAL,GAAiB,KAAI,CAAC,aAAL,CAAmB,IAApC;AACA,IAAA,KAAI,CAAC,UAAL,GAAkB,KAAI,CAAC,aAAL,CAAmB,GAArC;AACA,IAAA,KAAI,CAAC,WAAL,GAAmB,KAAI,CAAC,aAAL,CAAmB,IAAtC,CATwC,CAWxC;;AACA,IAAA,KAAI,CAAC,UAAL,CAAgB,OAAhB,CAAwB,KAAI,CAAC,aAA7B;;AACA,IAAA,KAAI,CAAC,aAAL,CAAmB,OAAnB,CAA2B,KAAI,CAAC,YAAhC;;;AACA;AAED;;;;;AAGU,EAAA,aAAA,CAAA,SAAA,CAAA,gBAAA,GAAV,YAAA;;;AAA2B,QAAA,KAAA,GAAA,EAAA;;SAAA,IAAA,EAAA,GAAA,C,EAAA,EAAA,GAAA,SAAA,CAAA,M,EAAA,EAAA,E,EAAsB;AAAtB,MAAA,KAAA,CAAA,EAAA,CAAA,GAAA,SAAA,CAAA,EAAA,CAAA;;;AAC1B,KAAA,EAAA,GAAA,KAAK,QAAL,EAAc,KAAd,CAAmB,KAAnB,CAAmB,EAAnB,EAAmB,OAAA,CAAA,QAAA,CAAI,KAAJ,EAAS,CAAE,KAAK,UAAP,CAAT,CAAnB;AACA,GAFS;AAIV;;;;;AAGU,EAAA,aAAA,CAAA,SAAA,CAAA,iBAAA,GAAV,YAAA;;;AAA4B,QAAA,KAAA,GAAA,EAAA;;SAAA,IAAA,EAAA,GAAA,C,EAAA,EAAA,GAAA,SAAA,CAAA,M,EAAA,EAAA,E,EAAsB;AAAtB,MAAA,KAAA,CAAA,EAAA,CAAA,GAAA,SAAA,CAAA,EAAA,CAAA;;;AAC3B,KAAA,EAAA,GAAA,KAAK,SAAL,EAAe,KAAf,CAAoB,KAApB,CAAoB,EAApB,EAAoB,OAAA,CAAA,QAAA,CAAI,KAAJ,EAAS,CAAE,KAAK,WAAP,CAAT,CAApB;AACA,GAFS;;AAIV,EAAA,aAAA,CAAA,SAAA,CAAA,OAAA,GAAA,YAAA;AACC,IAAA,MAAA,CAAA,SAAA,CAAM,OAAN,CAAa,IAAb,CAAa,IAAb;;AACA,SAAK,aAAL,CAAmB,OAAnB;;AACA,SAAK,aAAL,CAAmB,OAAnB;;AACA,SAAK,QAAL,CAAc,OAAd;;AACA,SAAK,SAAL,CAAe,OAAf;;AACA,SAAK,UAAL,CAAgB,OAAhB;;AACA,SAAK,WAAL,CAAiB,OAAjB;;AACA,WAAO,IAAP;AACA,GATD;;AAUD,SAAA,aAAA;AAAC,CA1ED,CAAkF,MAAlF,CAAA","sourceRoot":"","sourcesContent":["import * as tslib_1 from \"tslib\";\nimport { Effect } from \"./Effect\";\nimport { MidSideSplit } from \"../component/channel/MidSideSplit\";\nimport { MidSideMerge } from \"../component/channel/MidSideMerge\";\n/**\n * Mid/Side processing separates the the 'mid' signal\n * (which comes out of both the left and the right channel)\n * and the 'side' (which only comes out of the the side channels)\n * and effects them separately before being recombined.\n * Applies a Mid/Side seperation and recombination.\n * Algorithm found in [kvraudio forums](http://www.kvraudio.com/forum/viewtopic.php?t=212587).\n * This is a base-class for Mid/Side Effects.\n */\nvar MidSideEffect = /** @class */ (function (_super) {\n    tslib_1.__extends(MidSideEffect, _super);\n    function MidSideEffect(options) {\n        var _this = _super.call(this, options) || this;\n        _this.name = \"MidSideEffect\";\n        _this._midSideMerge = new MidSideMerge({ context: _this.context });\n        _this._midSideSplit = new MidSideSplit({ context: _this.context });\n        _this._midSend = _this._midSideSplit.mid;\n        _this._sideSend = _this._midSideSplit.side;\n        _this._midReturn = _this._midSideMerge.mid;\n        _this._sideReturn = _this._midSideMerge.side;\n        // the connections\n        _this.effectSend.connect(_this._midSideSplit);\n        _this._midSideMerge.connect(_this.effectReturn);\n        return _this;\n    }\n    /**\n     * Connect the mid chain of the effect\n     */\n    MidSideEffect.prototype.connectEffectMid = function () {\n        var _a;\n        var nodes = [];\n        for (var _i = 0; _i < arguments.length; _i++) {\n            nodes[_i] = arguments[_i];\n        }\n        (_a = this._midSend).chain.apply(_a, tslib_1.__spread(nodes, [this._midReturn]));\n    };\n    /**\n     * Connect the side chain of the effect\n     */\n    MidSideEffect.prototype.connectEffectSide = function () {\n        var _a;\n        var nodes = [];\n        for (var _i = 0; _i < arguments.length; _i++) {\n            nodes[_i] = arguments[_i];\n        }\n        (_a = this._sideSend).chain.apply(_a, tslib_1.__spread(nodes, [this._sideReturn]));\n    };\n    MidSideEffect.prototype.dispose = function () {\n        _super.prototype.dispose.call(this);\n        this._midSideSplit.dispose();\n        this._midSideMerge.dispose();\n        this._midSend.dispose();\n        this._sideSend.dispose();\n        this._midReturn.dispose();\n        this._sideReturn.dispose();\n        return this;\n    };\n    return MidSideEffect;\n}(Effect));\nexport { MidSideEffect };\n//# sourceMappingURL=MidSideEffect.js.map"]},"metadata":{},"sourceType":"module"}