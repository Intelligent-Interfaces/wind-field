{"ast":null,"code":"import * as tslib_1 from \"tslib\";\nimport { Gain } from \"../core/context/Gain\";\nimport { optionsFromArguments } from \"../core/util/Defaults\";\nimport { Signal } from \"./Signal\";\n/**\n * Multiply two incoming signals. Or, if a number is given in the constructor,\n * multiplies the incoming signal by that value.\n *\n * @example\n * import { Multiply, Signal } from \"tone\";\n * // multiply two signals\n * const mult = new Multiply();\n * const sigA = new Signal(3);\n * const sigB = new Signal(4);\n * sigA.connect(mult);\n * sigB.connect(mult.factor);\n * // output of mult is 12.\n * @example\n * import { Multiply, Signal } from \"tone\";\n * // multiply a signal and a number\n * const mult = new Multiply(10);\n * const sig = new Signal(2).connect(mult);\n * // the output of mult is 20.\n * @category Signal\n */\n\nvar Multiply =\n/** @class */\nfunction (_super) {\n  tslib_1.__extends(Multiply, _super);\n\n  function Multiply() {\n    var _this = _super.call(this, Object.assign(optionsFromArguments(Multiply.getDefaults(), arguments, [\"value\"]))) || this;\n\n    _this.name = \"Multiply\";\n    /**\n     * Indicates if the value should be overridden on connection\n     */\n\n    _this.override = false;\n    var options = optionsFromArguments(Multiply.getDefaults(), arguments, [\"value\"]);\n    _this._mult = _this.input = _this.output = new Gain({\n      context: _this.context,\n      minValue: options.minValue,\n      maxValue: options.maxValue\n    });\n    _this.factor = _this._param = _this._mult.gain;\n\n    _this.factor.setValueAtTime(options.value, 0);\n\n    return _this;\n  }\n\n  Multiply.getDefaults = function () {\n    return Object.assign(Signal.getDefaults(), {\n      value: 0\n    });\n  };\n\n  Multiply.prototype.dispose = function () {\n    _super.prototype.dispose.call(this);\n\n    this._mult.dispose();\n\n    return this;\n  };\n\n  return Multiply;\n}(Signal);\n\nexport { Multiply };","map":{"version":3,"sources":["../../../Tone/signal/Multiply.ts"],"names":[],"mappings":";AAAA,SAAS,IAAT,QAAqB,sBAArB;AAEA,SAAS,oBAAT,QAAqC,uBAArC;AACA,SAAS,MAAT,QAAsC,UAAtC;AAGA;;;;;;;;;;;;;;;;;;;;;;AAqBA,IAAA,QAAA;AAAA;AAAA,UAAA,MAAA,EAAA;AAAiF,EAAA,OAAA,CAAA,SAAA,CAAA,QAAA,EAAA,MAAA;;AAkChF,WAAA,QAAA,GAAA;AAAA,QAAA,KAAA,GACC,MAAA,CAAA,IAAA,CAAA,IAAA,EAAM,MAAM,CAAC,MAAP,CAAc,oBAAoB,CAAC,QAAQ,CAAC,WAAT,EAAD,EAAyB,SAAzB,EAAoC,CAAC,OAAD,CAApC,CAAlC,CAAN,KAAwF,IADzF;;AAhCS,IAAA,KAAA,CAAA,IAAA,GAAe,UAAf;AAET;;;;AAGS,IAAA,KAAA,CAAA,QAAA,GAAW,KAAX;AA6BR,QAAM,OAAO,GAAG,oBAAoB,CAAC,QAAQ,CAAC,WAAT,EAAD,EAAyB,SAAzB,EAAoC,CAAC,OAAD,CAApC,CAApC;AAEA,IAAA,KAAI,CAAC,KAAL,GAAa,KAAI,CAAC,KAAL,GAAa,KAAI,CAAC,MAAL,GAAc,IAAI,IAAJ,CAAS;AAChD,MAAA,OAAO,EAAE,KAAI,CAAC,OADkC;AAEhD,MAAA,QAAQ,EAAE,OAAO,CAAC,QAF8B;AAGhD,MAAA,QAAQ,EAAE,OAAO,CAAC;AAH8B,KAAT,CAAxC;AAMA,IAAA,KAAI,CAAC,MAAL,GAAc,KAAI,CAAC,MAAL,GAAc,KAAI,CAAC,KAAL,CAAW,IAAvC;;AACA,IAAA,KAAI,CAAC,MAAL,CAAY,cAAZ,CAA2B,OAAO,CAAC,KAAnC,EAA0C,CAA1C;;;AACA;;AAEM,EAAA,QAAA,CAAA,WAAA,GAAP,YAAA;AACC,WAAO,MAAM,CAAC,MAAP,CAAc,MAAM,CAAC,WAAP,EAAd,EAAoC;AAC1C,MAAA,KAAK,EAAE;AADmC,KAApC,CAAP;AAGA,GAJM;;AAMP,EAAA,QAAA,CAAA,SAAA,CAAA,OAAA,GAAA,YAAA;AACC,IAAA,MAAA,CAAA,SAAA,CAAM,OAAN,CAAa,IAAb,CAAa,IAAb;;AACA,SAAK,KAAL,CAAW,OAAX;;AACA,WAAO,IAAP;AACA,GAJD;;AAKD,SAAA,QAAA;AAAC,CA3DD,CAAiF,MAAjF,CAAA","sourceRoot":"","sourcesContent":["import * as tslib_1 from \"tslib\";\nimport { Gain } from \"../core/context/Gain\";\nimport { optionsFromArguments } from \"../core/util/Defaults\";\nimport { Signal } from \"./Signal\";\n/**\n * Multiply two incoming signals. Or, if a number is given in the constructor,\n * multiplies the incoming signal by that value.\n *\n * @example\n * import { Multiply, Signal } from \"tone\";\n * // multiply two signals\n * const mult = new Multiply();\n * const sigA = new Signal(3);\n * const sigB = new Signal(4);\n * sigA.connect(mult);\n * sigB.connect(mult.factor);\n * // output of mult is 12.\n * @example\n * import { Multiply, Signal } from \"tone\";\n * // multiply a signal and a number\n * const mult = new Multiply(10);\n * const sig = new Signal(2).connect(mult);\n * // the output of mult is 20.\n * @category Signal\n */\nvar Multiply = /** @class */ (function (_super) {\n    tslib_1.__extends(Multiply, _super);\n    function Multiply() {\n        var _this = _super.call(this, Object.assign(optionsFromArguments(Multiply.getDefaults(), arguments, [\"value\"]))) || this;\n        _this.name = \"Multiply\";\n        /**\n         * Indicates if the value should be overridden on connection\n         */\n        _this.override = false;\n        var options = optionsFromArguments(Multiply.getDefaults(), arguments, [\"value\"]);\n        _this._mult = _this.input = _this.output = new Gain({\n            context: _this.context,\n            minValue: options.minValue,\n            maxValue: options.maxValue,\n        });\n        _this.factor = _this._param = _this._mult.gain;\n        _this.factor.setValueAtTime(options.value, 0);\n        return _this;\n    }\n    Multiply.getDefaults = function () {\n        return Object.assign(Signal.getDefaults(), {\n            value: 0,\n        });\n    };\n    Multiply.prototype.dispose = function () {\n        _super.prototype.dispose.call(this);\n        this._mult.dispose();\n        return this;\n    };\n    return Multiply;\n}(Signal));\nexport { Multiply };\n//# sourceMappingURL=Multiply.js.map"]},"metadata":{},"sourceType":"module"}