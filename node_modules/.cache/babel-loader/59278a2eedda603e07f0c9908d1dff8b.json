{"ast":null,"code":"import * as tslib_1 from \"tslib\";\nimport { Gain } from \"../../core/context/Gain\";\nimport { ToneAudioNode } from \"../../core/context/ToneAudioNode\";\nimport { optionsFromArguments } from \"../../core/util/Defaults\";\n/**\n * Solo lets you isolate a specific audio stream. When an instance is set to `solo=true`,\n * it will mute all other instances of Solo.\n * @example\n * import { Oscillator, Solo } from \"tone\";\n *\n * const soloA = new Solo().toDestination();\n * const oscA = new Oscillator(\"C4\", \"sawtooth\").connect(soloA);\n * const soloB = new Solo().toDestination();\n * const oscB = new Oscillator(\"E4\", \"square\").connect(soloB);\n *\n * soloA.solo = true;\n * // no audio will pass through soloB\n * @category Component\n */\n\nvar Solo =\n/** @class */\nfunction (_super) {\n  tslib_1.__extends(Solo, _super);\n\n  function Solo() {\n    var _this = _super.call(this, optionsFromArguments(Solo.getDefaults(), arguments, [\"solo\"])) || this;\n\n    _this.name = \"Solo\";\n    var options = optionsFromArguments(Solo.getDefaults(), arguments, [\"solo\"]);\n    _this.input = _this.output = new Gain({\n      context: _this.context\n    });\n\n    if (!Solo._allSolos.has(_this.context)) {\n      Solo._allSolos.set(_this.context, new Set());\n    }\n\n    Solo._allSolos.get(_this.context).add(_this); // set initially\n\n\n    _this.solo = options.solo;\n    return _this;\n  }\n\n  Solo.getDefaults = function () {\n    return Object.assign(ToneAudioNode.getDefaults(), {\n      solo: false\n    });\n  };\n\n  Object.defineProperty(Solo.prototype, \"solo\", {\n    /**\n     * Isolates this instance and mutes all other instances of Solo.\n     * Only one instance can be soloed at a time. A soloed\n     * instance will report `solo=false` when another instance is soloed.\n     */\n    get: function () {\n      return this._isSoloed();\n    },\n    set: function (solo) {\n      if (solo) {\n        this._addSolo();\n      } else {\n        this._removeSolo();\n      }\n\n      Solo._allSolos.get(this.context).forEach(function (instance) {\n        return instance._updateSolo();\n      });\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(Solo.prototype, \"muted\", {\n    /**\n     * If the current instance is muted, i.e. another instance is soloed\n     */\n    get: function () {\n      return this.input.gain.value === 0;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  /**\n   * Add this to the soloed array\n   */\n\n  Solo.prototype._addSolo = function () {\n    if (!Solo._soloed.has(this.context)) {\n      Solo._soloed.set(this.context, new Set());\n    }\n\n    Solo._soloed.get(this.context).add(this);\n  };\n  /**\n   * Remove this from the soloed array\n   */\n\n\n  Solo.prototype._removeSolo = function () {\n    if (Solo._soloed.has(this.context)) {\n      Solo._soloed.get(this.context).delete(this);\n    }\n  };\n  /**\n   * Is this on the soloed array\n   */\n\n\n  Solo.prototype._isSoloed = function () {\n    return Solo._soloed.has(this.context) && Solo._soloed.get(this.context).has(this);\n  };\n  /**\n   * Returns true if no one is soloed\n   */\n\n\n  Solo.prototype._noSolos = function () {\n    // either does not have any soloed added\n    return !Solo._soloed.has(this.context) || // or has a solo set but doesn't include any items\n    Solo._soloed.has(this.context) && Solo._soloed.get(this.context).size === 0;\n  };\n  /**\n   * Solo the current instance and unsolo all other instances.\n   */\n\n\n  Solo.prototype._updateSolo = function () {\n    if (this._isSoloed()) {\n      this.input.gain.value = 1;\n    } else if (this._noSolos()) {\n      // no one is soloed\n      this.input.gain.value = 1;\n    } else {\n      this.input.gain.value = 0;\n    }\n  };\n\n  Solo.prototype.dispose = function () {\n    _super.prototype.dispose.call(this);\n\n    Solo._allSolos.get(this.context).delete(this);\n\n    this._removeSolo();\n\n    return this;\n  };\n  /**\n   * Hold all of the solo'ed tracks belonging to a specific context\n   */\n\n\n  Solo._allSolos = new Map();\n  /**\n   * Hold the currently solo'ed instance(s)\n   */\n\n  Solo._soloed = new Map();\n  return Solo;\n}(ToneAudioNode);\n\nexport { Solo };","map":{"version":3,"sources":["../../../../Tone/component/channel/Solo.ts"],"names":[],"mappings":"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","sourceRoot":"","sourcesContent":["import * as tslib_1 from \"tslib\";\nimport { Gain } from \"../../core/context/Gain\";\nimport { ToneAudioNode } from \"../../core/context/ToneAudioNode\";\nimport { optionsFromArguments } from \"../../core/util/Defaults\";\n/**\n * Solo lets you isolate a specific audio stream. When an instance is set to `solo=true`,\n * it will mute all other instances of Solo.\n * @example\n * import { Oscillator, Solo } from \"tone\";\n *\n * const soloA = new Solo().toDestination();\n * const oscA = new Oscillator(\"C4\", \"sawtooth\").connect(soloA);\n * const soloB = new Solo().toDestination();\n * const oscB = new Oscillator(\"E4\", \"square\").connect(soloB);\n *\n * soloA.solo = true;\n * // no audio will pass through soloB\n * @category Component\n */\nvar Solo = /** @class */ (function (_super) {\n    tslib_1.__extends(Solo, _super);\n    function Solo() {\n        var _this = _super.call(this, optionsFromArguments(Solo.getDefaults(), arguments, [\"solo\"])) || this;\n        _this.name = \"Solo\";\n        var options = optionsFromArguments(Solo.getDefaults(), arguments, [\"solo\"]);\n        _this.input = _this.output = new Gain({\n            context: _this.context,\n        });\n        if (!Solo._allSolos.has(_this.context)) {\n            Solo._allSolos.set(_this.context, new Set());\n        }\n        Solo._allSolos.get(_this.context).add(_this);\n        // set initially\n        _this.solo = options.solo;\n        return _this;\n    }\n    Solo.getDefaults = function () {\n        return Object.assign(ToneAudioNode.getDefaults(), {\n            solo: false,\n        });\n    };\n    Object.defineProperty(Solo.prototype, \"solo\", {\n        /**\n         * Isolates this instance and mutes all other instances of Solo.\n         * Only one instance can be soloed at a time. A soloed\n         * instance will report `solo=false` when another instance is soloed.\n         */\n        get: function () {\n            return this._isSoloed();\n        },\n        set: function (solo) {\n            if (solo) {\n                this._addSolo();\n            }\n            else {\n                this._removeSolo();\n            }\n            Solo._allSolos.get(this.context).forEach(function (instance) { return instance._updateSolo(); });\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(Solo.prototype, \"muted\", {\n        /**\n         * If the current instance is muted, i.e. another instance is soloed\n         */\n        get: function () {\n            return this.input.gain.value === 0;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    /**\n     * Add this to the soloed array\n     */\n    Solo.prototype._addSolo = function () {\n        if (!Solo._soloed.has(this.context)) {\n            Solo._soloed.set(this.context, new Set());\n        }\n        Solo._soloed.get(this.context).add(this);\n    };\n    /**\n     * Remove this from the soloed array\n     */\n    Solo.prototype._removeSolo = function () {\n        if (Solo._soloed.has(this.context)) {\n            Solo._soloed.get(this.context).delete(this);\n        }\n    };\n    /**\n     * Is this on the soloed array\n     */\n    Solo.prototype._isSoloed = function () {\n        return Solo._soloed.has(this.context) && Solo._soloed.get(this.context).has(this);\n    };\n    /**\n     * Returns true if no one is soloed\n     */\n    Solo.prototype._noSolos = function () {\n        // either does not have any soloed added\n        return !Solo._soloed.has(this.context) ||\n            // or has a solo set but doesn't include any items\n            (Solo._soloed.has(this.context) && Solo._soloed.get(this.context).size === 0);\n    };\n    /**\n     * Solo the current instance and unsolo all other instances.\n     */\n    Solo.prototype._updateSolo = function () {\n        if (this._isSoloed()) {\n            this.input.gain.value = 1;\n        }\n        else if (this._noSolos()) {\n            // no one is soloed\n            this.input.gain.value = 1;\n        }\n        else {\n            this.input.gain.value = 0;\n        }\n    };\n    Solo.prototype.dispose = function () {\n        _super.prototype.dispose.call(this);\n        Solo._allSolos.get(this.context).delete(this);\n        this._removeSolo();\n        return this;\n    };\n    /**\n     * Hold all of the solo'ed tracks belonging to a specific context\n     */\n    Solo._allSolos = new Map();\n    /**\n     * Hold the currently solo'ed instance(s)\n     */\n    Solo._soloed = new Map();\n    return Solo;\n}(ToneAudioNode));\nexport { Solo };\n//# sourceMappingURL=Solo.js.map"]},"metadata":{},"sourceType":"module"}