{"ast":null,"code":"import * as tslib_1 from \"tslib\";\nimport { ToneAudioNode } from \"../../core/context/ToneAudioNode\";\nimport { Split } from \"./Split\";\nimport { Add } from \"../../signal/Add\";\nimport { Multiply } from \"../../signal/Multiply\";\nimport { Subtract } from \"../../signal/Subtract\";\nimport { optionsFromArguments } from \"../../core/util/Defaults\";\n/**\n * Mid/Side processing separates the the 'mid' signal (which comes out of both the left and the right channel)\n * and the 'side' (which only comes out of the the side channels).\n * ```\n * Mid = (Left+Right)/sqrt(2);   // obtain mid-signal from left and right\n * Side = (Left-Right)/sqrt(2);   // obtain side-signal from left and right\n * ```\n */\n\nvar MidSideSplit =\n/** @class */\nfunction (_super) {\n  tslib_1.__extends(MidSideSplit, _super);\n\n  function MidSideSplit() {\n    var _this = _super.call(this, optionsFromArguments(MidSideSplit.getDefaults(), arguments)) || this;\n\n    _this.name = \"MidSideSplit\";\n    _this._split = _this.input = new Split({\n      channels: 2,\n      context: _this.context\n    });\n    _this._midAdd = new Add({\n      context: _this.context\n    });\n    _this.mid = new Multiply({\n      context: _this.context,\n      value: Math.SQRT1_2\n    });\n    _this._sideSubtract = new Subtract({\n      context: _this.context\n    });\n    _this.side = new Multiply({\n      context: _this.context,\n      value: Math.SQRT1_2\n    });\n\n    _this._split.connect(_this._midAdd, 0);\n\n    _this._split.connect(_this._midAdd.addend, 1);\n\n    _this._split.connect(_this._sideSubtract, 0);\n\n    _this._split.connect(_this._sideSubtract.subtrahend, 1);\n\n    _this._midAdd.connect(_this.mid);\n\n    _this._sideSubtract.connect(_this.side);\n\n    return _this;\n  }\n\n  MidSideSplit.prototype.dispose = function () {\n    _super.prototype.dispose.call(this);\n\n    this.mid.dispose();\n    this.side.dispose();\n\n    this._midAdd.dispose();\n\n    this._sideSubtract.dispose();\n\n    this._split.dispose();\n\n    return this;\n  };\n\n  return MidSideSplit;\n}(ToneAudioNode);\n\nexport { MidSideSplit };","map":{"version":3,"sources":["../../../../Tone/component/channel/MidSideSplit.ts"],"names":[],"mappings":";AAAA,SAAS,aAAT,QAAoD,kCAApD;AACA,SAAS,KAAT,QAAsB,SAAtB;AACA,SAAS,GAAT,QAAoB,kBAApB;AACA,SAAS,QAAT,QAAyB,uBAAzB;AACA,SAAS,QAAT,QAAyB,uBAAzB;AACA,SAAS,oBAAT,QAAqC,0BAArC;AAIA;;;;;;;;;AAQA,IAAA,YAAA;AAAA;AAAA,UAAA,MAAA,EAAA;AAAkC,EAAA,OAAA,CAAA,SAAA,CAAA,YAAA,EAAA,MAAA;;AAoCjC,WAAA,YAAA,GAAA;AAAA,QAAA,KAAA,GACC,MAAA,CAAA,IAAA,CAAA,IAAA,EAAM,oBAAoB,CAAC,YAAY,CAAC,WAAb,EAAD,EAA6B,SAA7B,CAA1B,KAAkE,IADnE;;AAlCS,IAAA,KAAA,CAAA,IAAA,GAAe,cAAf;AAqCR,IAAA,KAAI,CAAC,MAAL,GAAc,KAAI,CAAC,KAAL,GAAa,IAAI,KAAJ,CAAU;AACpC,MAAA,QAAQ,EAAE,CAD0B;AAEpC,MAAA,OAAO,EAAE,KAAI,CAAC;AAFsB,KAAV,CAA3B;AAIA,IAAA,KAAI,CAAC,OAAL,GAAe,IAAI,GAAJ,CAAQ;AAAE,MAAA,OAAO,EAAE,KAAI,CAAC;AAAhB,KAAR,CAAf;AACA,IAAA,KAAI,CAAC,GAAL,GAAW,IAAI,QAAJ,CAAa;AACvB,MAAA,OAAO,EAAE,KAAI,CAAC,OADS;AAEvB,MAAA,KAAK,EAAE,IAAI,CAAC;AAFW,KAAb,CAAX;AAIA,IAAA,KAAI,CAAC,aAAL,GAAqB,IAAI,QAAJ,CAAa;AAAE,MAAA,OAAO,EAAE,KAAI,CAAC;AAAhB,KAAb,CAArB;AACA,IAAA,KAAI,CAAC,IAAL,GAAY,IAAI,QAAJ,CAAa;AACxB,MAAA,OAAO,EAAE,KAAI,CAAC,OADU;AAExB,MAAA,KAAK,EAAE,IAAI,CAAC;AAFY,KAAb,CAAZ;;AAKA,IAAA,KAAI,CAAC,MAAL,CAAY,OAAZ,CAAoB,KAAI,CAAC,OAAzB,EAAkC,CAAlC;;AACA,IAAA,KAAI,CAAC,MAAL,CAAY,OAAZ,CAAoB,KAAI,CAAC,OAAL,CAAa,MAAjC,EAAyC,CAAzC;;AACA,IAAA,KAAI,CAAC,MAAL,CAAY,OAAZ,CAAoB,KAAI,CAAC,aAAzB,EAAwC,CAAxC;;AACA,IAAA,KAAI,CAAC,MAAL,CAAY,OAAZ,CAAoB,KAAI,CAAC,aAAL,CAAmB,UAAvC,EAAmD,CAAnD;;AACA,IAAA,KAAI,CAAC,OAAL,CAAa,OAAb,CAAqB,KAAI,CAAC,GAA1B;;AACA,IAAA,KAAI,CAAC,aAAL,CAAmB,OAAnB,CAA2B,KAAI,CAAC,IAAhC;;;AACA;;AAED,EAAA,YAAA,CAAA,SAAA,CAAA,OAAA,GAAA,YAAA;AACC,IAAA,MAAA,CAAA,SAAA,CAAM,OAAN,CAAa,IAAb,CAAa,IAAb;;AACA,SAAK,GAAL,CAAS,OAAT;AACA,SAAK,IAAL,CAAU,OAAV;;AACA,SAAK,OAAL,CAAa,OAAb;;AACA,SAAK,aAAL,CAAmB,OAAnB;;AACA,SAAK,MAAL,CAAY,OAAZ;;AACA,WAAO,IAAP;AACA,GARD;;AASD,SAAA,YAAA;AAAC,CAvED,CAAkC,aAAlC,CAAA","sourceRoot":"","sourcesContent":["import * as tslib_1 from \"tslib\";\nimport { ToneAudioNode } from \"../../core/context/ToneAudioNode\";\nimport { Split } from \"./Split\";\nimport { Add } from \"../../signal/Add\";\nimport { Multiply } from \"../../signal/Multiply\";\nimport { Subtract } from \"../../signal/Subtract\";\nimport { optionsFromArguments } from \"../../core/util/Defaults\";\n/**\n * Mid/Side processing separates the the 'mid' signal (which comes out of both the left and the right channel)\n * and the 'side' (which only comes out of the the side channels).\n * ```\n * Mid = (Left+Right)/sqrt(2);   // obtain mid-signal from left and right\n * Side = (Left-Right)/sqrt(2);   // obtain side-signal from left and right\n * ```\n */\nvar MidSideSplit = /** @class */ (function (_super) {\n    tslib_1.__extends(MidSideSplit, _super);\n    function MidSideSplit() {\n        var _this = _super.call(this, optionsFromArguments(MidSideSplit.getDefaults(), arguments)) || this;\n        _this.name = \"MidSideSplit\";\n        _this._split = _this.input = new Split({\n            channels: 2,\n            context: _this.context\n        });\n        _this._midAdd = new Add({ context: _this.context });\n        _this.mid = new Multiply({\n            context: _this.context,\n            value: Math.SQRT1_2,\n        });\n        _this._sideSubtract = new Subtract({ context: _this.context });\n        _this.side = new Multiply({\n            context: _this.context,\n            value: Math.SQRT1_2,\n        });\n        _this._split.connect(_this._midAdd, 0);\n        _this._split.connect(_this._midAdd.addend, 1);\n        _this._split.connect(_this._sideSubtract, 0);\n        _this._split.connect(_this._sideSubtract.subtrahend, 1);\n        _this._midAdd.connect(_this.mid);\n        _this._sideSubtract.connect(_this.side);\n        return _this;\n    }\n    MidSideSplit.prototype.dispose = function () {\n        _super.prototype.dispose.call(this);\n        this.mid.dispose();\n        this.side.dispose();\n        this._midAdd.dispose();\n        this._sideSubtract.dispose();\n        this._split.dispose();\n        return this;\n    };\n    return MidSideSplit;\n}(ToneAudioNode));\nexport { MidSideSplit };\n//# sourceMappingURL=MidSideSplit.js.map"]},"metadata":{},"sourceType":"module"}