{"ast":null,"code":"import * as tslib_1 from \"tslib\";\nimport { LowpassCombFilter } from \"../component/filter/LowpassCombFilter\";\nimport { deepMerge } from \"../core/util/Defaults\";\nimport { optionsFromArguments } from \"../core/util/Defaults\";\nimport { Noise } from \"../source/Noise\";\nimport { Instrument } from \"./Instrument\";\n/**\n * Karplus-String string synthesis.\n * @example\n * import { PluckSynth } from \"tone\";\n * const plucky = new PluckSynth().toDestination();\n * plucky.triggerAttack(\"C4\", \"+0.5\");\n * plucky.triggerAttack(\"C3\", \"+1\");\n * plucky.triggerAttack(\"C2\", \"+1.5\");\n * plucky.triggerAttack(\"C1\", \"+2\");\n * @category Instrument\n */\n\nvar PluckSynth =\n/** @class */\nfunction (_super) {\n  tslib_1.__extends(PluckSynth, _super);\n\n  function PluckSynth() {\n    var _this = _super.call(this, optionsFromArguments(PluckSynth.getDefaults(), arguments)) || this;\n\n    _this.name = \"PluckSynth\";\n    var options = optionsFromArguments(PluckSynth.getDefaults(), arguments);\n    _this._noise = new Noise({\n      context: _this.context,\n      type: \"pink\"\n    });\n    _this.attackNoise = options.attackNoise;\n    _this._lfcf = new LowpassCombFilter({\n      context: _this.context,\n      dampening: options.dampening,\n      resonance: options.resonance\n    });\n    _this.resonance = options.resonance;\n    _this.release = options.release;\n\n    _this._noise.connect(_this._lfcf);\n\n    _this._lfcf.connect(_this.output);\n\n    return _this;\n  }\n\n  PluckSynth.getDefaults = function () {\n    return deepMerge(Instrument.getDefaults(), {\n      attackNoise: 1,\n      dampening: 4000,\n      resonance: 0.7,\n      release: 1\n    });\n  };\n\n  Object.defineProperty(PluckSynth.prototype, \"dampening\", {\n    /**\n     * The dampening control. i.e. the lowpass filter frequency of the comb filter\n     * @min 0\n     * @max 7000\n     */\n    get: function () {\n      return this._lfcf.dampening;\n    },\n    set: function (fq) {\n      this._lfcf.dampening = fq;\n    },\n    enumerable: true,\n    configurable: true\n  });\n\n  PluckSynth.prototype.triggerAttack = function (note, time) {\n    var freq = this.toFrequency(note);\n    time = this.toSeconds(time);\n    var delayAmount = 1 / freq;\n\n    this._lfcf.delayTime.setValueAtTime(delayAmount, time);\n\n    this._noise.start(time);\n\n    this._noise.stop(time + delayAmount * this.attackNoise);\n\n    this._lfcf.resonance.cancelScheduledValues(time);\n\n    this._lfcf.resonance.setValueAtTime(this.resonance, time);\n\n    return this;\n  };\n  /**\n   * Ramp down the [[resonance]] to 0 over the duration of the release time.\n   */\n\n\n  PluckSynth.prototype.triggerRelease = function (time) {\n    this._lfcf.resonance.linearRampTo(0, this.release, time);\n\n    return this;\n  };\n\n  PluckSynth.prototype.dispose = function () {\n    _super.prototype.dispose.call(this);\n\n    this._noise.dispose();\n\n    this._lfcf.dispose();\n\n    return this;\n  };\n\n  return PluckSynth;\n}(Instrument);\n\nexport { PluckSynth };","map":{"version":3,"sources":["../../../Tone/instrument/PluckSynth.ts"],"names":[],"mappings":"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","sourceRoot":"","sourcesContent":["import * as tslib_1 from \"tslib\";\nimport { LowpassCombFilter } from \"../component/filter/LowpassCombFilter\";\nimport { deepMerge } from \"../core/util/Defaults\";\nimport { optionsFromArguments } from \"../core/util/Defaults\";\nimport { Noise } from \"../source/Noise\";\nimport { Instrument } from \"./Instrument\";\n/**\n * Karplus-String string synthesis.\n * @example\n * import { PluckSynth } from \"tone\";\n * const plucky = new PluckSynth().toDestination();\n * plucky.triggerAttack(\"C4\", \"+0.5\");\n * plucky.triggerAttack(\"C3\", \"+1\");\n * plucky.triggerAttack(\"C2\", \"+1.5\");\n * plucky.triggerAttack(\"C1\", \"+2\");\n * @category Instrument\n */\nvar PluckSynth = /** @class */ (function (_super) {\n    tslib_1.__extends(PluckSynth, _super);\n    function PluckSynth() {\n        var _this = _super.call(this, optionsFromArguments(PluckSynth.getDefaults(), arguments)) || this;\n        _this.name = \"PluckSynth\";\n        var options = optionsFromArguments(PluckSynth.getDefaults(), arguments);\n        _this._noise = new Noise({\n            context: _this.context,\n            type: \"pink\"\n        });\n        _this.attackNoise = options.attackNoise;\n        _this._lfcf = new LowpassCombFilter({\n            context: _this.context,\n            dampening: options.dampening,\n            resonance: options.resonance,\n        });\n        _this.resonance = options.resonance;\n        _this.release = options.release;\n        _this._noise.connect(_this._lfcf);\n        _this._lfcf.connect(_this.output);\n        return _this;\n    }\n    PluckSynth.getDefaults = function () {\n        return deepMerge(Instrument.getDefaults(), {\n            attackNoise: 1,\n            dampening: 4000,\n            resonance: 0.7,\n            release: 1,\n        });\n    };\n    Object.defineProperty(PluckSynth.prototype, \"dampening\", {\n        /**\n         * The dampening control. i.e. the lowpass filter frequency of the comb filter\n         * @min 0\n         * @max 7000\n         */\n        get: function () {\n            return this._lfcf.dampening;\n        },\n        set: function (fq) {\n            this._lfcf.dampening = fq;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    PluckSynth.prototype.triggerAttack = function (note, time) {\n        var freq = this.toFrequency(note);\n        time = this.toSeconds(time);\n        var delayAmount = 1 / freq;\n        this._lfcf.delayTime.setValueAtTime(delayAmount, time);\n        this._noise.start(time);\n        this._noise.stop(time + delayAmount * this.attackNoise);\n        this._lfcf.resonance.cancelScheduledValues(time);\n        this._lfcf.resonance.setValueAtTime(this.resonance, time);\n        return this;\n    };\n    /**\n     * Ramp down the [[resonance]] to 0 over the duration of the release time.\n     */\n    PluckSynth.prototype.triggerRelease = function (time) {\n        this._lfcf.resonance.linearRampTo(0, this.release, time);\n        return this;\n    };\n    PluckSynth.prototype.dispose = function () {\n        _super.prototype.dispose.call(this);\n        this._noise.dispose();\n        this._lfcf.dispose();\n        return this;\n    };\n    return PluckSynth;\n}(Instrument));\nexport { PluckSynth };\n//# sourceMappingURL=PluckSynth.js.map"]},"metadata":{},"sourceType":"module"}