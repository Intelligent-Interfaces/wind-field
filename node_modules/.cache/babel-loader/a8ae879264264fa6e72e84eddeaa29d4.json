{"ast":null,"code":"import * as tslib_1 from \"tslib\";\nimport { ToneAudioNode } from \"../../core/context/ToneAudioNode\";\nimport { GreaterThan } from \"../../signal/GreaterThan\";\nimport { Gain } from \"../../core/context/Gain\";\nimport { Follower } from \"../analysis/Follower\";\nimport { optionsFromArguments } from \"../../core/util/Defaults\";\nimport { dbToGain, gainToDb } from \"../../core/type/Conversions\";\n/**\n * Gate only passes a signal through when the incoming\n * signal exceeds a specified threshold. It uses [[Follower]] to follow the ampltiude\n * of the incoming signal and compares it to the [[threshold]] value using [[GreaterThan]].\n *\n * @example\n * import { Gate, UserMedia } from \"tone\";\n * const gate = new Gate(-30, 0.2).toDestination();\n * const mic = new UserMedia().connect(gate);\n * // the gate will only pass through the incoming\n * // signal when it's louder than -30db\n */\n\nvar Gate =\n/** @class */\nfunction (_super) {\n  tslib_1.__extends(Gate, _super);\n\n  function Gate() {\n    var _this = _super.call(this, Object.assign(optionsFromArguments(Gate.getDefaults(), arguments, [\"threshold\", \"smoothing\"]))) || this;\n\n    _this.name = \"Gate\";\n    var options = optionsFromArguments(Gate.getDefaults(), arguments, [\"threshold\", \"smoothing\"]);\n    _this._follower = new Follower({\n      context: _this.context,\n      smoothing: options.smoothing\n    });\n    _this._gt = new GreaterThan({\n      context: _this.context,\n      value: dbToGain(options.threshold)\n    });\n    _this.input = new Gain({\n      context: _this.context\n    });\n    _this._gate = _this.output = new Gain({\n      context: _this.context\n    }); // connections\n\n    _this.input.connect(_this._gate); // the control signal\n\n\n    _this.input.chain(_this._follower, _this._gt, _this._gate.gain);\n\n    return _this;\n  }\n\n  Gate.getDefaults = function () {\n    return Object.assign(ToneAudioNode.getDefaults(), {\n      smoothing: 0.1,\n      threshold: -40\n    });\n  };\n\n  Object.defineProperty(Gate.prototype, \"threshold\", {\n    /**\n     * The threshold of the gate in decibels\n     */\n    get: function () {\n      return gainToDb(this._gt.value);\n    },\n    set: function (thresh) {\n      this._gt.value = dbToGain(thresh);\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(Gate.prototype, \"smoothing\", {\n    /**\n     * The attack/decay speed of the gate. See [[Follower.smoothing]]\n     */\n    get: function () {\n      return this._follower.smoothing;\n    },\n    set: function (smoothingTime) {\n      this._follower.smoothing = smoothingTime;\n    },\n    enumerable: true,\n    configurable: true\n  });\n\n  Gate.prototype.dispose = function () {\n    _super.prototype.dispose.call(this);\n\n    this.input.dispose();\n\n    this._follower.dispose();\n\n    this._gt.dispose();\n\n    this._gate.dispose();\n\n    return this;\n  };\n\n  return Gate;\n}(ToneAudioNode);\n\nexport { Gate };","map":{"version":3,"sources":["../../../../Tone/component/dynamics/Gate.ts"],"names":[],"mappings":"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","sourceRoot":"","sourcesContent":["import * as tslib_1 from \"tslib\";\nimport { ToneAudioNode } from \"../../core/context/ToneAudioNode\";\nimport { GreaterThan } from \"../../signal/GreaterThan\";\nimport { Gain } from \"../../core/context/Gain\";\nimport { Follower } from \"../analysis/Follower\";\nimport { optionsFromArguments } from \"../../core/util/Defaults\";\nimport { dbToGain, gainToDb } from \"../../core/type/Conversions\";\n/**\n * Gate only passes a signal through when the incoming\n * signal exceeds a specified threshold. It uses [[Follower]] to follow the ampltiude\n * of the incoming signal and compares it to the [[threshold]] value using [[GreaterThan]].\n *\n * @example\n * import { Gate, UserMedia } from \"tone\";\n * const gate = new Gate(-30, 0.2).toDestination();\n * const mic = new UserMedia().connect(gate);\n * // the gate will only pass through the incoming\n * // signal when it's louder than -30db\n */\nvar Gate = /** @class */ (function (_super) {\n    tslib_1.__extends(Gate, _super);\n    function Gate() {\n        var _this = _super.call(this, Object.assign(optionsFromArguments(Gate.getDefaults(), arguments, [\"threshold\", \"smoothing\"]))) || this;\n        _this.name = \"Gate\";\n        var options = optionsFromArguments(Gate.getDefaults(), arguments, [\"threshold\", \"smoothing\"]);\n        _this._follower = new Follower({\n            context: _this.context,\n            smoothing: options.smoothing,\n        });\n        _this._gt = new GreaterThan({\n            context: _this.context,\n            value: dbToGain(options.threshold),\n        });\n        _this.input = new Gain({ context: _this.context });\n        _this._gate = _this.output = new Gain({ context: _this.context });\n        // connections\n        _this.input.connect(_this._gate);\n        // the control signal\n        _this.input.chain(_this._follower, _this._gt, _this._gate.gain);\n        return _this;\n    }\n    Gate.getDefaults = function () {\n        return Object.assign(ToneAudioNode.getDefaults(), {\n            smoothing: 0.1,\n            threshold: -40\n        });\n    };\n    Object.defineProperty(Gate.prototype, \"threshold\", {\n        /**\n         * The threshold of the gate in decibels\n         */\n        get: function () {\n            return gainToDb(this._gt.value);\n        },\n        set: function (thresh) {\n            this._gt.value = dbToGain(thresh);\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(Gate.prototype, \"smoothing\", {\n        /**\n         * The attack/decay speed of the gate. See [[Follower.smoothing]]\n         */\n        get: function () {\n            return this._follower.smoothing;\n        },\n        set: function (smoothingTime) {\n            this._follower.smoothing = smoothingTime;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Gate.prototype.dispose = function () {\n        _super.prototype.dispose.call(this);\n        this.input.dispose();\n        this._follower.dispose();\n        this._gt.dispose();\n        this._gate.dispose();\n        return this;\n    };\n    return Gate;\n}(ToneAudioNode));\nexport { Gate };\n//# sourceMappingURL=Gate.js.map"]},"metadata":{},"sourceType":"module"}