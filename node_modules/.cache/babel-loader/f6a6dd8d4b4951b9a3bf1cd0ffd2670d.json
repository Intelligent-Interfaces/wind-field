{"ast":null,"code":"import * as tslib_1 from \"tslib\";\nimport { Effect } from \"./Effect\";\nimport { Filter } from \"../component/filter/Filter\";\nimport { Follower } from \"../component/analysis/Follower\";\nimport { optionsFromArguments } from \"../core/util/Defaults\";\nimport { Gain } from \"../core/context/Gain\";\nimport { dbToGain, gainToDb } from \"../core/type/Conversions\";\nimport { ScaleExp } from \"../signal/ScaleExp\";\nimport { readOnly } from \"../core/util/Interface\";\n/**\n * AutoWah connects a [[Follower]] to a [[Filter]].\n * The frequency of the filter, follows the input amplitude curve.\n * Inspiration from [Tuna.js](https://github.com/Dinahmoe/tuna).\n *\n * @example\n * import { AutoWah, Synth } from \"tone\";\n * const autoWah = new AutoWah(50, 6, -30).toDestination();\n * // initialize the synth and connect to autowah\n * const synth = new Synth().connect(autoWah);\n * // Q value influences the effect of the wah - default is 2\n * autoWah.Q.value = 6;\n * // more audible on higher notes\n * synth.triggerAttackRelease(\"C4\", \"8n\");\n * @category Effect\n */\n\nvar AutoWah =\n/** @class */\nfunction (_super) {\n  tslib_1.__extends(AutoWah, _super);\n\n  function AutoWah() {\n    var _this = _super.call(this, optionsFromArguments(AutoWah.getDefaults(), arguments, [\"baseFrequency\", \"octaves\", \"sensitivity\"])) || this;\n\n    _this.name = \"AutoWah\";\n    var options = optionsFromArguments(AutoWah.getDefaults(), arguments, [\"baseFrequency\", \"octaves\", \"sensitivity\"]);\n    _this._follower = new Follower({\n      context: _this.context,\n      smoothing: options.follower\n    });\n    _this._sweepRange = new ScaleExp({\n      context: _this.context,\n      min: 0,\n      max: 1,\n      exponent: 0.5\n    });\n    _this._baseFrequency = _this.toFrequency(options.baseFrequency);\n    _this._octaves = options.octaves;\n    _this._inputBoost = new Gain({\n      context: _this.context\n    });\n    _this._bandpass = new Filter({\n      context: _this.context,\n      rolloff: -48,\n      frequency: 0,\n      Q: options.Q\n    });\n    _this._peaking = new Filter({\n      context: _this.context,\n      type: \"peaking\"\n    });\n    _this._peaking.gain.value = options.gain;\n    _this.gain = _this._peaking.gain;\n    _this.Q = _this._bandpass.Q; // the control signal path\n\n    _this.effectSend.chain(_this._inputBoost, _this._follower, _this._sweepRange);\n\n    _this._sweepRange.connect(_this._bandpass.frequency);\n\n    _this._sweepRange.connect(_this._peaking.frequency); // the filtered path\n\n\n    _this.effectSend.chain(_this._bandpass, _this._peaking, _this.effectReturn); // set the initial value\n\n\n    _this._setSweepRange();\n\n    _this.sensitivity = options.sensitivity;\n    readOnly(_this, [\"gain\", \"Q\"]);\n    return _this;\n  }\n\n  AutoWah.getDefaults = function () {\n    return Object.assign(Effect.getDefaults(), {\n      baseFrequency: 100,\n      octaves: 6,\n      sensitivity: 0,\n      Q: 2,\n      gain: 2,\n      follower: 0.2\n    });\n  };\n\n  Object.defineProperty(AutoWah.prototype, \"octaves\", {\n    /**\n     * The number of octaves that the filter will sweep above the baseFrequency.\n     */\n    get: function () {\n      return this._octaves;\n    },\n    set: function (octaves) {\n      this._octaves = octaves;\n\n      this._setSweepRange();\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(AutoWah.prototype, \"follower\", {\n    /**\n     * The follower's smoothing time\n     */\n    get: function () {\n      return this._follower.smoothing;\n    },\n    set: function (follower) {\n      this._follower.smoothing = follower;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(AutoWah.prototype, \"baseFrequency\", {\n    /**\n     * The base frequency from which the sweep will start from.\n     */\n    get: function () {\n      return this._baseFrequency;\n    },\n    set: function (baseFreq) {\n      this._baseFrequency = this.toFrequency(baseFreq);\n\n      this._setSweepRange();\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(AutoWah.prototype, \"sensitivity\", {\n    /**\n     * The sensitivity to control how responsive to the input signal the filter is.\n     */\n    get: function () {\n      return gainToDb(1 / this._inputBoost.gain.value);\n    },\n    set: function (sensitivity) {\n      this._inputBoost.gain.value = 1 / dbToGain(sensitivity);\n    },\n    enumerable: true,\n    configurable: true\n  });\n  /**\n   * sets the sweep range of the scaler\n   */\n\n  AutoWah.prototype._setSweepRange = function () {\n    this._sweepRange.min = this._baseFrequency;\n    this._sweepRange.max = Math.min(this._baseFrequency * Math.pow(2, this._octaves), this.context.sampleRate / 2);\n  };\n\n  AutoWah.prototype.dispose = function () {\n    _super.prototype.dispose.call(this);\n\n    this._follower.dispose();\n\n    this._sweepRange.dispose();\n\n    this._bandpass.dispose();\n\n    this._peaking.dispose();\n\n    this._inputBoost.dispose();\n\n    return this;\n  };\n\n  return AutoWah;\n}(Effect);\n\nexport { AutoWah };","map":{"version":3,"sources":["../../../Tone/effect/AutoWah.ts"],"names":[],"mappings":"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","sourceRoot":"","sourcesContent":["import * as tslib_1 from \"tslib\";\nimport { Effect } from \"./Effect\";\nimport { Filter } from \"../component/filter/Filter\";\nimport { Follower } from \"../component/analysis/Follower\";\nimport { optionsFromArguments } from \"../core/util/Defaults\";\nimport { Gain } from \"../core/context/Gain\";\nimport { dbToGain, gainToDb } from \"../core/type/Conversions\";\nimport { ScaleExp } from \"../signal/ScaleExp\";\nimport { readOnly } from \"../core/util/Interface\";\n/**\n * AutoWah connects a [[Follower]] to a [[Filter]].\n * The frequency of the filter, follows the input amplitude curve.\n * Inspiration from [Tuna.js](https://github.com/Dinahmoe/tuna).\n *\n * @example\n * import { AutoWah, Synth } from \"tone\";\n * const autoWah = new AutoWah(50, 6, -30).toDestination();\n * // initialize the synth and connect to autowah\n * const synth = new Synth().connect(autoWah);\n * // Q value influences the effect of the wah - default is 2\n * autoWah.Q.value = 6;\n * // more audible on higher notes\n * synth.triggerAttackRelease(\"C4\", \"8n\");\n * @category Effect\n */\nvar AutoWah = /** @class */ (function (_super) {\n    tslib_1.__extends(AutoWah, _super);\n    function AutoWah() {\n        var _this = _super.call(this, optionsFromArguments(AutoWah.getDefaults(), arguments, [\"baseFrequency\", \"octaves\", \"sensitivity\"])) || this;\n        _this.name = \"AutoWah\";\n        var options = optionsFromArguments(AutoWah.getDefaults(), arguments, [\"baseFrequency\", \"octaves\", \"sensitivity\"]);\n        _this._follower = new Follower({\n            context: _this.context,\n            smoothing: options.follower,\n        });\n        _this._sweepRange = new ScaleExp({\n            context: _this.context,\n            min: 0,\n            max: 1,\n            exponent: 0.5,\n        });\n        _this._baseFrequency = _this.toFrequency(options.baseFrequency);\n        _this._octaves = options.octaves;\n        _this._inputBoost = new Gain({ context: _this.context });\n        _this._bandpass = new Filter({\n            context: _this.context,\n            rolloff: -48,\n            frequency: 0,\n            Q: options.Q,\n        });\n        _this._peaking = new Filter({\n            context: _this.context,\n            type: \"peaking\"\n        });\n        _this._peaking.gain.value = options.gain;\n        _this.gain = _this._peaking.gain;\n        _this.Q = _this._bandpass.Q;\n        // the control signal path\n        _this.effectSend.chain(_this._inputBoost, _this._follower, _this._sweepRange);\n        _this._sweepRange.connect(_this._bandpass.frequency);\n        _this._sweepRange.connect(_this._peaking.frequency);\n        // the filtered path\n        _this.effectSend.chain(_this._bandpass, _this._peaking, _this.effectReturn);\n        // set the initial value\n        _this._setSweepRange();\n        _this.sensitivity = options.sensitivity;\n        readOnly(_this, [\"gain\", \"Q\"]);\n        return _this;\n    }\n    AutoWah.getDefaults = function () {\n        return Object.assign(Effect.getDefaults(), {\n            baseFrequency: 100,\n            octaves: 6,\n            sensitivity: 0,\n            Q: 2,\n            gain: 2,\n            follower: 0.2,\n        });\n    };\n    Object.defineProperty(AutoWah.prototype, \"octaves\", {\n        /**\n         * The number of octaves that the filter will sweep above the baseFrequency.\n         */\n        get: function () {\n            return this._octaves;\n        },\n        set: function (octaves) {\n            this._octaves = octaves;\n            this._setSweepRange();\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(AutoWah.prototype, \"follower\", {\n        /**\n         * The follower's smoothing time\n         */\n        get: function () {\n            return this._follower.smoothing;\n        },\n        set: function (follower) {\n            this._follower.smoothing = follower;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(AutoWah.prototype, \"baseFrequency\", {\n        /**\n         * The base frequency from which the sweep will start from.\n         */\n        get: function () {\n            return this._baseFrequency;\n        },\n        set: function (baseFreq) {\n            this._baseFrequency = this.toFrequency(baseFreq);\n            this._setSweepRange();\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(AutoWah.prototype, \"sensitivity\", {\n        /**\n         * The sensitivity to control how responsive to the input signal the filter is.\n         */\n        get: function () {\n            return gainToDb(1 / this._inputBoost.gain.value);\n        },\n        set: function (sensitivity) {\n            this._inputBoost.gain.value = 1 / dbToGain(sensitivity);\n        },\n        enumerable: true,\n        configurable: true\n    });\n    /**\n     * sets the sweep range of the scaler\n     */\n    AutoWah.prototype._setSweepRange = function () {\n        this._sweepRange.min = this._baseFrequency;\n        this._sweepRange.max = Math.min(this._baseFrequency * Math.pow(2, this._octaves), this.context.sampleRate / 2);\n    };\n    AutoWah.prototype.dispose = function () {\n        _super.prototype.dispose.call(this);\n        this._follower.dispose();\n        this._sweepRange.dispose();\n        this._bandpass.dispose();\n        this._peaking.dispose();\n        this._inputBoost.dispose();\n        return this;\n    };\n    return AutoWah;\n}(Effect));\nexport { AutoWah };\n//# sourceMappingURL=AutoWah.js.map"]},"metadata":{},"sourceType":"module"}