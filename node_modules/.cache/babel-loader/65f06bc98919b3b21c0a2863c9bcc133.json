{"ast":null,"code":"import * as tslib_1 from \"tslib\";\nimport { optionsFromArguments } from \"../../core/util/Defaults\";\nimport { Envelope } from \"./Envelope\";\nimport { Scale } from \"../../signal/Scale\";\nimport { Pow } from \"../../signal/Pow\";\nimport { assertRange } from \"../../core/util/Debug\";\n/**\n * FrequencyEnvelope is an [[Envelope]] which ramps between [[baseFrequency]]\n * and [[octaves]]. It can also have an optional [[exponent]] to adjust the curve\n * which it ramps.\n * @example\n * import { FrequencyEnvelope, Oscillator } from \"tone\";\n * const oscillator = new Oscillator().toDestination().start();\n * const freqEnv = new FrequencyEnvelope({\n * \tattack: 0.2,\n * \tbaseFrequency: \"C2\",\n * \toctaves: 4\n * });\n * freqEnv.connect(oscillator.frequency);\n * freqEnv.triggerAttack();\n */\n\nvar FrequencyEnvelope =\n/** @class */\nfunction (_super) {\n  tslib_1.__extends(FrequencyEnvelope, _super);\n\n  function FrequencyEnvelope() {\n    var _this = _super.call(this, optionsFromArguments(FrequencyEnvelope.getDefaults(), arguments, [\"attack\", \"decay\", \"sustain\", \"release\"])) || this;\n\n    _this.name = \"FrequencyEnvelope\";\n    var options = optionsFromArguments(FrequencyEnvelope.getDefaults(), arguments, [\"attack\", \"decay\", \"sustain\", \"release\"]);\n    _this._octaves = options.octaves;\n    _this._baseFrequency = _this.toFrequency(options.baseFrequency);\n    _this._exponent = _this.input = new Pow({\n      context: _this.context,\n      value: options.exponent\n    });\n    _this._scale = _this.output = new Scale({\n      context: _this.context,\n      min: _this._baseFrequency,\n      max: _this._baseFrequency * Math.pow(2, _this._octaves)\n    });\n\n    _this._sig.chain(_this._exponent, _this._scale);\n\n    return _this;\n  }\n\n  FrequencyEnvelope.getDefaults = function () {\n    return Object.assign(Envelope.getDefaults(), {\n      baseFrequency: 200,\n      exponent: 1,\n      octaves: 4\n    });\n  };\n\n  Object.defineProperty(FrequencyEnvelope.prototype, \"baseFrequency\", {\n    /**\n     * The envelope's minimum output value. This is the value which it\n     * starts at.\n     */\n    get: function () {\n      return this._baseFrequency;\n    },\n    set: function (min) {\n      var freq = this.toFrequency(min);\n      assertRange(freq, 0);\n      this._baseFrequency = freq;\n      this._scale.min = this._baseFrequency; // update the max value when the min changes\n\n      this.octaves = this._octaves;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(FrequencyEnvelope.prototype, \"octaves\", {\n    /**\n     * The number of octaves above the baseFrequency that the\n     * envelope will scale to.\n     */\n    get: function () {\n      return this._octaves;\n    },\n    set: function (octaves) {\n      assertRange(octaves, 0);\n      this._octaves = octaves;\n      this._scale.max = this._baseFrequency * Math.pow(2, octaves);\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(FrequencyEnvelope.prototype, \"exponent\", {\n    /**\n     * The envelope's exponent value.\n     */\n    get: function () {\n      return this._exponent.value;\n    },\n    set: function (exponent) {\n      this._exponent.value = exponent;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  /**\n   * Clean up\n   */\n\n  FrequencyEnvelope.prototype.dispose = function () {\n    _super.prototype.dispose.call(this);\n\n    this._exponent.dispose();\n\n    this._scale.dispose();\n\n    return this;\n  };\n\n  return FrequencyEnvelope;\n}(Envelope);\n\nexport { FrequencyEnvelope };","map":{"version":3,"sources":["../../../../Tone/component/envelope/FrequencyEnvelope.ts"],"names":[],"mappings":"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","sourceRoot":"","sourcesContent":["import * as tslib_1 from \"tslib\";\nimport { optionsFromArguments } from \"../../core/util/Defaults\";\nimport { Envelope } from \"./Envelope\";\nimport { Scale } from \"../../signal/Scale\";\nimport { Pow } from \"../../signal/Pow\";\nimport { assertRange } from \"../../core/util/Debug\";\n/**\n * FrequencyEnvelope is an [[Envelope]] which ramps between [[baseFrequency]]\n * and [[octaves]]. It can also have an optional [[exponent]] to adjust the curve\n * which it ramps.\n * @example\n * import { FrequencyEnvelope, Oscillator } from \"tone\";\n * const oscillator = new Oscillator().toDestination().start();\n * const freqEnv = new FrequencyEnvelope({\n * \tattack: 0.2,\n * \tbaseFrequency: \"C2\",\n * \toctaves: 4\n * });\n * freqEnv.connect(oscillator.frequency);\n * freqEnv.triggerAttack();\n */\nvar FrequencyEnvelope = /** @class */ (function (_super) {\n    tslib_1.__extends(FrequencyEnvelope, _super);\n    function FrequencyEnvelope() {\n        var _this = _super.call(this, optionsFromArguments(FrequencyEnvelope.getDefaults(), arguments, [\"attack\", \"decay\", \"sustain\", \"release\"])) || this;\n        _this.name = \"FrequencyEnvelope\";\n        var options = optionsFromArguments(FrequencyEnvelope.getDefaults(), arguments, [\"attack\", \"decay\", \"sustain\", \"release\"]);\n        _this._octaves = options.octaves;\n        _this._baseFrequency = _this.toFrequency(options.baseFrequency);\n        _this._exponent = _this.input = new Pow({\n            context: _this.context,\n            value: options.exponent\n        });\n        _this._scale = _this.output = new Scale({\n            context: _this.context,\n            min: _this._baseFrequency,\n            max: _this._baseFrequency * Math.pow(2, _this._octaves),\n        });\n        _this._sig.chain(_this._exponent, _this._scale);\n        return _this;\n    }\n    FrequencyEnvelope.getDefaults = function () {\n        return Object.assign(Envelope.getDefaults(), {\n            baseFrequency: 200,\n            exponent: 1,\n            octaves: 4,\n        });\n    };\n    Object.defineProperty(FrequencyEnvelope.prototype, \"baseFrequency\", {\n        /**\n         * The envelope's minimum output value. This is the value which it\n         * starts at.\n         */\n        get: function () {\n            return this._baseFrequency;\n        },\n        set: function (min) {\n            var freq = this.toFrequency(min);\n            assertRange(freq, 0);\n            this._baseFrequency = freq;\n            this._scale.min = this._baseFrequency;\n            // update the max value when the min changes\n            this.octaves = this._octaves;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(FrequencyEnvelope.prototype, \"octaves\", {\n        /**\n         * The number of octaves above the baseFrequency that the\n         * envelope will scale to.\n         */\n        get: function () {\n            return this._octaves;\n        },\n        set: function (octaves) {\n            assertRange(octaves, 0);\n            this._octaves = octaves;\n            this._scale.max = this._baseFrequency * Math.pow(2, octaves);\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(FrequencyEnvelope.prototype, \"exponent\", {\n        /**\n         * The envelope's exponent value.\n         */\n        get: function () {\n            return this._exponent.value;\n        },\n        set: function (exponent) {\n            this._exponent.value = exponent;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    /**\n     * Clean up\n     */\n    FrequencyEnvelope.prototype.dispose = function () {\n        _super.prototype.dispose.call(this);\n        this._exponent.dispose();\n        this._scale.dispose();\n        return this;\n    };\n    return FrequencyEnvelope;\n}(Envelope));\nexport { FrequencyEnvelope };\n//# sourceMappingURL=FrequencyEnvelope.js.map"]},"metadata":{},"sourceType":"module"}