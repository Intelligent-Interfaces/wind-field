{"ast":null,"code":"import * as tslib_1 from \"tslib\";\nimport { ToneAudioNode } from \"../../core/context/ToneAudioNode\";\nimport { Compressor } from \"./Compressor\";\nimport { optionsFromArguments } from \"../../core/util/Defaults\";\nimport { readOnly } from \"../../core/util/Interface\";\nimport { MultibandSplit } from \"../channel/MultibandSplit\";\nimport { Gain } from \"../../core/context/Gain\";\n/**\n * A compressor with separate controls over low/mid/high dynamics. See [[Compressor]] and [[MultibandSplit]]\n *\n * @example\n * import { MultibandCompressor } from \"tone\";\n * const multiband = new MultibandCompressor({\n * \tlowFrequency: 200,\n * \thighFrequency: 1300,\n * \tlow: {\n * \t\tthreshold: -12\n * \t}\n * });\n */\n\nvar MultibandCompressor =\n/** @class */\nfunction (_super) {\n  tslib_1.__extends(MultibandCompressor, _super);\n\n  function MultibandCompressor() {\n    var _this = _super.call(this, Object.assign(optionsFromArguments(MultibandCompressor.getDefaults(), arguments))) || this;\n\n    _this.name = \"MultibandCompressor\";\n    var options = optionsFromArguments(MultibandCompressor.getDefaults(), arguments);\n    _this._splitter = _this.input = new MultibandSplit({\n      context: _this.context,\n      lowFrequency: options.lowFrequency,\n      highFrequency: options.highFrequency\n    });\n    _this.lowFrequency = _this._splitter.lowFrequency;\n    _this.highFrequency = _this._splitter.highFrequency;\n    _this.output = new Gain({\n      context: _this.context\n    });\n    _this.low = new Compressor(Object.assign(options.low, {\n      context: _this.context\n    }));\n    _this.mid = new Compressor(Object.assign(options.mid, {\n      context: _this.context\n    }));\n    _this.high = new Compressor(Object.assign(options.high, {\n      context: _this.context\n    })); // connect the compressor\n\n    _this._splitter.low.chain(_this.low, _this.output);\n\n    _this._splitter.mid.chain(_this.mid, _this.output);\n\n    _this._splitter.high.chain(_this.high, _this.output);\n\n    readOnly(_this, [\"high\", \"mid\", \"low\", \"highFrequency\", \"lowFrequency\"]);\n    return _this;\n  }\n\n  MultibandCompressor.getDefaults = function () {\n    return Object.assign(ToneAudioNode.getDefaults(), {\n      lowFrequency: 250,\n      highFrequency: 2000,\n      low: {\n        ratio: 6,\n        threshold: -30,\n        release: 0.25,\n        attack: 0.03,\n        knee: 10\n      },\n      mid: {\n        ratio: 3,\n        threshold: -24,\n        release: 0.03,\n        attack: 0.02,\n        knee: 16\n      },\n      high: {\n        ratio: 3,\n        threshold: -24,\n        release: 0.03,\n        attack: 0.02,\n        knee: 16\n      }\n    });\n  };\n\n  MultibandCompressor.prototype.dispose = function () {\n    _super.prototype.dispose.call(this);\n\n    this._splitter.dispose();\n\n    this.low.dispose();\n    this.mid.dispose();\n    this.high.dispose();\n    this.output.dispose();\n    return this;\n  };\n\n  return MultibandCompressor;\n}(ToneAudioNode);\n\nexport { MultibandCompressor };","map":{"version":3,"sources":["../../../../Tone/component/dynamics/MultibandCompressor.ts"],"names":[],"mappings":"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","sourceRoot":"","sourcesContent":["import * as tslib_1 from \"tslib\";\nimport { ToneAudioNode } from \"../../core/context/ToneAudioNode\";\nimport { Compressor } from \"./Compressor\";\nimport { optionsFromArguments } from \"../../core/util/Defaults\";\nimport { readOnly } from \"../../core/util/Interface\";\nimport { MultibandSplit } from \"../channel/MultibandSplit\";\nimport { Gain } from \"../../core/context/Gain\";\n/**\n * A compressor with separate controls over low/mid/high dynamics. See [[Compressor]] and [[MultibandSplit]]\n *\n * @example\n * import { MultibandCompressor } from \"tone\";\n * const multiband = new MultibandCompressor({\n * \tlowFrequency: 200,\n * \thighFrequency: 1300,\n * \tlow: {\n * \t\tthreshold: -12\n * \t}\n * });\n */\nvar MultibandCompressor = /** @class */ (function (_super) {\n    tslib_1.__extends(MultibandCompressor, _super);\n    function MultibandCompressor() {\n        var _this = _super.call(this, Object.assign(optionsFromArguments(MultibandCompressor.getDefaults(), arguments))) || this;\n        _this.name = \"MultibandCompressor\";\n        var options = optionsFromArguments(MultibandCompressor.getDefaults(), arguments);\n        _this._splitter = _this.input = new MultibandSplit({\n            context: _this.context,\n            lowFrequency: options.lowFrequency,\n            highFrequency: options.highFrequency\n        });\n        _this.lowFrequency = _this._splitter.lowFrequency;\n        _this.highFrequency = _this._splitter.highFrequency;\n        _this.output = new Gain({ context: _this.context });\n        _this.low = new Compressor(Object.assign(options.low, { context: _this.context }));\n        _this.mid = new Compressor(Object.assign(options.mid, { context: _this.context }));\n        _this.high = new Compressor(Object.assign(options.high, { context: _this.context }));\n        // connect the compressor\n        _this._splitter.low.chain(_this.low, _this.output);\n        _this._splitter.mid.chain(_this.mid, _this.output);\n        _this._splitter.high.chain(_this.high, _this.output);\n        readOnly(_this, [\"high\", \"mid\", \"low\", \"highFrequency\", \"lowFrequency\"]);\n        return _this;\n    }\n    MultibandCompressor.getDefaults = function () {\n        return Object.assign(ToneAudioNode.getDefaults(), {\n            lowFrequency: 250,\n            highFrequency: 2000,\n            low: {\n                ratio: 6,\n                threshold: -30,\n                release: 0.25,\n                attack: 0.03,\n                knee: 10\n            },\n            mid: {\n                ratio: 3,\n                threshold: -24,\n                release: 0.03,\n                attack: 0.02,\n                knee: 16\n            },\n            high: {\n                ratio: 3,\n                threshold: -24,\n                release: 0.03,\n                attack: 0.02,\n                knee: 16\n            },\n        });\n    };\n    MultibandCompressor.prototype.dispose = function () {\n        _super.prototype.dispose.call(this);\n        this._splitter.dispose();\n        this.low.dispose();\n        this.mid.dispose();\n        this.high.dispose();\n        this.output.dispose();\n        return this;\n    };\n    return MultibandCompressor;\n}(ToneAudioNode));\nexport { MultibandCompressor };\n//# sourceMappingURL=MultibandCompressor.js.map"]},"metadata":{},"sourceType":"module"}