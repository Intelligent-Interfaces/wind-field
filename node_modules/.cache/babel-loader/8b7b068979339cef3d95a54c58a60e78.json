{"ast":null,"code":"/*! Source code licensed under Apache License 2.0. Copyright © 2017-current William Ngan and contributors. (https://github.com/williamngan/pts) */\nimport { Util } from \"./Util\";\nexport class Form {\n  constructor() {\n    this._ready = false;\n  }\n\n  get ready() {\n    return this._ready;\n  }\n\n  static _checkSize(pts, required = 2) {\n    if (pts.length < required) {\n      Util.warn(\"Requires 2 or more Pts in this Group.\");\n      return false;\n    }\n\n    return true;\n  }\n\n}\nexport class VisualForm extends Form {\n  constructor() {\n    super(...arguments);\n    this._filled = true;\n    this._stroked = true;\n    this._font = new Font(14, \"sans-serif\");\n  }\n\n  get filled() {\n    return this._filled;\n  }\n\n  set filled(b) {\n    this._filled = b;\n  }\n\n  get stroked() {\n    return this._stroked;\n  }\n\n  set stroked(b) {\n    this._stroked = b;\n  }\n\n  get currentFont() {\n    return this._font;\n  }\n\n  _multiple(groups, shape, ...rest) {\n    if (!groups) return this;\n\n    for (let i = 0, len = groups.length; i < len; i++) {\n      this[shape](groups[i], ...rest);\n    }\n\n    return this;\n  }\n\n  alpha(a) {\n    return this;\n  }\n\n  fill(c) {\n    return this;\n  }\n\n  fillOnly(c) {\n    this.stroke(false);\n    return this.fill(c);\n  }\n\n  stroke(c, width, linejoin, linecap) {\n    return this;\n  }\n\n  strokeOnly(c, width, linejoin, linecap) {\n    this.fill(false);\n    return this.stroke(c, width, linejoin, linecap);\n  }\n\n  points(pts, radius, shape) {\n    if (!pts) return;\n\n    for (let i = 0, len = pts.length; i < len; i++) {\n      this.point(pts[i], radius, shape);\n    }\n\n    return this;\n  }\n\n  circles(groups) {\n    return this._multiple(groups, \"circle\");\n  }\n\n  squares(groups) {\n    return this._multiple(groups, \"square\");\n  }\n\n  lines(groups) {\n    return this._multiple(groups, \"line\");\n  }\n\n  polygons(groups) {\n    return this._multiple(groups, \"polygon\");\n  }\n\n  rects(groups) {\n    return this._multiple(groups, \"rect\");\n  }\n\n}\nexport class Font {\n  constructor(size = 12, face = \"sans-serif\", weight = \"\", style = \"\", lineHeight = 1.5) {\n    this.size = size;\n    this.face = face;\n    this.style = style;\n    this.weight = weight;\n    this.lineHeight = lineHeight;\n  }\n\n  get value() {\n    return `${this.style} ${this.weight} ${this.size}px/${this.lineHeight} ${this.face}`;\n  }\n\n  toString() {\n    return this.value;\n  }\n\n}","map":{"version":3,"sources":["/Users/erickoduniyi/Desktop/Work/multi_media_signal_processing/skeuomorphic-synth-master/node_modules/pts/dist/es2015/Form.js"],"names":["Util","Form","constructor","_ready","ready","_checkSize","pts","required","length","warn","VisualForm","arguments","_filled","_stroked","_font","Font","filled","b","stroked","currentFont","_multiple","groups","shape","rest","i","len","alpha","a","fill","c","fillOnly","stroke","width","linejoin","linecap","strokeOnly","points","radius","point","circles","squares","lines","polygons","rects","size","face","weight","style","lineHeight","value","toString"],"mappings":"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","sourcesContent":["/*! Source code licensed under Apache License 2.0. Copyright © 2017-current William Ngan and contributors. (https://github.com/williamngan/pts) */\nimport { Util } from \"./Util\";\nexport class Form {\n    constructor() {\n        this._ready = false;\n    }\n    get ready() { return this._ready; }\n    static _checkSize(pts, required = 2) {\n        if (pts.length < required) {\n            Util.warn(\"Requires 2 or more Pts in this Group.\");\n            return false;\n        }\n        return true;\n    }\n}\nexport class VisualForm extends Form {\n    constructor() {\n        super(...arguments);\n        this._filled = true;\n        this._stroked = true;\n        this._font = new Font(14, \"sans-serif\");\n    }\n    get filled() { return this._filled; }\n    set filled(b) { this._filled = b; }\n    get stroked() { return this._stroked; }\n    set stroked(b) { this._stroked = b; }\n    get currentFont() { return this._font; }\n    _multiple(groups, shape, ...rest) {\n        if (!groups)\n            return this;\n        for (let i = 0, len = groups.length; i < len; i++) {\n            this[shape](groups[i], ...rest);\n        }\n        return this;\n    }\n    alpha(a) {\n        return this;\n    }\n    fill(c) {\n        return this;\n    }\n    fillOnly(c) {\n        this.stroke(false);\n        return this.fill(c);\n    }\n    stroke(c, width, linejoin, linecap) {\n        return this;\n    }\n    strokeOnly(c, width, linejoin, linecap) {\n        this.fill(false);\n        return this.stroke(c, width, linejoin, linecap);\n    }\n    points(pts, radius, shape) {\n        if (!pts)\n            return;\n        for (let i = 0, len = pts.length; i < len; i++) {\n            this.point(pts[i], radius, shape);\n        }\n        return this;\n    }\n    circles(groups) {\n        return this._multiple(groups, \"circle\");\n    }\n    squares(groups) {\n        return this._multiple(groups, \"square\");\n    }\n    lines(groups) {\n        return this._multiple(groups, \"line\");\n    }\n    polygons(groups) {\n        return this._multiple(groups, \"polygon\");\n    }\n    rects(groups) {\n        return this._multiple(groups, \"rect\");\n    }\n}\nexport class Font {\n    constructor(size = 12, face = \"sans-serif\", weight = \"\", style = \"\", lineHeight = 1.5) {\n        this.size = size;\n        this.face = face;\n        this.style = style;\n        this.weight = weight;\n        this.lineHeight = lineHeight;\n    }\n    get value() { return `${this.style} ${this.weight} ${this.size}px/${this.lineHeight} ${this.face}`; }\n    toString() { return this.value; }\n}\n//# sourceMappingURL=Form.js.map"]},"metadata":{},"sourceType":"module"}