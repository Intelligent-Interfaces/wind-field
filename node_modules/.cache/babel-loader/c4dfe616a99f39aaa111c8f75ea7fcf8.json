{"ast":null,"code":"import * as tslib_1 from \"tslib\";\nimport { connectSeries } from \"../core/context/ToneAudioNode\";\nimport { Gain } from \"../core/context/Gain\";\nimport { optionsFromArguments } from \"../core/util/Defaults\";\nimport { Signal } from \"./Signal\";\n/**\n * Add a signal and a number or two signals. When no value is\n * passed into the constructor, Tone.Add will sum input and `addend`\n * If a value is passed into the constructor, the it will be added to the input.\n *\n * @example\n * import { Add, Signal } from \"tone\";\n * const signal = new Signal(2);\n * // add a signal and a scalar\n * const add = new Add(2);\n * signal.connect(add);\n * // the output of add equals 4\n * @example\n * import { Add, Signal } from \"tone\";\n * // Add two signal inputs\n * const add = new Add();\n * const sig0 = new Signal(3).connect(add);\n * const sig1 = new Signal(4).connect(add.addend);\n * // the output of add equals 7.\n * @category Signal\n */\n\nvar Add =\n/** @class */\nfunction (_super) {\n  tslib_1.__extends(Add, _super);\n\n  function Add() {\n    var _this = _super.call(this, Object.assign(optionsFromArguments(Add.getDefaults(), arguments, [\"value\"]))) || this;\n\n    _this.override = false;\n    _this.name = \"Add\";\n    /**\n     * the summing node\n     */\n\n    _this._sum = new Gain({\n      context: _this.context\n    });\n    _this.input = _this._sum;\n    _this.output = _this._sum;\n    /**\n     * The value which is added to the input signal\n     */\n\n    _this.addend = _this._param;\n    connectSeries(_this._constantSource, _this._sum);\n    return _this;\n  }\n\n  Add.getDefaults = function () {\n    return Object.assign(Signal.getDefaults(), {\n      value: 0\n    });\n  };\n\n  Add.prototype.dispose = function () {\n    _super.prototype.dispose.call(this);\n\n    this._sum.dispose();\n\n    return this;\n  };\n\n  return Add;\n}(Signal);\n\nexport { Add };","map":{"version":3,"sources":["../../../Tone/signal/Add.ts"],"names":[],"mappings":";AAAA,SAAS,aAAT,QAA8B,+BAA9B;AACA,SAAS,IAAT,QAAqB,sBAArB;AAEA,SAAS,oBAAT,QAAqC,uBAArC;AACA,SAAS,MAAT,QAAsC,UAAtC;AAEA;;;;;;;;;;;;;;;;;;;;;;AAqBA,IAAA,GAAA;AAAA;AAAA,UAAA,MAAA,EAAA;AAAyB,EAAA,OAAA,CAAA,SAAA,CAAA,GAAA,EAAA,MAAA;;AAuBxB,WAAA,GAAA,GAAA;AAAA,QAAA,KAAA,GACC,MAAA,CAAA,IAAA,CAAA,IAAA,EAAM,MAAM,CAAC,MAAP,CAAc,oBAAoB,CAAC,GAAG,CAAC,WAAJ,EAAD,EAAoB,SAApB,EAA+B,CAAC,OAAD,CAA/B,CAAlC,CAAN,KAAmF,IADpF;;AArBA,IAAA,KAAA,CAAA,QAAA,GAAW,KAAX;AAES,IAAA,KAAA,CAAA,IAAA,GAAe,KAAf;AAET;;;;AAGQ,IAAA,KAAA,CAAA,IAAA,GAAa,IAAI,IAAJ,CAAS;AAAE,MAAA,OAAO,EAAE,KAAI,CAAC;AAAhB,KAAT,CAAb;AACC,IAAA,KAAA,CAAA,KAAA,GAAQ,KAAI,CAAC,IAAb;AACA,IAAA,KAAA,CAAA,MAAA,GAAS,KAAI,CAAC,IAAd;AAET;;;;AAGS,IAAA,KAAA,CAAA,MAAA,GAA0B,KAAI,CAAC,MAA/B;AAUR,IAAA,aAAa,CAAC,KAAI,CAAC,eAAN,EAAuB,KAAI,CAAC,IAA5B,CAAb;;AACA;;AAEM,EAAA,GAAA,CAAA,WAAA,GAAP,YAAA;AACC,WAAO,MAAM,CAAC,MAAP,CAAc,MAAM,CAAC,WAAP,EAAd,EAAoC;AAC1C,MAAA,KAAK,EAAE;AADmC,KAApC,CAAP;AAGA,GAJM;;AAMP,EAAA,GAAA,CAAA,SAAA,CAAA,OAAA,GAAA,YAAA;AACC,IAAA,MAAA,CAAA,SAAA,CAAM,OAAN,CAAa,IAAb,CAAa,IAAb;;AACA,SAAK,IAAL,CAAU,OAAV;;AACA,WAAO,IAAP;AACA,GAJD;;AAKD,SAAA,GAAA;AAAC,CAxCD,CAAyB,MAAzB,CAAA","sourceRoot":"","sourcesContent":["import * as tslib_1 from \"tslib\";\nimport { connectSeries } from \"../core/context/ToneAudioNode\";\nimport { Gain } from \"../core/context/Gain\";\nimport { optionsFromArguments } from \"../core/util/Defaults\";\nimport { Signal } from \"./Signal\";\n/**\n * Add a signal and a number or two signals. When no value is\n * passed into the constructor, Tone.Add will sum input and `addend`\n * If a value is passed into the constructor, the it will be added to the input.\n *\n * @example\n * import { Add, Signal } from \"tone\";\n * const signal = new Signal(2);\n * // add a signal and a scalar\n * const add = new Add(2);\n * signal.connect(add);\n * // the output of add equals 4\n * @example\n * import { Add, Signal } from \"tone\";\n * // Add two signal inputs\n * const add = new Add();\n * const sig0 = new Signal(3).connect(add);\n * const sig1 = new Signal(4).connect(add.addend);\n * // the output of add equals 7.\n * @category Signal\n */\nvar Add = /** @class */ (function (_super) {\n    tslib_1.__extends(Add, _super);\n    function Add() {\n        var _this = _super.call(this, Object.assign(optionsFromArguments(Add.getDefaults(), arguments, [\"value\"]))) || this;\n        _this.override = false;\n        _this.name = \"Add\";\n        /**\n         * the summing node\n         */\n        _this._sum = new Gain({ context: _this.context });\n        _this.input = _this._sum;\n        _this.output = _this._sum;\n        /**\n         * The value which is added to the input signal\n         */\n        _this.addend = _this._param;\n        connectSeries(_this._constantSource, _this._sum);\n        return _this;\n    }\n    Add.getDefaults = function () {\n        return Object.assign(Signal.getDefaults(), {\n            value: 0,\n        });\n    };\n    Add.prototype.dispose = function () {\n        _super.prototype.dispose.call(this);\n        this._sum.dispose();\n        return this;\n    };\n    return Add;\n}(Signal));\nexport { Add };\n//# sourceMappingURL=Add.js.map"]},"metadata":{},"sourceType":"module"}