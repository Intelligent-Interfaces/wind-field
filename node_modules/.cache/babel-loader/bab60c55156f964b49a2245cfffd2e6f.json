{"ast":null,"code":"import * as tslib_1 from \"tslib\";\nimport { AmplitudeEnvelope } from \"../component/envelope/AmplitudeEnvelope\";\nimport { Envelope } from \"../component/envelope/Envelope\";\nimport { ToneAudioNode } from \"../core/context/ToneAudioNode\";\nimport { omitFromObject, optionsFromArguments } from \"../core/util/Defaults\";\nimport { readOnly } from \"../core/util/Interface\";\nimport { OmniOscillator } from \"../source/oscillator/OmniOscillator\";\nimport { Source } from \"../source/Source\";\nimport { Monophonic } from \"./Monophonic\";\n/**\n * Synth is composed simply of a {@link OmniOscillator} routed through an {@link AmplitudeEnvelope}.\n * ```\n * +----------------+   +-------------------+\n * | OmniOscillator +>--> AmplitudeEnvelope +>--> Output\n * +----------------+   +-------------------+\n * ```\n * @example\n * import { Synth } from \"tone\";\n * const synth = new Synth().toDestination();\n * synth.triggerAttackRelease(\"C4\", \"8n\");\n * @category Instrument\n */\n\nvar Synth =\n/** @class */\nfunction (_super) {\n  tslib_1.__extends(Synth, _super);\n\n  function Synth() {\n    var _this = _super.call(this, optionsFromArguments(Synth.getDefaults(), arguments)) || this;\n\n    _this.name = \"Synth\";\n    var options = optionsFromArguments(Synth.getDefaults(), arguments);\n    _this.oscillator = new OmniOscillator(Object.assign({\n      context: _this.context,\n      detune: options.detune,\n      onstop: function () {\n        return _this.onsilence(_this);\n      }\n    }, options.oscillator));\n    _this.frequency = _this.oscillator.frequency;\n    _this.detune = _this.oscillator.detune;\n    _this.envelope = new AmplitudeEnvelope(Object.assign({\n      context: _this.context\n    }, options.envelope)); // connect the oscillators to the output\n\n    _this.oscillator.chain(_this.envelope, _this.output);\n\n    readOnly(_this, [\"oscillator\", \"frequency\", \"detune\", \"envelope\"]);\n    return _this;\n  }\n\n  Synth.getDefaults = function () {\n    return Object.assign(Monophonic.getDefaults(), {\n      envelope: Object.assign(omitFromObject(Envelope.getDefaults(), Object.keys(ToneAudioNode.getDefaults())), {\n        attack: 0.005,\n        decay: 0.1,\n        release: 1,\n        sustain: 0.3\n      }),\n      oscillator: Object.assign(omitFromObject(OmniOscillator.getDefaults(), tslib_1.__spread(Object.keys(Source.getDefaults()), [\"frequency\", \"detune\"])), {\n        type: \"triangle\"\n      })\n    });\n  };\n  /**\n   * start the attack portion of the envelope\n   * @param time the time the attack should start\n   * @param velocity the velocity of the note (0-1)\n   */\n\n\n  Synth.prototype._triggerEnvelopeAttack = function (time, velocity) {\n    // the envelopes\n    this.envelope.triggerAttack(time, velocity);\n    this.oscillator.start(time); // if there is no release portion, stop the oscillator\n\n    if (this.envelope.sustain === 0) {\n      var computedAttack = this.toSeconds(this.envelope.attack);\n      var computedDecay = this.toSeconds(this.envelope.decay);\n      this.oscillator.stop(time + computedAttack + computedDecay);\n    }\n  };\n  /**\n   * start the release portion of the envelope\n   * @param time the time the release should start\n   */\n\n\n  Synth.prototype._triggerEnvelopeRelease = function (time) {\n    this.envelope.triggerRelease(time);\n    this.oscillator.stop(time + this.toSeconds(this.envelope.release));\n  };\n\n  Synth.prototype.getLevelAtTime = function (time) {\n    time = this.toSeconds(time);\n    return this.envelope.getValueAtTime(time);\n  };\n  /**\n   * clean up\n   */\n\n\n  Synth.prototype.dispose = function () {\n    _super.prototype.dispose.call(this);\n\n    this.oscillator.dispose();\n    this.envelope.dispose();\n    return this;\n  };\n\n  return Synth;\n}(Monophonic);\n\nexport { Synth };","map":{"version":3,"sources":["../../../Tone/instrument/Synth.ts"],"names":[],"mappings":";AAAA,SAAS,iBAAT,QAAkC,yCAAlC;AACA,SAAS,QAAT,QAA0C,gCAA1C;AACA,SAAS,aAAT,QAAoD,+BAApD;AAEA,SAAS,cAAT,EAAyB,oBAAzB,QAAqD,uBAArD;AACA,SAAS,QAAT,QAAyB,wBAAzB;AAGA,SAAS,cAAT,QAA+B,qCAA/B;AAEA,SAAS,MAAT,QAAuB,kBAAvB;AACA,SAAS,UAAT,QAA8C,cAA9C;AAOA;;;;;;;;;;;;;;AAaA,IAAA,KAAA;AAAA;AAAA,UAAA,MAAA,EAAA;AAAwE,EAAA,OAAA,CAAA,SAAA,CAAA,KAAA,EAAA,MAAA;;AA4BvE,WAAA,KAAA,GAAA;AAAA,QAAA,KAAA,GACC,MAAA,CAAA,IAAA,CAAA,IAAA,EAAM,oBAAoB,CAAC,KAAK,CAAC,WAAN,EAAD,EAAsB,SAAtB,CAA1B,KAA2D,IAD5D;;AA1BS,IAAA,KAAA,CAAA,IAAA,GAAe,OAAf;AA4BR,QAAM,OAAO,GAAG,oBAAoB,CAAC,KAAK,CAAC,WAAN,EAAD,EAAsB,SAAtB,CAApC;AAEA,IAAA,KAAI,CAAC,UAAL,GAAkB,IAAI,cAAJ,CAAmB,MAAM,CAAC,MAAP,CAAc;AAClD,MAAA,OAAO,EAAE,KAAI,CAAC,OADoC;AAElD,MAAA,MAAM,EAAE,OAAO,CAAC,MAFkC;AAGlD,MAAA,MAAM,EAAE,YAAA;AAAM,eAAA,KAAI,CAAC,SAAL,CAAA,KAAA,CAAA;AAAoB;AAHgB,KAAd,EAIlC,OAAO,CAAC,UAJ0B,CAAnB,CAAlB;AAMA,IAAA,KAAI,CAAC,SAAL,GAAiB,KAAI,CAAC,UAAL,CAAgB,SAAjC;AACA,IAAA,KAAI,CAAC,MAAL,GAAc,KAAI,CAAC,UAAL,CAAgB,MAA9B;AAEA,IAAA,KAAI,CAAC,QAAL,GAAgB,IAAI,iBAAJ,CAAsB,MAAM,CAAC,MAAP,CAAc;AACnD,MAAA,OAAO,EAAE,KAAI,CAAC;AADqC,KAAd,EAEnC,OAAO,CAAC,QAF2B,CAAtB,CAAhB,CAbD,CAiBC;;AACA,IAAA,KAAI,CAAC,UAAL,CAAgB,KAAhB,CAAsB,KAAI,CAAC,QAA3B,EAAqC,KAAI,CAAC,MAA1C;;AACA,IAAA,QAAQ,CAAC,KAAD,EAAO,CAAC,YAAD,EAAe,WAAf,EAA4B,QAA5B,EAAsC,UAAtC,CAAP,CAAR;;AACA;;AAEM,EAAA,KAAA,CAAA,WAAA,GAAP,YAAA;AACC,WAAO,MAAM,CAAC,MAAP,CAAc,UAAU,CAAC,WAAX,EAAd,EAAwC;AAC9C,MAAA,QAAQ,EAAE,MAAM,CAAC,MAAP,CACT,cAAc,CAAC,QAAQ,CAAC,WAAT,EAAD,EAAyB,MAAM,CAAC,IAAP,CAAY,aAAa,CAAC,WAAd,EAAZ,CAAzB,CADL,EAET;AACC,QAAA,MAAM,EAAE,KADT;AAEC,QAAA,KAAK,EAAE,GAFR;AAGC,QAAA,OAAO,EAAE,CAHV;AAIC,QAAA,OAAO,EAAE;AAJV,OAFS,CADoC;AAU9C,MAAA,UAAU,EAAE,MAAM,CAAC,MAAP,CACX,cAAc,CAAC,cAAc,CAAC,WAAf,EAAD,EAA6B,OAAA,CAAA,QAAA,CAAM,MAAM,CAAC,IAAP,CAAY,MAAM,CAAC,WAAP,EAAZ,CAAN,EAAuC,CAAE,WAAF,EAAe,QAAf,CAAvC,CAA7B,CADH,EAEX;AACC,QAAA,IAAI,EAAE;AADP,OAFW;AAVkC,KAAxC,CAAP;AAiBA,GAlBM;AAoBP;;;;;;;AAKU,EAAA,KAAA,CAAA,SAAA,CAAA,sBAAA,GAAV,UAAiC,IAAjC,EAAgD,QAAhD,EAAgE;AAC/D;AACA,SAAK,QAAL,CAAc,aAAd,CAA4B,IAA5B,EAAkC,QAAlC;AACA,SAAK,UAAL,CAAgB,KAAhB,CAAsB,IAAtB,EAH+D,CAI/D;;AACA,QAAI,KAAK,QAAL,CAAc,OAAd,KAA0B,CAA9B,EAAiC;AAChC,UAAM,cAAc,GAAG,KAAK,SAAL,CAAe,KAAK,QAAL,CAAc,MAA7B,CAAvB;AACA,UAAM,aAAa,GAAG,KAAK,SAAL,CAAe,KAAK,QAAL,CAAc,KAA7B,CAAtB;AACA,WAAK,UAAL,CAAgB,IAAhB,CAAqB,IAAI,GAAG,cAAP,GAAwB,aAA7C;AACA;AACD,GAVS;AAYV;;;;;;AAIU,EAAA,KAAA,CAAA,SAAA,CAAA,uBAAA,GAAV,UAAkC,IAAlC,EAA+C;AAC9C,SAAK,QAAL,CAAc,cAAd,CAA6B,IAA7B;AACA,SAAK,UAAL,CAAgB,IAAhB,CAAqB,IAAI,GAAG,KAAK,SAAL,CAAe,KAAK,QAAL,CAAc,OAA7B,CAA5B;AACA,GAHS;;AAKV,EAAA,KAAA,CAAA,SAAA,CAAA,cAAA,GAAA,UAAe,IAAf,EAAyB;AACxB,IAAA,IAAI,GAAG,KAAK,SAAL,CAAe,IAAf,CAAP;AACA,WAAO,KAAK,QAAL,CAAc,cAAd,CAA6B,IAA7B,CAAP;AACA,GAHD;AAKA;;;;;AAGA,EAAA,KAAA,CAAA,SAAA,CAAA,OAAA,GAAA,YAAA;AACC,IAAA,MAAA,CAAA,SAAA,CAAM,OAAN,CAAa,IAAb,CAAa,IAAb;;AACA,SAAK,UAAL,CAAgB,OAAhB;AACA,SAAK,QAAL,CAAc,OAAd;AACA,WAAO,IAAP;AACA,GALD;;AAMD,SAAA,KAAA;AAAC,CA9GD,CAAwE,UAAxE,CAAA","sourceRoot":"","sourcesContent":["import * as tslib_1 from \"tslib\";\nimport { AmplitudeEnvelope } from \"../component/envelope/AmplitudeEnvelope\";\nimport { Envelope } from \"../component/envelope/Envelope\";\nimport { ToneAudioNode } from \"../core/context/ToneAudioNode\";\nimport { omitFromObject, optionsFromArguments } from \"../core/util/Defaults\";\nimport { readOnly } from \"../core/util/Interface\";\nimport { OmniOscillator } from \"../source/oscillator/OmniOscillator\";\nimport { Source } from \"../source/Source\";\nimport { Monophonic } from \"./Monophonic\";\n/**\n * Synth is composed simply of a {@link OmniOscillator} routed through an {@link AmplitudeEnvelope}.\n * ```\n * +----------------+   +-------------------+\n * | OmniOscillator +>--> AmplitudeEnvelope +>--> Output\n * +----------------+   +-------------------+\n * ```\n * @example\n * import { Synth } from \"tone\";\n * const synth = new Synth().toDestination();\n * synth.triggerAttackRelease(\"C4\", \"8n\");\n * @category Instrument\n */\nvar Synth = /** @class */ (function (_super) {\n    tslib_1.__extends(Synth, _super);\n    function Synth() {\n        var _this = _super.call(this, optionsFromArguments(Synth.getDefaults(), arguments)) || this;\n        _this.name = \"Synth\";\n        var options = optionsFromArguments(Synth.getDefaults(), arguments);\n        _this.oscillator = new OmniOscillator(Object.assign({\n            context: _this.context,\n            detune: options.detune,\n            onstop: function () { return _this.onsilence(_this); },\n        }, options.oscillator));\n        _this.frequency = _this.oscillator.frequency;\n        _this.detune = _this.oscillator.detune;\n        _this.envelope = new AmplitudeEnvelope(Object.assign({\n            context: _this.context,\n        }, options.envelope));\n        // connect the oscillators to the output\n        _this.oscillator.chain(_this.envelope, _this.output);\n        readOnly(_this, [\"oscillator\", \"frequency\", \"detune\", \"envelope\"]);\n        return _this;\n    }\n    Synth.getDefaults = function () {\n        return Object.assign(Monophonic.getDefaults(), {\n            envelope: Object.assign(omitFromObject(Envelope.getDefaults(), Object.keys(ToneAudioNode.getDefaults())), {\n                attack: 0.005,\n                decay: 0.1,\n                release: 1,\n                sustain: 0.3,\n            }),\n            oscillator: Object.assign(omitFromObject(OmniOscillator.getDefaults(), tslib_1.__spread(Object.keys(Source.getDefaults()), [\"frequency\", \"detune\"])), {\n                type: \"triangle\",\n            }),\n        });\n    };\n    /**\n     * start the attack portion of the envelope\n     * @param time the time the attack should start\n     * @param velocity the velocity of the note (0-1)\n     */\n    Synth.prototype._triggerEnvelopeAttack = function (time, velocity) {\n        // the envelopes\n        this.envelope.triggerAttack(time, velocity);\n        this.oscillator.start(time);\n        // if there is no release portion, stop the oscillator\n        if (this.envelope.sustain === 0) {\n            var computedAttack = this.toSeconds(this.envelope.attack);\n            var computedDecay = this.toSeconds(this.envelope.decay);\n            this.oscillator.stop(time + computedAttack + computedDecay);\n        }\n    };\n    /**\n     * start the release portion of the envelope\n     * @param time the time the release should start\n     */\n    Synth.prototype._triggerEnvelopeRelease = function (time) {\n        this.envelope.triggerRelease(time);\n        this.oscillator.stop(time + this.toSeconds(this.envelope.release));\n    };\n    Synth.prototype.getLevelAtTime = function (time) {\n        time = this.toSeconds(time);\n        return this.envelope.getValueAtTime(time);\n    };\n    /**\n     * clean up\n     */\n    Synth.prototype.dispose = function () {\n        _super.prototype.dispose.call(this);\n        this.oscillator.dispose();\n        this.envelope.dispose();\n        return this;\n    };\n    return Synth;\n}(Monophonic));\nexport { Synth };\n//# sourceMappingURL=Synth.js.map"]},"metadata":{},"sourceType":"module"}