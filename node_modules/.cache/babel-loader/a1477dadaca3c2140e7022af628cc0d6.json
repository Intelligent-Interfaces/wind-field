{"ast":null,"code":"import * as tslib_1 from \"tslib\";\nimport { ToneAudioNode } from \"../../core/context/ToneAudioNode\";\nimport { optionsFromArguments } from \"../../core/util/Defaults\";\n/**\n * Merge brings multiple mono input channels into a single multichannel output channel.\n *\n * @example\n * import { Merge, Noise, Oscillator } from \"tone\";\n * const merge = new Merge().toDestination();\n * // routing a sine tone in the left channel\n * const osc = new Oscillator().connect(merge, 0, 0).start();\n * // and noise in the right channel\n * const noise = new Noise().connect(merge, 0, 1).start();;\n * @category Component\n */\n\nvar Merge =\n/** @class */\nfunction (_super) {\n  tslib_1.__extends(Merge, _super);\n\n  function Merge() {\n    var _this = _super.call(this, optionsFromArguments(Merge.getDefaults(), arguments, [\"channels\"])) || this;\n\n    _this.name = \"Merge\";\n    var options = optionsFromArguments(Merge.getDefaults(), arguments, [\"channels\"]);\n    _this._merger = _this.output = _this.input = _this.context.createChannelMerger(options.channels);\n    return _this;\n  }\n\n  Merge.getDefaults = function () {\n    return Object.assign(ToneAudioNode.getDefaults(), {\n      channels: 2\n    });\n  };\n\n  Merge.prototype.dispose = function () {\n    _super.prototype.dispose.call(this);\n\n    this._merger.disconnect();\n\n    return this;\n  };\n\n  return Merge;\n}(ToneAudioNode);\n\nexport { Merge };","map":{"version":3,"sources":["../../../../Tone/component/channel/Merge.ts"],"names":[],"mappings":";AAAA,SAAS,aAAT,QAAoD,kCAApD;AAEA,SAAS,oBAAT,QAAqC,0BAArC;AAMA;;;;;;;;;;;;;AAYA,IAAA,KAAA;AAAA;AAAA,UAAA,MAAA,EAAA;AAA2B,EAAA,OAAA,CAAA,SAAA,CAAA,KAAA,EAAA,MAAA;;AAwB1B,WAAA,KAAA,GAAA;AAAA,QAAA,KAAA,GACC,MAAA,CAAA,IAAA,CAAA,IAAA,EAAM,oBAAoB,CAAC,KAAK,CAAC,WAAN,EAAD,EAAsB,SAAtB,EAAiC,CAAC,UAAD,CAAjC,CAA1B,KAAyE,IAD1E;;AAtBS,IAAA,KAAA,CAAA,IAAA,GAAe,OAAf;AAwBR,QAAM,OAAO,GAAG,oBAAoB,CAAC,KAAK,CAAC,WAAN,EAAD,EAAsB,SAAtB,EAAiC,CAAC,UAAD,CAAjC,CAApC;AAEA,IAAA,KAAI,CAAC,OAAL,GAAe,KAAI,CAAC,MAAL,GAAc,KAAI,CAAC,KAAL,GAAa,KAAI,CAAC,OAAL,CAAa,mBAAb,CAAiC,OAAO,CAAC,QAAzC,CAA1C;;AACA;;AAEM,EAAA,KAAA,CAAA,WAAA,GAAP,YAAA;AACC,WAAO,MAAM,CAAC,MAAP,CAAc,aAAa,CAAC,WAAd,EAAd,EAA2C;AACjD,MAAA,QAAQ,EAAE;AADuC,KAA3C,CAAP;AAGA,GAJM;;AAMP,EAAA,KAAA,CAAA,SAAA,CAAA,OAAA,GAAA,YAAA;AACC,IAAA,MAAA,CAAA,SAAA,CAAM,OAAN,CAAa,IAAb,CAAa,IAAb;;AACA,SAAK,OAAL,CAAa,UAAb;;AACA,WAAO,IAAP;AACA,GAJD;;AAKD,SAAA,KAAA;AAAC,CA1CD,CAA2B,aAA3B,CAAA","sourceRoot":"","sourcesContent":["import * as tslib_1 from \"tslib\";\nimport { ToneAudioNode } from \"../../core/context/ToneAudioNode\";\nimport { optionsFromArguments } from \"../../core/util/Defaults\";\n/**\n * Merge brings multiple mono input channels into a single multichannel output channel.\n *\n * @example\n * import { Merge, Noise, Oscillator } from \"tone\";\n * const merge = new Merge().toDestination();\n * // routing a sine tone in the left channel\n * const osc = new Oscillator().connect(merge, 0, 0).start();\n * // and noise in the right channel\n * const noise = new Noise().connect(merge, 0, 1).start();;\n * @category Component\n */\nvar Merge = /** @class */ (function (_super) {\n    tslib_1.__extends(Merge, _super);\n    function Merge() {\n        var _this = _super.call(this, optionsFromArguments(Merge.getDefaults(), arguments, [\"channels\"])) || this;\n        _this.name = \"Merge\";\n        var options = optionsFromArguments(Merge.getDefaults(), arguments, [\"channels\"]);\n        _this._merger = _this.output = _this.input = _this.context.createChannelMerger(options.channels);\n        return _this;\n    }\n    Merge.getDefaults = function () {\n        return Object.assign(ToneAudioNode.getDefaults(), {\n            channels: 2,\n        });\n    };\n    Merge.prototype.dispose = function () {\n        _super.prototype.dispose.call(this);\n        this._merger.disconnect();\n        return this;\n    };\n    return Merge;\n}(ToneAudioNode));\nexport { Merge };\n//# sourceMappingURL=Merge.js.map"]},"metadata":{},"sourceType":"module"}