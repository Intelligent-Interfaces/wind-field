{"ast":null,"code":"/*! Source code licensed under Apache License 2.0. Copyright © 2017-current William Ngan and contributors. (https://github.com/williamngan/pts) */\nimport { Pt } from \"./Pt\";\nexport class Typography {\n  static textWidthEstimator(fn, samples = [\"M\", \"n\", \".\"], distribution = [0.06, 0.8, 0.14]) {\n    let m = samples.map(fn);\n    let avg = new Pt(distribution).dot(m);\n    return str => str.length * avg;\n  }\n\n  static truncate(fn, str, width, tail = \"\") {\n    let trim = Math.floor(str.length * Math.min(1, width / fn(str)));\n\n    if (trim < str.length) {\n      trim = Math.max(0, trim - tail.length);\n      return [str.substr(0, trim) + tail, trim];\n    } else {\n      return [str, str.length];\n    }\n  }\n\n  static fontSizeToBox(box, ratio = 1, byHeight = true) {\n    let i = byHeight ? 1 : 0;\n    let h = box[1][i] - box[0][i];\n    let f = ratio * h;\n    return function (b) {\n      let nh = (b[1][i] - b[0][i]) / h;\n      return f * nh;\n    };\n  }\n\n  static fontSizeToThreshold(threshold, direction = 0) {\n    return function (defaultSize, val) {\n      let d = defaultSize * val / threshold;\n      if (direction < 0) return Math.min(d, defaultSize);\n      if (direction > 0) return Math.max(d, defaultSize);\n      return d;\n    };\n  }\n\n}","map":{"version":3,"sources":["/Users/erickoduniyi/Desktop/affective_chaos_control/Emulators/wind-field/node_modules/pts/dist/es2015/Typography.js"],"names":["Pt","Typography","textWidthEstimator","fn","samples","distribution","m","map","avg","dot","str","length","truncate","width","tail","trim","Math","floor","min","max","substr","fontSizeToBox","box","ratio","byHeight","i","h","f","b","nh","fontSizeToThreshold","threshold","direction","defaultSize","val","d"],"mappings":"AAAA;AACA,SAASA,EAAT,QAAmB,MAAnB;AACA,OAAO,MAAMC,UAAN,CAAiB;AACpB,SAAOC,kBAAP,CAA0BC,EAA1B,EAA8BC,OAAO,GAAG,CAAC,GAAD,EAAM,GAAN,EAAW,GAAX,CAAxC,EAAyDC,YAAY,GAAG,CAAC,IAAD,EAAO,GAAP,EAAY,IAAZ,CAAxE,EAA2F;AACvF,QAAIC,CAAC,GAAGF,OAAO,CAACG,GAAR,CAAYJ,EAAZ,CAAR;AACA,QAAIK,GAAG,GAAG,IAAIR,EAAJ,CAAOK,YAAP,EAAqBI,GAArB,CAAyBH,CAAzB,CAAV;AACA,WAAQI,GAAD,IAASA,GAAG,CAACC,MAAJ,GAAaH,GAA7B;AACH;;AACD,SAAOI,QAAP,CAAgBT,EAAhB,EAAoBO,GAApB,EAAyBG,KAAzB,EAAgCC,IAAI,GAAG,EAAvC,EAA2C;AACvC,QAAIC,IAAI,GAAGC,IAAI,CAACC,KAAL,CAAWP,GAAG,CAACC,MAAJ,GAAaK,IAAI,CAACE,GAAL,CAAS,CAAT,EAAYL,KAAK,GAAGV,EAAE,CAACO,GAAD,CAAtB,CAAxB,CAAX;;AACA,QAAIK,IAAI,GAAGL,GAAG,CAACC,MAAf,EAAuB;AACnBI,MAAAA,IAAI,GAAGC,IAAI,CAACG,GAAL,CAAS,CAAT,EAAYJ,IAAI,GAAGD,IAAI,CAACH,MAAxB,CAAP;AACA,aAAO,CAACD,GAAG,CAACU,MAAJ,CAAW,CAAX,EAAcL,IAAd,IAAsBD,IAAvB,EAA6BC,IAA7B,CAAP;AACH,KAHD,MAIK;AACD,aAAO,CAACL,GAAD,EAAMA,GAAG,CAACC,MAAV,CAAP;AACH;AACJ;;AACD,SAAOU,aAAP,CAAqBC,GAArB,EAA0BC,KAAK,GAAG,CAAlC,EAAqCC,QAAQ,GAAG,IAAhD,EAAsD;AAClD,QAAIC,CAAC,GAAGD,QAAQ,GAAG,CAAH,GAAO,CAAvB;AACA,QAAIE,CAAC,GAAIJ,GAAG,CAAC,CAAD,CAAH,CAAOG,CAAP,IAAYH,GAAG,CAAC,CAAD,CAAH,CAAOG,CAAP,CAArB;AACA,QAAIE,CAAC,GAAGJ,KAAK,GAAGG,CAAhB;AACA,WAAO,UAAUE,CAAV,EAAa;AAChB,UAAIC,EAAE,GAAG,CAACD,CAAC,CAAC,CAAD,CAAD,CAAKH,CAAL,IAAUG,CAAC,CAAC,CAAD,CAAD,CAAKH,CAAL,CAAX,IAAsBC,CAA/B;AACA,aAAOC,CAAC,GAAGE,EAAX;AACH,KAHD;AAIH;;AACD,SAAOC,mBAAP,CAA2BC,SAA3B,EAAsCC,SAAS,GAAG,CAAlD,EAAqD;AACjD,WAAO,UAAUC,WAAV,EAAuBC,GAAvB,EAA4B;AAC/B,UAAIC,CAAC,GAAGF,WAAW,GAAGC,GAAd,GAAoBH,SAA5B;AACA,UAAIC,SAAS,GAAG,CAAhB,EACI,OAAOhB,IAAI,CAACE,GAAL,CAASiB,CAAT,EAAYF,WAAZ,CAAP;AACJ,UAAID,SAAS,GAAG,CAAhB,EACI,OAAOhB,IAAI,CAACG,GAAL,CAASgB,CAAT,EAAYF,WAAZ,CAAP;AACJ,aAAOE,CAAP;AACH,KAPD;AAQH;;AAlCmB","sourcesContent":["/*! Source code licensed under Apache License 2.0. Copyright © 2017-current William Ngan and contributors. (https://github.com/williamngan/pts) */\nimport { Pt } from \"./Pt\";\nexport class Typography {\n    static textWidthEstimator(fn, samples = [\"M\", \"n\", \".\"], distribution = [0.06, 0.8, 0.14]) {\n        let m = samples.map(fn);\n        let avg = new Pt(distribution).dot(m);\n        return (str) => str.length * avg;\n    }\n    static truncate(fn, str, width, tail = \"\") {\n        let trim = Math.floor(str.length * Math.min(1, width / fn(str)));\n        if (trim < str.length) {\n            trim = Math.max(0, trim - tail.length);\n            return [str.substr(0, trim) + tail, trim];\n        }\n        else {\n            return [str, str.length];\n        }\n    }\n    static fontSizeToBox(box, ratio = 1, byHeight = true) {\n        let i = byHeight ? 1 : 0;\n        let h = (box[1][i] - box[0][i]);\n        let f = ratio * h;\n        return function (b) {\n            let nh = (b[1][i] - b[0][i]) / h;\n            return f * nh;\n        };\n    }\n    static fontSizeToThreshold(threshold, direction = 0) {\n        return function (defaultSize, val) {\n            let d = defaultSize * val / threshold;\n            if (direction < 0)\n                return Math.min(d, defaultSize);\n            if (direction > 0)\n                return Math.max(d, defaultSize);\n            return d;\n        };\n    }\n}\n//# sourceMappingURL=Typography.js.map"]},"metadata":{},"sourceType":"module"}