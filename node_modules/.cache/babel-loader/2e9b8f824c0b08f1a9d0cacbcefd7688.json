{"ast":null,"code":"import * as tslib_1 from \"tslib\";\nimport { optionsFromArguments } from \"../core/util/Defaults\";\nimport { Subtract } from \"./Subtract\";\nimport { Signal } from \"./Signal\";\nimport { GreaterThanZero } from \"./GreaterThanZero\";\nimport { readOnly } from \"../core/util/Interface\";\n/**\n * Output 1 if the signal is greater than the value, otherwise outputs 0.\n * can compare two signals or a signal and a number.\n *\n * @example\n * import { GreaterThan, Signal } from \"tone\";\n * const gt = new GreaterThan(2);\n * const sig = new Signal(4).connect(gt);\n * // output of gt is equal 1.\n */\n\nvar GreaterThan =\n/** @class */\nfunction (_super) {\n  tslib_1.__extends(GreaterThan, _super);\n\n  function GreaterThan() {\n    var _this = _super.call(this, Object.assign(optionsFromArguments(GreaterThan.getDefaults(), arguments, [\"value\"]))) || this;\n\n    _this.name = \"GreaterThan\";\n    _this.override = false;\n    var options = optionsFromArguments(GreaterThan.getDefaults(), arguments, [\"value\"]);\n    _this._subtract = _this.input = new Subtract({\n      context: _this.context,\n      value: options.value\n    });\n    _this._gtz = _this.output = new GreaterThanZero({\n      context: _this.context\n    });\n    _this.comparator = _this._param = _this._subtract.subtrahend;\n    readOnly(_this, \"comparator\"); // connect\n\n    _this._subtract.connect(_this._gtz);\n\n    return _this;\n  }\n\n  GreaterThan.getDefaults = function () {\n    return Object.assign(Signal.getDefaults(), {\n      value: 0\n    });\n  };\n\n  GreaterThan.prototype.dispose = function () {\n    _super.prototype.dispose.call(this);\n\n    this._gtz.dispose();\n\n    this._subtract.dispose();\n\n    this.comparator.dispose();\n    return this;\n  };\n\n  return GreaterThan;\n}(Signal);\n\nexport { GreaterThan };","map":{"version":3,"sources":["../../../Tone/signal/GreaterThan.ts"],"names":[],"mappings":";AACA,SAAS,oBAAT,QAAqC,uBAArC;AACA,SAAS,QAAT,QAAyB,YAAzB;AACA,SAAS,MAAT,QAAsC,UAAtC;AACA,SAAS,eAAT,QAAgC,mBAAhC;AACA,SAAS,QAAT,QAAyB,wBAAzB;AAKA;;;;;;;;;;;AAUA,IAAA,WAAA;AAAA;AAAA,UAAA,MAAA,EAAA;AAAiC,EAAA,OAAA,CAAA,SAAA,CAAA,WAAA,EAAA,MAAA;;AA6BhC,WAAA,WAAA,GAAA;AAAA,QAAA,KAAA,GACC,MAAA,CAAA,IAAA,CAAA,IAAA,EAAM,MAAM,CAAC,MAAP,CAAc,oBAAoB,CAAC,WAAW,CAAC,WAAZ,EAAD,EAA4B,SAA5B,EAAuC,CAAC,OAAD,CAAvC,CAAlC,CAAN,KAA2F,IAD5F;;AA3BS,IAAA,KAAA,CAAA,IAAA,GAAe,aAAf;AAEA,IAAA,KAAA,CAAA,QAAA,GAAoB,KAApB;AA2BR,QAAM,OAAO,GAAG,oBAAoB,CAAC,WAAW,CAAC,WAAZ,EAAD,EAA4B,SAA5B,EAAuC,CAAC,OAAD,CAAvC,CAApC;AAEA,IAAA,KAAI,CAAC,SAAL,GAAiB,KAAI,CAAC,KAAL,GAAa,IAAI,QAAJ,CAAa;AAC1C,MAAA,OAAO,EAAE,KAAI,CAAC,OAD4B;AAE1C,MAAA,KAAK,EAAE,OAAO,CAAC;AAF2B,KAAb,CAA9B;AAIA,IAAA,KAAI,CAAC,IAAL,GAAY,KAAI,CAAC,MAAL,GAAc,IAAI,eAAJ,CAAoB;AAAE,MAAA,OAAO,EAAE,KAAI,CAAC;AAAhB,KAApB,CAA1B;AAEA,IAAA,KAAI,CAAC,UAAL,GAAkB,KAAI,CAAC,MAAL,GAAc,KAAI,CAAC,SAAL,CAAe,UAA/C;AACA,IAAA,QAAQ,CAAC,KAAD,EAAO,YAAP,CAAR,CAXD,CAaC;;AACA,IAAA,KAAI,CAAC,SAAL,CAAe,OAAf,CAAuB,KAAI,CAAC,IAA5B;;;AACA;;AAEM,EAAA,WAAA,CAAA,WAAA,GAAP,YAAA;AACC,WAAO,MAAM,CAAC,MAAP,CAAc,MAAM,CAAC,WAAP,EAAd,EAAoC;AAC1C,MAAA,KAAK,EAAE;AADmC,KAApC,CAAP;AAGA,GAJM;;AAMP,EAAA,WAAA,CAAA,SAAA,CAAA,OAAA,GAAA,YAAA;AACC,IAAA,MAAA,CAAA,SAAA,CAAM,OAAN,CAAa,IAAb,CAAa,IAAb;;AACA,SAAK,IAAL,CAAU,OAAV;;AACA,SAAK,SAAL,CAAe,OAAf;;AACA,SAAK,UAAL,CAAgB,OAAhB;AACA,WAAO,IAAP;AACA,GAND;;AAOD,SAAA,WAAA;AAAC,CA3DD,CAAiC,MAAjC,CAAA","sourceRoot":"","sourcesContent":["import * as tslib_1 from \"tslib\";\nimport { optionsFromArguments } from \"../core/util/Defaults\";\nimport { Subtract } from \"./Subtract\";\nimport { Signal } from \"./Signal\";\nimport { GreaterThanZero } from \"./GreaterThanZero\";\nimport { readOnly } from \"../core/util/Interface\";\n/**\n * Output 1 if the signal is greater than the value, otherwise outputs 0.\n * can compare two signals or a signal and a number.\n *\n * @example\n * import { GreaterThan, Signal } from \"tone\";\n * const gt = new GreaterThan(2);\n * const sig = new Signal(4).connect(gt);\n * // output of gt is equal 1.\n */\nvar GreaterThan = /** @class */ (function (_super) {\n    tslib_1.__extends(GreaterThan, _super);\n    function GreaterThan() {\n        var _this = _super.call(this, Object.assign(optionsFromArguments(GreaterThan.getDefaults(), arguments, [\"value\"]))) || this;\n        _this.name = \"GreaterThan\";\n        _this.override = false;\n        var options = optionsFromArguments(GreaterThan.getDefaults(), arguments, [\"value\"]);\n        _this._subtract = _this.input = new Subtract({\n            context: _this.context,\n            value: options.value\n        });\n        _this._gtz = _this.output = new GreaterThanZero({ context: _this.context });\n        _this.comparator = _this._param = _this._subtract.subtrahend;\n        readOnly(_this, \"comparator\");\n        // connect\n        _this._subtract.connect(_this._gtz);\n        return _this;\n    }\n    GreaterThan.getDefaults = function () {\n        return Object.assign(Signal.getDefaults(), {\n            value: 0,\n        });\n    };\n    GreaterThan.prototype.dispose = function () {\n        _super.prototype.dispose.call(this);\n        this._gtz.dispose();\n        this._subtract.dispose();\n        this.comparator.dispose();\n        return this;\n    };\n    return GreaterThan;\n}(Signal));\nexport { GreaterThan };\n//# sourceMappingURL=GreaterThan.js.map"]},"metadata":{},"sourceType":"module"}