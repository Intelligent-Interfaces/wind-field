{"ast":null,"code":"import * as tslib_1 from \"tslib\";\nimport { optionsFromArguments } from \"../../core/util/Defaults\";\nimport { MeterBase } from \"./MeterBase\";\n/**\n * Get the current waveform data of the connected audio source.\n * @category Component\n */\n\nvar Waveform =\n/** @class */\nfunction (_super) {\n  tslib_1.__extends(Waveform, _super);\n\n  function Waveform() {\n    var _this = _super.call(this, optionsFromArguments(Waveform.getDefaults(), arguments, [\"size\"])) || this;\n\n    _this.name = \"Waveform\";\n    var options = optionsFromArguments(Waveform.getDefaults(), arguments, [\"size\"]);\n    _this._analyser.type = \"waveform\";\n    _this.size = options.size;\n    return _this;\n  }\n\n  Waveform.getDefaults = function () {\n    return Object.assign(MeterBase.getDefaults(), {\n      size: 1024\n    });\n  };\n  /**\n   * Return the waveform for the current time as a Float32Array where each value in the array\n   * represents a sample in the waveform.\n   */\n\n\n  Waveform.prototype.getValue = function () {\n    return this._analyser.getValue();\n  };\n\n  Object.defineProperty(Waveform.prototype, \"size\", {\n    /**\n     * The size of analysis. This must be a power of two in the range 16 to 16384.\n     * Determines the size of the array returned by [[getValue]].\n     */\n    get: function () {\n      return this._analyser.size;\n    },\n    set: function (size) {\n      this._analyser.size = size;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  return Waveform;\n}(MeterBase);\n\nexport { Waveform };","map":{"version":3,"sources":["../../../../Tone/component/analysis/Waveform.ts"],"names":[],"mappings":";AACA,SAAS,oBAAT,QAAqC,0BAArC;AACA,SAAS,SAAT,QAA4C,aAA5C;AASA;;;;;AAIA,IAAA,QAAA;AAAA;AAAA,UAAA,MAAA,EAAA;AAA8B,EAAA,OAAA,CAAA,SAAA,CAAA,QAAA,EAAA,MAAA;;AAS7B,WAAA,QAAA,GAAA;AAAA,QAAA,KAAA,GACC,MAAA,CAAA,IAAA,CAAA,IAAA,EAAM,oBAAoB,CAAC,QAAQ,CAAC,WAAT,EAAD,EAAyB,SAAzB,EAAoC,CAAC,MAAD,CAApC,CAA1B,KAAwE,IADzE;;AAPS,IAAA,KAAA,CAAA,IAAA,GAAe,UAAf;AASR,QAAM,OAAO,GAAG,oBAAoB,CAAC,QAAQ,CAAC,WAAT,EAAD,EAAyB,SAAzB,EAAoC,CAAC,MAAD,CAApC,CAApC;AAEA,IAAA,KAAI,CAAC,SAAL,CAAe,IAAf,GAAsB,UAAtB;AACA,IAAA,KAAI,CAAC,IAAL,GAAY,OAAO,CAAC,IAApB;;AACA;;AAEM,EAAA,QAAA,CAAA,WAAA,GAAP,YAAA;AACC,WAAO,MAAM,CAAC,MAAP,CAAc,SAAS,CAAC,WAAV,EAAd,EAAuC;AAC7C,MAAA,IAAI,EAAE;AADuC,KAAvC,CAAP;AAGA,GAJM;AAMP;;;;;;AAIA,EAAA,QAAA,CAAA,SAAA,CAAA,QAAA,GAAA,YAAA;AACC,WAAO,KAAK,SAAL,CAAe,QAAf,EAAP;AACA,GAFD;;AAQA,EAAA,MAAA,CAAA,cAAA,CAAI,QAAA,CAAA,SAAJ,EAAI,MAAJ,EAAQ;AAJR;;;;SAIA,YAAA;AACC,aAAO,KAAK,SAAL,CAAe,IAAtB;AACA,KAFO;SAGR,UAAS,IAAT,EAAa;AACZ,WAAK,SAAL,CAAe,IAAf,GAAsB,IAAtB;AACA,KALO;oBAAA;;AAAA,GAAR;AAMD,SAAA,QAAA;AAAC,CAzCD,CAA8B,SAA9B,CAAA","sourceRoot":"","sourcesContent":["import * as tslib_1 from \"tslib\";\nimport { optionsFromArguments } from \"../../core/util/Defaults\";\nimport { MeterBase } from \"./MeterBase\";\n/**\n * Get the current waveform data of the connected audio source.\n * @category Component\n */\nvar Waveform = /** @class */ (function (_super) {\n    tslib_1.__extends(Waveform, _super);\n    function Waveform() {\n        var _this = _super.call(this, optionsFromArguments(Waveform.getDefaults(), arguments, [\"size\"])) || this;\n        _this.name = \"Waveform\";\n        var options = optionsFromArguments(Waveform.getDefaults(), arguments, [\"size\"]);\n        _this._analyser.type = \"waveform\";\n        _this.size = options.size;\n        return _this;\n    }\n    Waveform.getDefaults = function () {\n        return Object.assign(MeterBase.getDefaults(), {\n            size: 1024,\n        });\n    };\n    /**\n     * Return the waveform for the current time as a Float32Array where each value in the array\n     * represents a sample in the waveform.\n     */\n    Waveform.prototype.getValue = function () {\n        return this._analyser.getValue();\n    };\n    Object.defineProperty(Waveform.prototype, \"size\", {\n        /**\n         * The size of analysis. This must be a power of two in the range 16 to 16384.\n         * Determines the size of the array returned by [[getValue]].\n         */\n        get: function () {\n            return this._analyser.size;\n        },\n        set: function (size) {\n            this._analyser.size = size;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    return Waveform;\n}(MeterBase));\nexport { Waveform };\n//# sourceMappingURL=Waveform.js.map"]},"metadata":{},"sourceType":"module"}