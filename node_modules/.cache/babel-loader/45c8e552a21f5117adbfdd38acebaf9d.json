{"ast":null,"code":"import * as tslib_1 from \"tslib\";\nimport { Signal } from \"../../signal/Signal\";\nimport { optionsFromArguments } from \"../util/Defaults\";\nimport { TickParam } from \"./TickParam\";\n/**\n * TickSignal extends Tone.Signal, but adds the capability\n * to calculate the number of elapsed ticks. exponential and target curves\n * are approximated with multiple linear ramps.\n *\n * Thank you Bruno Dias, H. Sofia Pinto, and David M. Matos,\n * for your [WAC paper](https://smartech.gatech.edu/bitstream/handle/1853/54588/WAC2016-49.pdf)\n * describing integrating timing functions for tempo calculations.\n */\n\nvar TickSignal =\n/** @class */\nfunction (_super) {\n  tslib_1.__extends(TickSignal, _super);\n\n  function TickSignal() {\n    var _this = _super.call(this, optionsFromArguments(TickSignal.getDefaults(), arguments, [\"value\"])) || this;\n\n    _this.name = \"TickSignal\";\n    var options = optionsFromArguments(TickSignal.getDefaults(), arguments, [\"value\"]);\n    _this.input = _this._param = new TickParam({\n      context: _this.context,\n      convert: options.convert,\n      multiplier: options.multiplier,\n      param: _this._constantSource.offset,\n      units: options.units,\n      value: options.value\n    });\n    return _this;\n  }\n\n  TickSignal.getDefaults = function () {\n    return Object.assign(Signal.getDefaults(), {\n      multiplier: 1,\n      units: \"hertz\",\n      value: 1\n    });\n  };\n\n  TickSignal.prototype.ticksToTime = function (ticks, when) {\n    return this._param.ticksToTime(ticks, when);\n  };\n\n  TickSignal.prototype.timeToTicks = function (duration, when) {\n    return this._param.timeToTicks(duration, when);\n  };\n\n  TickSignal.prototype.getTimeOfTick = function (tick) {\n    return this._param.getTimeOfTick(tick);\n  };\n\n  TickSignal.prototype.getDurationOfTicks = function (ticks, time) {\n    return this._param.getDurationOfTicks(ticks, time);\n  };\n\n  TickSignal.prototype.getTicksAtTime = function (time) {\n    return this._param.getTicksAtTime(time);\n  };\n\n  Object.defineProperty(TickSignal.prototype, \"multiplier\", {\n    /**\n     * A multiplier on the bpm value. Useful for setting a PPQ relative to the base frequency value.\n     */\n    get: function () {\n      return this._param.multiplier;\n    },\n    set: function (m) {\n      this._param.multiplier = m;\n    },\n    enumerable: true,\n    configurable: true\n  });\n\n  TickSignal.prototype.dispose = function () {\n    _super.prototype.dispose.call(this);\n\n    this._param.dispose();\n\n    return this;\n  };\n\n  return TickSignal;\n}(Signal);\n\nexport { TickSignal };","map":{"version":3,"sources":["../../../../Tone/core/clock/TickSignal.ts"],"names":[],"mappings":"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","sourceRoot":"","sourcesContent":["import * as tslib_1 from \"tslib\";\nimport { Signal } from \"../../signal/Signal\";\nimport { optionsFromArguments } from \"../util/Defaults\";\nimport { TickParam } from \"./TickParam\";\n/**\n * TickSignal extends Tone.Signal, but adds the capability\n * to calculate the number of elapsed ticks. exponential and target curves\n * are approximated with multiple linear ramps.\n *\n * Thank you Bruno Dias, H. Sofia Pinto, and David M. Matos,\n * for your [WAC paper](https://smartech.gatech.edu/bitstream/handle/1853/54588/WAC2016-49.pdf)\n * describing integrating timing functions for tempo calculations.\n */\nvar TickSignal = /** @class */ (function (_super) {\n    tslib_1.__extends(TickSignal, _super);\n    function TickSignal() {\n        var _this = _super.call(this, optionsFromArguments(TickSignal.getDefaults(), arguments, [\"value\"])) || this;\n        _this.name = \"TickSignal\";\n        var options = optionsFromArguments(TickSignal.getDefaults(), arguments, [\"value\"]);\n        _this.input = _this._param = new TickParam({\n            context: _this.context,\n            convert: options.convert,\n            multiplier: options.multiplier,\n            param: _this._constantSource.offset,\n            units: options.units,\n            value: options.value,\n        });\n        return _this;\n    }\n    TickSignal.getDefaults = function () {\n        return Object.assign(Signal.getDefaults(), {\n            multiplier: 1,\n            units: \"hertz\",\n            value: 1,\n        });\n    };\n    TickSignal.prototype.ticksToTime = function (ticks, when) {\n        return this._param.ticksToTime(ticks, when);\n    };\n    TickSignal.prototype.timeToTicks = function (duration, when) {\n        return this._param.timeToTicks(duration, when);\n    };\n    TickSignal.prototype.getTimeOfTick = function (tick) {\n        return this._param.getTimeOfTick(tick);\n    };\n    TickSignal.prototype.getDurationOfTicks = function (ticks, time) {\n        return this._param.getDurationOfTicks(ticks, time);\n    };\n    TickSignal.prototype.getTicksAtTime = function (time) {\n        return this._param.getTicksAtTime(time);\n    };\n    Object.defineProperty(TickSignal.prototype, \"multiplier\", {\n        /**\n         * A multiplier on the bpm value. Useful for setting a PPQ relative to the base frequency value.\n         */\n        get: function () {\n            return this._param.multiplier;\n        },\n        set: function (m) {\n            this._param.multiplier = m;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    TickSignal.prototype.dispose = function () {\n        _super.prototype.dispose.call(this);\n        this._param.dispose();\n        return this;\n    };\n    return TickSignal;\n}(Signal));\nexport { TickSignal };\n//# sourceMappingURL=TickSignal.js.map"]},"metadata":{},"sourceType":"module"}