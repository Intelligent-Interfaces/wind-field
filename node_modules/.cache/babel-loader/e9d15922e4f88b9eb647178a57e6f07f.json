{"ast":null,"code":"import * as tslib_1 from \"tslib\";\nimport { MidSideEffect } from \"../effect/MidSideEffect\";\nimport { Signal } from \"../signal/Signal\";\nimport { Multiply } from \"../signal/Multiply\";\nimport { Subtract } from \"../signal/Subtract\";\nimport { optionsFromArguments } from \"../core/util/Defaults\";\nimport { readOnly } from \"../core/util/Interface\";\nimport { connect } from \"../core/context/ToneAudioNode\";\n/**\n * Applies a width factor to the mid/side seperation.\n * 0 is all mid and 1 is all side.\n * Algorithm found in [kvraudio forums](http://www.kvraudio.com/forum/viewtopic.php?t=212587).\n * ```\n * Mid *= 2*(1-width)<br>\n * Side *= 2*width\n * ```\n * @category Effect\n */\n\nvar StereoWidener =\n/** @class */\nfunction (_super) {\n  tslib_1.__extends(StereoWidener, _super);\n\n  function StereoWidener() {\n    var _this = _super.call(this, optionsFromArguments(StereoWidener.getDefaults(), arguments, [\"width\"])) || this;\n\n    _this.name = \"StereoWidener\";\n    var options = optionsFromArguments(StereoWidener.getDefaults(), arguments, [\"width\"]);\n    _this.width = new Signal({\n      context: _this.context,\n      value: options.width,\n      units: \"normalRange\"\n    });\n    readOnly(_this, [\"width\"]);\n    _this._twoTimesWidthMid = new Multiply({\n      context: _this.context,\n      value: 2\n    });\n    _this._twoTimesWidthSide = new Multiply({\n      context: _this.context,\n      value: 2\n    });\n    _this._midMult = new Multiply({\n      context: _this.context\n    });\n\n    _this._twoTimesWidthMid.connect(_this._midMult.factor);\n\n    _this.connectEffectMid(_this._midMult);\n\n    _this._oneMinusWidth = new Subtract({\n      context: _this.context\n    });\n\n    _this._oneMinusWidth.connect(_this._twoTimesWidthMid);\n\n    connect(_this.context.getConstant(1), _this._oneMinusWidth);\n\n    _this.width.connect(_this._oneMinusWidth.subtrahend);\n\n    _this._sideMult = new Multiply({\n      context: _this.context\n    });\n\n    _this.width.connect(_this._twoTimesWidthSide);\n\n    _this._twoTimesWidthSide.connect(_this._sideMult.factor);\n\n    _this.connectEffectSide(_this._sideMult);\n\n    return _this;\n  }\n\n  StereoWidener.getDefaults = function () {\n    return Object.assign(MidSideEffect.getDefaults(), {\n      width: 0.5\n    });\n  };\n\n  StereoWidener.prototype.dispose = function () {\n    _super.prototype.dispose.call(this);\n\n    this.width.dispose();\n\n    this._midMult.dispose();\n\n    this._sideMult.dispose();\n\n    this._twoTimesWidthMid.dispose();\n\n    this._twoTimesWidthSide.dispose();\n\n    this._oneMinusWidth.dispose();\n\n    return this;\n  };\n\n  return StereoWidener;\n}(MidSideEffect);\n\nexport { StereoWidener };","map":{"version":3,"sources":["../../../Tone/effect/StereoWidener.ts"],"names":[],"mappings":"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","sourceRoot":"","sourcesContent":["import * as tslib_1 from \"tslib\";\nimport { MidSideEffect } from \"../effect/MidSideEffect\";\nimport { Signal } from \"../signal/Signal\";\nimport { Multiply } from \"../signal/Multiply\";\nimport { Subtract } from \"../signal/Subtract\";\nimport { optionsFromArguments } from \"../core/util/Defaults\";\nimport { readOnly } from \"../core/util/Interface\";\nimport { connect } from \"../core/context/ToneAudioNode\";\n/**\n * Applies a width factor to the mid/side seperation.\n * 0 is all mid and 1 is all side.\n * Algorithm found in [kvraudio forums](http://www.kvraudio.com/forum/viewtopic.php?t=212587).\n * ```\n * Mid *= 2*(1-width)<br>\n * Side *= 2*width\n * ```\n * @category Effect\n */\nvar StereoWidener = /** @class */ (function (_super) {\n    tslib_1.__extends(StereoWidener, _super);\n    function StereoWidener() {\n        var _this = _super.call(this, optionsFromArguments(StereoWidener.getDefaults(), arguments, [\"width\"])) || this;\n        _this.name = \"StereoWidener\";\n        var options = optionsFromArguments(StereoWidener.getDefaults(), arguments, [\"width\"]);\n        _this.width = new Signal({\n            context: _this.context,\n            value: options.width,\n            units: \"normalRange\",\n        });\n        readOnly(_this, [\"width\"]);\n        _this._twoTimesWidthMid = new Multiply({\n            context: _this.context,\n            value: 2,\n        });\n        _this._twoTimesWidthSide = new Multiply({\n            context: _this.context,\n            value: 2,\n        });\n        _this._midMult = new Multiply({ context: _this.context });\n        _this._twoTimesWidthMid.connect(_this._midMult.factor);\n        _this.connectEffectMid(_this._midMult);\n        _this._oneMinusWidth = new Subtract({ context: _this.context });\n        _this._oneMinusWidth.connect(_this._twoTimesWidthMid);\n        connect(_this.context.getConstant(1), _this._oneMinusWidth);\n        _this.width.connect(_this._oneMinusWidth.subtrahend);\n        _this._sideMult = new Multiply({ context: _this.context });\n        _this.width.connect(_this._twoTimesWidthSide);\n        _this._twoTimesWidthSide.connect(_this._sideMult.factor);\n        _this.connectEffectSide(_this._sideMult);\n        return _this;\n    }\n    StereoWidener.getDefaults = function () {\n        return Object.assign(MidSideEffect.getDefaults(), {\n            width: 0.5,\n        });\n    };\n    StereoWidener.prototype.dispose = function () {\n        _super.prototype.dispose.call(this);\n        this.width.dispose();\n        this._midMult.dispose();\n        this._sideMult.dispose();\n        this._twoTimesWidthMid.dispose();\n        this._twoTimesWidthSide.dispose();\n        this._oneMinusWidth.dispose();\n        return this;\n    };\n    return StereoWidener;\n}(MidSideEffect));\nexport { StereoWidener };\n//# sourceMappingURL=StereoWidener.js.map"]},"metadata":{},"sourceType":"module"}