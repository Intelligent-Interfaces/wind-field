{"ast":null,"code":"import * as tslib_1 from \"tslib\";\nimport { Source } from \"../Source\";\nimport { noOp } from \"../../core/util/Interface\";\nimport { ToneAudioBuffer } from \"../../core/context/ToneAudioBuffer\";\nimport { defaultArg, optionsFromArguments } from \"../../core/util/Defaults\";\nimport { Clock } from \"../../core/clock/Clock\";\nimport { ToneBufferSource } from \"./ToneBufferSource\";\nimport { intervalToFrequencyRatio } from \"../../core/type/Conversions\";\nimport { assertRange } from \"../../core/util/Debug\";\n/**\n * GrainPlayer implements [granular synthesis](https://en.wikipedia.org/wiki/Granular_synthesis).\n * Granular Synthesis enables you to adjust pitch and playback rate independently. The grainSize is the\n * amount of time each small chunk of audio is played for and the overlap is the\n * amount of crossfading transition time between successive grains.\n * @category Source\n */\n\nvar GrainPlayer =\n/** @class */\nfunction (_super) {\n  tslib_1.__extends(GrainPlayer, _super);\n\n  function GrainPlayer() {\n    var _this = _super.call(this, optionsFromArguments(GrainPlayer.getDefaults(), arguments, [\"url\", \"onload\"])) || this;\n\n    _this.name = \"GrainPlayer\";\n    /**\n     * Internal loopStart value\n     */\n\n    _this._loopStart = 0;\n    /**\n     * Internal loopStart value\n     */\n\n    _this._loopEnd = 0;\n    /**\n     * All of the currently playing BufferSources\n     */\n\n    _this._activeSources = [];\n    var options = optionsFromArguments(GrainPlayer.getDefaults(), arguments, [\"url\", \"onload\"]);\n    _this.buffer = new ToneAudioBuffer({\n      onload: options.onload,\n      reverse: options.reverse,\n      url: options.url\n    });\n    _this._clock = new Clock({\n      context: _this.context,\n      callback: _this._tick.bind(_this),\n      frequency: 1 / options.grainSize\n    });\n    _this._playbackRate = options.playbackRate;\n    _this._grainSize = options.grainSize;\n    _this._overlap = options.overlap;\n    _this.detune = options.detune; // setup\n\n    _this.overlap = options.overlap;\n    _this.loop = options.loop;\n    _this.playbackRate = options.playbackRate;\n    _this.grainSize = options.grainSize;\n    _this.loopStart = options.loopStart;\n    _this.loopEnd = options.loopEnd;\n    _this.reverse = options.reverse;\n\n    _this._clock.on(\"stop\", _this._onstop.bind(_this));\n\n    return _this;\n  }\n\n  GrainPlayer.getDefaults = function () {\n    return Object.assign(Source.getDefaults(), {\n      onload: noOp,\n      overlap: 0.1,\n      grainSize: 0.2,\n      playbackRate: 1,\n      detune: 0,\n      loop: false,\n      loopStart: 0,\n      loopEnd: 0,\n      reverse: false\n    });\n  };\n  /**\n   * Internal start method\n   */\n\n\n  GrainPlayer.prototype._start = function (time, offset, duration) {\n    offset = defaultArg(offset, 0);\n    offset = this.toSeconds(offset);\n    time = this.toSeconds(time);\n\n    var grainSize = 1 / this._clock.frequency.getValueAtTime(time);\n\n    this._clock.start(time, offset / grainSize);\n\n    if (duration) {\n      this.stop(time + this.toSeconds(duration));\n    }\n  };\n  /**\n   * Stop and then restart the player from the beginning (or offset)\n   * @param  time When the player should start.\n   * @param  offset The offset from the beginning of the sample to start at.\n   * @param  duration How long the sample should play. If no duration is given,\n   * \t\t\t\t\tit will default to the full length of the sample (minus any offset)\n   */\n\n\n  GrainPlayer.prototype.restart = function (time, offset, duration) {\n    _super.prototype.restart.call(this, time, offset, duration);\n\n    return this;\n  };\n\n  GrainPlayer.prototype._restart = function (time, offset, duration) {\n    this._stop(time);\n\n    this._start(time, offset, duration);\n  };\n  /**\n   * Internal stop method\n   */\n\n\n  GrainPlayer.prototype._stop = function (time) {\n    this._clock.stop(time);\n  };\n  /**\n   * Invoked when the clock is stopped\n   */\n\n\n  GrainPlayer.prototype._onstop = function (time) {\n    // stop the players\n    this._activeSources.forEach(function (source) {\n      source.fadeOut = 0;\n      source.stop(time);\n    });\n\n    this.onstop(this);\n  };\n  /**\n   * Invoked on each clock tick. scheduled a new grain at this time.\n   */\n\n\n  GrainPlayer.prototype._tick = function (time) {\n    var _this = this; // check if it should stop looping\n\n\n    var ticks = this._clock.getTicksAtTime(time);\n\n    var grainSize = 1 / this._clock.frequency.getValueAtTime(time);\n\n    var offset = ticks * grainSize;\n    this.log(\"offset\", offset);\n\n    if (!this.loop && offset > this.buffer.duration) {\n      this.stop(time);\n      return;\n    } // at the beginning of the file, the fade in should be 0\n\n\n    var fadeIn = offset < this._overlap ? 0 : this._overlap; // create a buffer source\n\n    var source = new ToneBufferSource({\n      context: this.context,\n      buffer: this.buffer,\n      fadeIn: fadeIn,\n      fadeOut: this._overlap,\n      loop: this.loop,\n      loopStart: this._loopStart,\n      loopEnd: this._loopEnd,\n      // compute the playbackRate based on the detune\n      playbackRate: intervalToFrequencyRatio(this.detune / 100)\n    }).connect(this.output);\n    source.start(time, this._grainSize * ticks);\n    source.stop(time + this._grainSize / this.playbackRate); // add it to the active sources\n\n    this._activeSources.push(source); // remove it when it's done\n\n\n    source.onended = function () {\n      var index = _this._activeSources.indexOf(source);\n\n      if (index !== -1) {\n        _this._activeSources.splice(index, 1);\n      }\n    };\n  };\n\n  Object.defineProperty(GrainPlayer.prototype, \"playbackRate\", {\n    /**\n     * The playback rate of the sample\n     */\n    get: function () {\n      return this._playbackRate;\n    },\n    set: function (rate) {\n      assertRange(rate, 0.001);\n      this._playbackRate = rate;\n      this.grainSize = this._grainSize;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(GrainPlayer.prototype, \"loopStart\", {\n    /**\n     * The loop start time.\n     */\n    get: function () {\n      return this._loopStart;\n    },\n    set: function (time) {\n      if (this.buffer.loaded) {\n        assertRange(this.toSeconds(time), 0, this.buffer.duration);\n      }\n\n      this._loopStart = this.toSeconds(time);\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(GrainPlayer.prototype, \"loopEnd\", {\n    /**\n     * The loop end time.\n     */\n    get: function () {\n      return this._loopEnd;\n    },\n    set: function (time) {\n      if (this.buffer.loaded) {\n        assertRange(this.toSeconds(time), 0, this.buffer.duration);\n      }\n\n      this._loopEnd = this.toSeconds(time);\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(GrainPlayer.prototype, \"reverse\", {\n    /**\n     * The direction the buffer should play in\n     */\n    get: function () {\n      return this.buffer.reverse;\n    },\n    set: function (rev) {\n      this.buffer.reverse = rev;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(GrainPlayer.prototype, \"grainSize\", {\n    /**\n     * The size of each chunk of audio that the\n     * buffer is chopped into and played back at.\n     */\n    get: function () {\n      return this._grainSize;\n    },\n    set: function (size) {\n      this._grainSize = this.toSeconds(size);\n\n      this._clock.frequency.setValueAtTime(this._playbackRate / this._grainSize, this.now());\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(GrainPlayer.prototype, \"overlap\", {\n    /**\n     * The duration of the cross-fade between successive grains.\n     */\n    get: function () {\n      return this._overlap;\n    },\n    set: function (time) {\n      this._overlap = this.toSeconds(time);\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(GrainPlayer.prototype, \"loaded\", {\n    /**\n     * If all the buffer is loaded\n     */\n    get: function () {\n      return this.buffer.loaded;\n    },\n    enumerable: true,\n    configurable: true\n  });\n\n  GrainPlayer.prototype.dispose = function () {\n    _super.prototype.dispose.call(this);\n\n    this.buffer.dispose();\n\n    this._clock.dispose();\n\n    this._activeSources.forEach(function (source) {\n      return source.dispose();\n    });\n\n    return this;\n  };\n\n  return GrainPlayer;\n}(Source);\n\nexport { GrainPlayer };","map":{"version":3,"sources":["../../../../Tone/source/buffer/GrainPlayer.ts"],"names":[],"mappings":"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","sourceRoot":"","sourcesContent":["import * as tslib_1 from \"tslib\";\nimport { Source } from \"../Source\";\nimport { noOp } from \"../../core/util/Interface\";\nimport { ToneAudioBuffer } from \"../../core/context/ToneAudioBuffer\";\nimport { defaultArg, optionsFromArguments } from \"../../core/util/Defaults\";\nimport { Clock } from \"../../core/clock/Clock\";\nimport { ToneBufferSource } from \"./ToneBufferSource\";\nimport { intervalToFrequencyRatio } from \"../../core/type/Conversions\";\nimport { assertRange } from \"../../core/util/Debug\";\n/**\n * GrainPlayer implements [granular synthesis](https://en.wikipedia.org/wiki/Granular_synthesis).\n * Granular Synthesis enables you to adjust pitch and playback rate independently. The grainSize is the\n * amount of time each small chunk of audio is played for and the overlap is the\n * amount of crossfading transition time between successive grains.\n * @category Source\n */\nvar GrainPlayer = /** @class */ (function (_super) {\n    tslib_1.__extends(GrainPlayer, _super);\n    function GrainPlayer() {\n        var _this = _super.call(this, optionsFromArguments(GrainPlayer.getDefaults(), arguments, [\"url\", \"onload\"])) || this;\n        _this.name = \"GrainPlayer\";\n        /**\n         * Internal loopStart value\n         */\n        _this._loopStart = 0;\n        /**\n         * Internal loopStart value\n         */\n        _this._loopEnd = 0;\n        /**\n         * All of the currently playing BufferSources\n         */\n        _this._activeSources = [];\n        var options = optionsFromArguments(GrainPlayer.getDefaults(), arguments, [\"url\", \"onload\"]);\n        _this.buffer = new ToneAudioBuffer({\n            onload: options.onload,\n            reverse: options.reverse,\n            url: options.url,\n        });\n        _this._clock = new Clock({\n            context: _this.context,\n            callback: _this._tick.bind(_this),\n            frequency: 1 / options.grainSize\n        });\n        _this._playbackRate = options.playbackRate;\n        _this._grainSize = options.grainSize;\n        _this._overlap = options.overlap;\n        _this.detune = options.detune;\n        // setup\n        _this.overlap = options.overlap;\n        _this.loop = options.loop;\n        _this.playbackRate = options.playbackRate;\n        _this.grainSize = options.grainSize;\n        _this.loopStart = options.loopStart;\n        _this.loopEnd = options.loopEnd;\n        _this.reverse = options.reverse;\n        _this._clock.on(\"stop\", _this._onstop.bind(_this));\n        return _this;\n    }\n    GrainPlayer.getDefaults = function () {\n        return Object.assign(Source.getDefaults(), {\n            onload: noOp,\n            overlap: 0.1,\n            grainSize: 0.2,\n            playbackRate: 1,\n            detune: 0,\n            loop: false,\n            loopStart: 0,\n            loopEnd: 0,\n            reverse: false\n        });\n    };\n    /**\n     * Internal start method\n     */\n    GrainPlayer.prototype._start = function (time, offset, duration) {\n        offset = defaultArg(offset, 0);\n        offset = this.toSeconds(offset);\n        time = this.toSeconds(time);\n        var grainSize = 1 / this._clock.frequency.getValueAtTime(time);\n        this._clock.start(time, offset / grainSize);\n        if (duration) {\n            this.stop(time + this.toSeconds(duration));\n        }\n    };\n    /**\n     * Stop and then restart the player from the beginning (or offset)\n     * @param  time When the player should start.\n     * @param  offset The offset from the beginning of the sample to start at.\n     * @param  duration How long the sample should play. If no duration is given,\n     * \t\t\t\t\tit will default to the full length of the sample (minus any offset)\n     */\n    GrainPlayer.prototype.restart = function (time, offset, duration) {\n        _super.prototype.restart.call(this, time, offset, duration);\n        return this;\n    };\n    GrainPlayer.prototype._restart = function (time, offset, duration) {\n        this._stop(time);\n        this._start(time, offset, duration);\n    };\n    /**\n     * Internal stop method\n     */\n    GrainPlayer.prototype._stop = function (time) {\n        this._clock.stop(time);\n    };\n    /**\n     * Invoked when the clock is stopped\n     */\n    GrainPlayer.prototype._onstop = function (time) {\n        // stop the players\n        this._activeSources.forEach(function (source) {\n            source.fadeOut = 0;\n            source.stop(time);\n        });\n        this.onstop(this);\n    };\n    /**\n     * Invoked on each clock tick. scheduled a new grain at this time.\n     */\n    GrainPlayer.prototype._tick = function (time) {\n        var _this = this;\n        // check if it should stop looping\n        var ticks = this._clock.getTicksAtTime(time);\n        var grainSize = 1 / this._clock.frequency.getValueAtTime(time);\n        var offset = ticks * grainSize;\n        this.log(\"offset\", offset);\n        if (!this.loop && offset > this.buffer.duration) {\n            this.stop(time);\n            return;\n        }\n        // at the beginning of the file, the fade in should be 0\n        var fadeIn = offset < this._overlap ? 0 : this._overlap;\n        // create a buffer source\n        var source = new ToneBufferSource({\n            context: this.context,\n            buffer: this.buffer,\n            fadeIn: fadeIn,\n            fadeOut: this._overlap,\n            loop: this.loop,\n            loopStart: this._loopStart,\n            loopEnd: this._loopEnd,\n            // compute the playbackRate based on the detune\n            playbackRate: intervalToFrequencyRatio(this.detune / 100)\n        }).connect(this.output);\n        source.start(time, this._grainSize * ticks);\n        source.stop(time + this._grainSize / this.playbackRate);\n        // add it to the active sources\n        this._activeSources.push(source);\n        // remove it when it's done\n        source.onended = function () {\n            var index = _this._activeSources.indexOf(source);\n            if (index !== -1) {\n                _this._activeSources.splice(index, 1);\n            }\n        };\n    };\n    Object.defineProperty(GrainPlayer.prototype, \"playbackRate\", {\n        /**\n         * The playback rate of the sample\n         */\n        get: function () {\n            return this._playbackRate;\n        },\n        set: function (rate) {\n            assertRange(rate, 0.001);\n            this._playbackRate = rate;\n            this.grainSize = this._grainSize;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(GrainPlayer.prototype, \"loopStart\", {\n        /**\n         * The loop start time.\n         */\n        get: function () {\n            return this._loopStart;\n        },\n        set: function (time) {\n            if (this.buffer.loaded) {\n                assertRange(this.toSeconds(time), 0, this.buffer.duration);\n            }\n            this._loopStart = this.toSeconds(time);\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(GrainPlayer.prototype, \"loopEnd\", {\n        /**\n         * The loop end time.\n         */\n        get: function () {\n            return this._loopEnd;\n        },\n        set: function (time) {\n            if (this.buffer.loaded) {\n                assertRange(this.toSeconds(time), 0, this.buffer.duration);\n            }\n            this._loopEnd = this.toSeconds(time);\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(GrainPlayer.prototype, \"reverse\", {\n        /**\n         * The direction the buffer should play in\n         */\n        get: function () {\n            return this.buffer.reverse;\n        },\n        set: function (rev) {\n            this.buffer.reverse = rev;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(GrainPlayer.prototype, \"grainSize\", {\n        /**\n         * The size of each chunk of audio that the\n         * buffer is chopped into and played back at.\n         */\n        get: function () {\n            return this._grainSize;\n        },\n        set: function (size) {\n            this._grainSize = this.toSeconds(size);\n            this._clock.frequency.setValueAtTime(this._playbackRate / this._grainSize, this.now());\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(GrainPlayer.prototype, \"overlap\", {\n        /**\n         * The duration of the cross-fade between successive grains.\n         */\n        get: function () {\n            return this._overlap;\n        },\n        set: function (time) {\n            this._overlap = this.toSeconds(time);\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(GrainPlayer.prototype, \"loaded\", {\n        /**\n         * If all the buffer is loaded\n         */\n        get: function () {\n            return this.buffer.loaded;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    GrainPlayer.prototype.dispose = function () {\n        _super.prototype.dispose.call(this);\n        this.buffer.dispose();\n        this._clock.dispose();\n        this._activeSources.forEach(function (source) { return source.dispose(); });\n        return this;\n    };\n    return GrainPlayer;\n}(Source));\nexport { GrainPlayer };\n//# sourceMappingURL=GrainPlayer.js.map"]},"metadata":{},"sourceType":"module"}