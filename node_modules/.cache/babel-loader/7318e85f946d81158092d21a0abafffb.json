{"ast":null,"code":"import * as tslib_1 from \"tslib\";\nimport { getContext } from \"../Global\";\nimport { Tone } from \"../Tone\";\nimport { FrequencyClass } from \"../type/Frequency\";\nimport { TimeClass } from \"../type/Time\";\nimport { TransportTimeClass } from \"../type/TransportTime\";\nimport { getDefaultsFromInstance, optionsFromArguments } from \"../util/Defaults\";\nimport { isArray, isBoolean, isDefined, isNumber, isString, isUndef } from \"../util/TypeCheck\";\n/**\n * The Base class for all nodes that have an AudioContext.\n */\n\nvar ToneWithContext =\n/** @class */\nfunction (_super) {\n  tslib_1.__extends(ToneWithContext, _super);\n\n  function ToneWithContext() {\n    var _this = _super.call(this) || this;\n\n    var options = optionsFromArguments(ToneWithContext.getDefaults(), arguments, [\"context\"]);\n\n    if (_this.defaultContext) {\n      _this.context = _this.defaultContext;\n    } else {\n      _this.context = options.context;\n    }\n\n    return _this;\n  }\n\n  ToneWithContext.getDefaults = function () {\n    return {\n      context: getContext()\n    };\n  };\n  /**\n   * Return the current time of the Context clock plus the lookAhead.\n   */\n\n\n  ToneWithContext.prototype.now = function () {\n    return this.context.currentTime + this.context.lookAhead;\n  };\n  /**\n   * Return the current time of the Context clock without any lookAhead.\n   */\n\n\n  ToneWithContext.prototype.immediate = function () {\n    return this.context.currentTime;\n  };\n\n  Object.defineProperty(ToneWithContext.prototype, \"sampleTime\", {\n    /**\n     * The duration in seconds of one sample.\n     */\n    get: function () {\n      return 1 / this.context.sampleRate;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(ToneWithContext.prototype, \"blockTime\", {\n    /**\n     * The number of seconds of 1 processing block (128 samples)\n     */\n    get: function () {\n      return 128 / this.context.sampleRate;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  /**\n   * Convert the incoming time to seconds\n   */\n\n  ToneWithContext.prototype.toSeconds = function (time) {\n    return new TimeClass(this.context, time).toSeconds();\n  };\n  /**\n   * Convert the input to a frequency number\n   */\n\n\n  ToneWithContext.prototype.toFrequency = function (freq) {\n    return new FrequencyClass(this.context, freq).toFrequency();\n  };\n  /**\n   * Convert the input time into ticks\n   */\n\n\n  ToneWithContext.prototype.toTicks = function (time) {\n    return new TransportTimeClass(this.context, time).toTicks();\n  }; //-------------------------------------\n  // \tGET/SET\n  //-------------------------------------\n\n  /**\n   * Get a subset of the properties which are in the partial props\n   */\n\n\n  ToneWithContext.prototype._getPartialProperties = function (props) {\n    var options = this.get(); // remove attributes from the prop that are not in the partial\n\n    Object.keys(options).forEach(function (name) {\n      if (isUndef(props[name])) {\n        delete options[name];\n      }\n    });\n    return options;\n  };\n  /**\n   * Get the object's attributes.\n   * @example\n   * import { Oscillator } from \"tone\";\n   * const osc = new Oscillator();\n   * console.log(osc.get());\n   * // returns {\"type\" : \"sine\", \"frequency\" : 440, ...etc}\n   */\n\n\n  ToneWithContext.prototype.get = function () {\n    var _this = this;\n\n    var defaults = getDefaultsFromInstance(this);\n    Object.keys(defaults).forEach(function (attribute) {\n      if (Reflect.has(_this, attribute)) {\n        var member = _this[attribute];\n\n        if (isDefined(member) && isDefined(member.value) && isDefined(member.setValueAtTime)) {\n          defaults[attribute] = member.value;\n        } else if (member instanceof ToneWithContext) {\n          defaults[attribute] = member._getPartialProperties(defaults[attribute]); // otherwise make sure it's a serializable type\n        } else if (isArray(member) || isNumber(member) || isString(member) || isBoolean(member)) {\n          defaults[attribute] = member;\n        } else {\n          // remove all undefined and unserializable attributes\n          delete defaults[attribute];\n        }\n      }\n    });\n    return defaults;\n  };\n  /**\n   * Set multiple properties at once with an object.\n   * @example\n   * import { Filter } from \"tone\";\n   * const filter = new Filter();\n   * // set values using an object\n   * filter.set({\n   * \tfrequency: 300,\n   * \ttype: \"highpass\"\n   * });\n   */\n\n\n  ToneWithContext.prototype.set = function (props) {\n    var _this = this;\n\n    Object.keys(props).forEach(function (attribute) {\n      if (Reflect.has(_this, attribute) && isDefined(_this[attribute])) {\n        if (_this[attribute] && isDefined(_this[attribute].value) && isDefined(_this[attribute].setValueAtTime)) {\n          // small optimization\n          if (_this[attribute].value !== props[attribute]) {\n            _this[attribute].value = props[attribute];\n          }\n        } else if (_this[attribute] instanceof ToneWithContext) {\n          _this[attribute].set(props[attribute]);\n        } else {\n          _this[attribute] = props[attribute];\n        }\n      }\n    });\n    return this;\n  };\n\n  return ToneWithContext;\n}(Tone);\n\nexport { ToneWithContext };","map":{"version":3,"sources":["../../../../Tone/core/context/ToneWithContext.ts"],"names":[],"mappings":"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","sourceRoot":"","sourcesContent":["import * as tslib_1 from \"tslib\";\nimport { getContext } from \"../Global\";\nimport { Tone } from \"../Tone\";\nimport { FrequencyClass } from \"../type/Frequency\";\nimport { TimeClass } from \"../type/Time\";\nimport { TransportTimeClass } from \"../type/TransportTime\";\nimport { getDefaultsFromInstance, optionsFromArguments } from \"../util/Defaults\";\nimport { isArray, isBoolean, isDefined, isNumber, isString, isUndef } from \"../util/TypeCheck\";\n/**\n * The Base class for all nodes that have an AudioContext.\n */\nvar ToneWithContext = /** @class */ (function (_super) {\n    tslib_1.__extends(ToneWithContext, _super);\n    function ToneWithContext() {\n        var _this = _super.call(this) || this;\n        var options = optionsFromArguments(ToneWithContext.getDefaults(), arguments, [\"context\"]);\n        if (_this.defaultContext) {\n            _this.context = _this.defaultContext;\n        }\n        else {\n            _this.context = options.context;\n        }\n        return _this;\n    }\n    ToneWithContext.getDefaults = function () {\n        return {\n            context: getContext(),\n        };\n    };\n    /**\n     * Return the current time of the Context clock plus the lookAhead.\n     */\n    ToneWithContext.prototype.now = function () {\n        return this.context.currentTime + this.context.lookAhead;\n    };\n    /**\n     * Return the current time of the Context clock without any lookAhead.\n     */\n    ToneWithContext.prototype.immediate = function () {\n        return this.context.currentTime;\n    };\n    Object.defineProperty(ToneWithContext.prototype, \"sampleTime\", {\n        /**\n         * The duration in seconds of one sample.\n         */\n        get: function () {\n            return 1 / this.context.sampleRate;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(ToneWithContext.prototype, \"blockTime\", {\n        /**\n         * The number of seconds of 1 processing block (128 samples)\n         */\n        get: function () {\n            return 128 / this.context.sampleRate;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    /**\n     * Convert the incoming time to seconds\n     */\n    ToneWithContext.prototype.toSeconds = function (time) {\n        return new TimeClass(this.context, time).toSeconds();\n    };\n    /**\n     * Convert the input to a frequency number\n     */\n    ToneWithContext.prototype.toFrequency = function (freq) {\n        return new FrequencyClass(this.context, freq).toFrequency();\n    };\n    /**\n     * Convert the input time into ticks\n     */\n    ToneWithContext.prototype.toTicks = function (time) {\n        return new TransportTimeClass(this.context, time).toTicks();\n    };\n    //-------------------------------------\n    // \tGET/SET\n    //-------------------------------------\n    /**\n     * Get a subset of the properties which are in the partial props\n     */\n    ToneWithContext.prototype._getPartialProperties = function (props) {\n        var options = this.get();\n        // remove attributes from the prop that are not in the partial\n        Object.keys(options).forEach(function (name) {\n            if (isUndef(props[name])) {\n                delete options[name];\n            }\n        });\n        return options;\n    };\n    /**\n     * Get the object's attributes.\n     * @example\n     * import { Oscillator } from \"tone\";\n     * const osc = new Oscillator();\n     * console.log(osc.get());\n     * // returns {\"type\" : \"sine\", \"frequency\" : 440, ...etc}\n     */\n    ToneWithContext.prototype.get = function () {\n        var _this = this;\n        var defaults = getDefaultsFromInstance(this);\n        Object.keys(defaults).forEach(function (attribute) {\n            if (Reflect.has(_this, attribute)) {\n                var member = _this[attribute];\n                if (isDefined(member) && isDefined(member.value) && isDefined(member.setValueAtTime)) {\n                    defaults[attribute] = member.value;\n                }\n                else if (member instanceof ToneWithContext) {\n                    defaults[attribute] = member._getPartialProperties(defaults[attribute]);\n                    // otherwise make sure it's a serializable type\n                }\n                else if (isArray(member) || isNumber(member) || isString(member) || isBoolean(member)) {\n                    defaults[attribute] = member;\n                }\n                else {\n                    // remove all undefined and unserializable attributes\n                    delete defaults[attribute];\n                }\n            }\n        });\n        return defaults;\n    };\n    /**\n     * Set multiple properties at once with an object.\n     * @example\n     * import { Filter } from \"tone\";\n     * const filter = new Filter();\n     * // set values using an object\n     * filter.set({\n     * \tfrequency: 300,\n     * \ttype: \"highpass\"\n     * });\n     */\n    ToneWithContext.prototype.set = function (props) {\n        var _this = this;\n        Object.keys(props).forEach(function (attribute) {\n            if (Reflect.has(_this, attribute) && isDefined(_this[attribute])) {\n                if (_this[attribute] && isDefined(_this[attribute].value) && isDefined(_this[attribute].setValueAtTime)) {\n                    // small optimization\n                    if (_this[attribute].value !== props[attribute]) {\n                        _this[attribute].value = props[attribute];\n                    }\n                }\n                else if (_this[attribute] instanceof ToneWithContext) {\n                    _this[attribute].set(props[attribute]);\n                }\n                else {\n                    _this[attribute] = props[attribute];\n                }\n            }\n        });\n        return this;\n    };\n    return ToneWithContext;\n}(Tone));\nexport { ToneWithContext };\n//# sourceMappingURL=ToneWithContext.js.map"]},"metadata":{},"sourceType":"module"}