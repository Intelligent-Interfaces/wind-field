{"ast":null,"code":"import * as tslib_1 from \"tslib\";\nimport { Envelope } from \"../component/envelope/Envelope\";\nimport { Filter } from \"../component/filter/Filter\";\nimport { Gain } from \"../core/context/Gain\";\nimport { ToneAudioNode } from \"../core/context/ToneAudioNode\";\nimport { deepMerge, omitFromObject, optionsFromArguments } from \"../core/util/Defaults\";\nimport { noOp } from \"../core/util/Interface\";\nimport { Multiply } from \"../signal/Multiply\";\nimport { Scale } from \"../signal/Scale\";\nimport { Signal } from \"../signal/Signal\";\nimport { FMOscillator } from \"../source/oscillator/FMOscillator\";\nimport { Monophonic } from \"./Monophonic\";\n/**\n * Inharmonic ratio of frequencies based on the Roland TR-808\n * Taken from https://ccrma.stanford.edu/papers/tr-808-cymbal-physically-informed-circuit-bendable-digital-model\n */\n\nvar inharmRatios = [1.0, 1.483, 1.932, 2.546, 2.630, 3.897];\n/**\n * A highly inharmonic and spectrally complex source with a highpass filter\n * and amplitude envelope which is good for making metallophone sounds.\n * Based on CymbalSynth by [@polyrhythmatic](https://github.com/polyrhythmatic).\n * Inspiration from [Sound on Sound](https://shorturl.at/rSZ12).\n * @category Instrument\n */\n\nvar MetalSynth =\n/** @class */\nfunction (_super) {\n  tslib_1.__extends(MetalSynth, _super);\n\n  function MetalSynth() {\n    var _this = _super.call(this, optionsFromArguments(MetalSynth.getDefaults(), arguments)) || this;\n\n    _this.name = \"MetalSynth\";\n    /**\n     * The array of FMOscillators\n     */\n\n    _this._oscillators = [];\n    /**\n     * The frequency multipliers\n     */\n\n    _this._freqMultipliers = [];\n    var options = optionsFromArguments(MetalSynth.getDefaults(), arguments);\n    _this.detune = new Signal({\n      context: _this.context,\n      units: \"cents\",\n      value: options.detune\n    });\n    _this.frequency = new Signal({\n      context: _this.context,\n      units: \"frequency\"\n    });\n    _this._amplitude = new Gain({\n      context: _this.context,\n      gain: 0\n    }).connect(_this.output);\n    _this._highpass = new Filter({\n      // Q: -3.0102999566398125,\n      Q: 0,\n      context: _this.context,\n      type: \"highpass\"\n    }).connect(_this._amplitude);\n\n    for (var i = 0; i < inharmRatios.length; i++) {\n      var osc = new FMOscillator({\n        context: _this.context,\n        harmonicity: options.harmonicity,\n        modulationIndex: options.modulationIndex,\n        modulationType: \"square\",\n        onstop: i === 0 ? function () {\n          return _this.onsilence(_this);\n        } : noOp,\n        type: \"square\"\n      });\n      osc.connect(_this._highpass);\n      _this._oscillators[i] = osc;\n      var mult = new Multiply({\n        context: _this.context,\n        value: inharmRatios[i]\n      });\n      _this._freqMultipliers[i] = mult;\n\n      _this.frequency.chain(mult, osc.frequency);\n\n      _this.detune.connect(osc.detune);\n    }\n\n    _this._filterFreqScaler = new Scale({\n      context: _this.context,\n      max: 7000,\n      min: _this.toFrequency(options.resonance)\n    });\n    _this.envelope = new Envelope({\n      attack: options.envelope.attack,\n      attackCurve: \"linear\",\n      context: _this.context,\n      decay: options.envelope.decay,\n      release: options.envelope.release,\n      sustain: 0\n    });\n\n    _this.envelope.chain(_this._filterFreqScaler, _this._highpass.frequency);\n\n    _this.envelope.connect(_this._amplitude.gain); // set the octaves\n\n\n    _this._octaves = options.octaves;\n    _this.octaves = options.octaves;\n    return _this;\n  }\n\n  MetalSynth.getDefaults = function () {\n    return deepMerge(Monophonic.getDefaults(), {\n      envelope: Object.assign(omitFromObject(Envelope.getDefaults(), Object.keys(ToneAudioNode.getDefaults())), {\n        attack: 0.001,\n        decay: 1.4,\n        release: 0.2\n      }),\n      harmonicity: 5.1,\n      modulationIndex: 32,\n      octaves: 1.5,\n      resonance: 4000\n    });\n  };\n  /**\n   * Trigger the attack.\n   * @param time When the attack should be triggered.\n   * @param velocity The velocity that the envelope should be triggered at.\n   */\n\n\n  MetalSynth.prototype._triggerEnvelopeAttack = function (time, velocity) {\n    var _this = this;\n\n    if (velocity === void 0) {\n      velocity = 1;\n    }\n\n    this.envelope.triggerAttack(time, velocity);\n\n    this._oscillators.forEach(function (osc) {\n      return osc.start(time);\n    });\n\n    if (this.envelope.sustain === 0) {\n      this._oscillators.forEach(function (osc) {\n        osc.stop(time + _this.toSeconds(_this.envelope.attack) + _this.toSeconds(_this.envelope.decay));\n      });\n    }\n\n    return this;\n  };\n  /**\n   * Trigger the release of the envelope.\n   * @param time When the release should be triggered.\n   */\n\n\n  MetalSynth.prototype._triggerEnvelopeRelease = function (time) {\n    var _this = this;\n\n    this.envelope.triggerRelease(time);\n\n    this._oscillators.forEach(function (osc) {\n      return osc.stop(time + _this.toSeconds(_this.envelope.release));\n    });\n\n    return this;\n  };\n\n  MetalSynth.prototype.getLevelAtTime = function (time) {\n    time = this.toSeconds(time);\n    return this.envelope.getValueAtTime(time);\n  };\n\n  Object.defineProperty(MetalSynth.prototype, \"modulationIndex\", {\n    /**\n     * The modulationIndex of the oscillators which make up the source.\n     * see [[FMOscillator.modulationIndex]]\n     * @min 1\n     * @max 100\n     */\n    get: function () {\n      return this._oscillators[0].modulationIndex.value;\n    },\n    set: function (val) {\n      this._oscillators.forEach(function (osc) {\n        return osc.modulationIndex.value = val;\n      });\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(MetalSynth.prototype, \"harmonicity\", {\n    /**\n     * The harmonicity of the oscillators which make up the source.\n     * see Tone.FMOscillator.harmonicity\n     * @min 0.1\n     * @max 10\n     */\n    get: function () {\n      return this._oscillators[0].harmonicity.value;\n    },\n    set: function (val) {\n      this._oscillators.forEach(function (osc) {\n        return osc.harmonicity.value = val;\n      });\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(MetalSynth.prototype, \"resonance\", {\n    /**\n     * The lower level of the highpass filter which is attached to the envelope.\n     * This value should be between [0, 7000]\n     * @min 0\n     * @max 7000\n     */\n    get: function () {\n      return this._filterFreqScaler.min;\n    },\n    set: function (val) {\n      this._filterFreqScaler.min = this.toFrequency(val);\n      this.octaves = this._octaves;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(MetalSynth.prototype, \"octaves\", {\n    /**\n     * The number of octaves above the \"resonance\" frequency\n     * that the filter ramps during the attack/decay envelope\n     * @min 0\n     * @max 8\n     */\n    get: function () {\n      return this._octaves;\n    },\n    set: function (val) {\n      this._octaves = val;\n      this._filterFreqScaler.max = this._filterFreqScaler.min * Math.pow(2, val);\n    },\n    enumerable: true,\n    configurable: true\n  });\n\n  MetalSynth.prototype.dispose = function () {\n    _super.prototype.dispose.call(this);\n\n    this._oscillators.forEach(function (osc) {\n      return osc.dispose();\n    });\n\n    this._freqMultipliers.forEach(function (freqMult) {\n      return freqMult.dispose();\n    });\n\n    this.frequency.dispose();\n    this.detune.dispose();\n\n    this._filterFreqScaler.dispose();\n\n    this._amplitude.dispose();\n\n    this.envelope.dispose();\n\n    this._highpass.dispose();\n\n    return this;\n  };\n\n  return MetalSynth;\n}(Monophonic);\n\nexport { MetalSynth };","map":{"version":3,"sources":["../../../Tone/instrument/MetalSynth.ts"],"names":[],"mappings":"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","sourceRoot":"","sourcesContent":["import * as tslib_1 from \"tslib\";\nimport { Envelope } from \"../component/envelope/Envelope\";\nimport { Filter } from \"../component/filter/Filter\";\nimport { Gain } from \"../core/context/Gain\";\nimport { ToneAudioNode } from \"../core/context/ToneAudioNode\";\nimport { deepMerge, omitFromObject, optionsFromArguments } from \"../core/util/Defaults\";\nimport { noOp } from \"../core/util/Interface\";\nimport { Multiply } from \"../signal/Multiply\";\nimport { Scale } from \"../signal/Scale\";\nimport { Signal } from \"../signal/Signal\";\nimport { FMOscillator } from \"../source/oscillator/FMOscillator\";\nimport { Monophonic } from \"./Monophonic\";\n/**\n * Inharmonic ratio of frequencies based on the Roland TR-808\n * Taken from https://ccrma.stanford.edu/papers/tr-808-cymbal-physically-informed-circuit-bendable-digital-model\n */\nvar inharmRatios = [1.0, 1.483, 1.932, 2.546, 2.630, 3.897];\n/**\n * A highly inharmonic and spectrally complex source with a highpass filter\n * and amplitude envelope which is good for making metallophone sounds.\n * Based on CymbalSynth by [@polyrhythmatic](https://github.com/polyrhythmatic).\n * Inspiration from [Sound on Sound](https://shorturl.at/rSZ12).\n * @category Instrument\n */\nvar MetalSynth = /** @class */ (function (_super) {\n    tslib_1.__extends(MetalSynth, _super);\n    function MetalSynth() {\n        var _this = _super.call(this, optionsFromArguments(MetalSynth.getDefaults(), arguments)) || this;\n        _this.name = \"MetalSynth\";\n        /**\n         * The array of FMOscillators\n         */\n        _this._oscillators = [];\n        /**\n         * The frequency multipliers\n         */\n        _this._freqMultipliers = [];\n        var options = optionsFromArguments(MetalSynth.getDefaults(), arguments);\n        _this.detune = new Signal({\n            context: _this.context,\n            units: \"cents\",\n            value: options.detune,\n        });\n        _this.frequency = new Signal({\n            context: _this.context,\n            units: \"frequency\",\n        });\n        _this._amplitude = new Gain({\n            context: _this.context,\n            gain: 0,\n        }).connect(_this.output);\n        _this._highpass = new Filter({\n            // Q: -3.0102999566398125,\n            Q: 0,\n            context: _this.context,\n            type: \"highpass\",\n        }).connect(_this._amplitude);\n        for (var i = 0; i < inharmRatios.length; i++) {\n            var osc = new FMOscillator({\n                context: _this.context,\n                harmonicity: options.harmonicity,\n                modulationIndex: options.modulationIndex,\n                modulationType: \"square\",\n                onstop: i === 0 ? function () { return _this.onsilence(_this); } : noOp,\n                type: \"square\",\n            });\n            osc.connect(_this._highpass);\n            _this._oscillators[i] = osc;\n            var mult = new Multiply({\n                context: _this.context,\n                value: inharmRatios[i],\n            });\n            _this._freqMultipliers[i] = mult;\n            _this.frequency.chain(mult, osc.frequency);\n            _this.detune.connect(osc.detune);\n        }\n        _this._filterFreqScaler = new Scale({\n            context: _this.context,\n            max: 7000,\n            min: _this.toFrequency(options.resonance),\n        });\n        _this.envelope = new Envelope({\n            attack: options.envelope.attack,\n            attackCurve: \"linear\",\n            context: _this.context,\n            decay: options.envelope.decay,\n            release: options.envelope.release,\n            sustain: 0,\n        });\n        _this.envelope.chain(_this._filterFreqScaler, _this._highpass.frequency);\n        _this.envelope.connect(_this._amplitude.gain);\n        // set the octaves\n        _this._octaves = options.octaves;\n        _this.octaves = options.octaves;\n        return _this;\n    }\n    MetalSynth.getDefaults = function () {\n        return deepMerge(Monophonic.getDefaults(), {\n            envelope: Object.assign(omitFromObject(Envelope.getDefaults(), Object.keys(ToneAudioNode.getDefaults())), {\n                attack: 0.001,\n                decay: 1.4,\n                release: 0.2,\n            }),\n            harmonicity: 5.1,\n            modulationIndex: 32,\n            octaves: 1.5,\n            resonance: 4000,\n        });\n    };\n    /**\n     * Trigger the attack.\n     * @param time When the attack should be triggered.\n     * @param velocity The velocity that the envelope should be triggered at.\n     */\n    MetalSynth.prototype._triggerEnvelopeAttack = function (time, velocity) {\n        var _this = this;\n        if (velocity === void 0) { velocity = 1; }\n        this.envelope.triggerAttack(time, velocity);\n        this._oscillators.forEach(function (osc) { return osc.start(time); });\n        if (this.envelope.sustain === 0) {\n            this._oscillators.forEach(function (osc) {\n                osc.stop(time + _this.toSeconds(_this.envelope.attack) + _this.toSeconds(_this.envelope.decay));\n            });\n        }\n        return this;\n    };\n    /**\n     * Trigger the release of the envelope.\n     * @param time When the release should be triggered.\n     */\n    MetalSynth.prototype._triggerEnvelopeRelease = function (time) {\n        var _this = this;\n        this.envelope.triggerRelease(time);\n        this._oscillators.forEach(function (osc) { return osc.stop(time + _this.toSeconds(_this.envelope.release)); });\n        return this;\n    };\n    MetalSynth.prototype.getLevelAtTime = function (time) {\n        time = this.toSeconds(time);\n        return this.envelope.getValueAtTime(time);\n    };\n    Object.defineProperty(MetalSynth.prototype, \"modulationIndex\", {\n        /**\n         * The modulationIndex of the oscillators which make up the source.\n         * see [[FMOscillator.modulationIndex]]\n         * @min 1\n         * @max 100\n         */\n        get: function () {\n            return this._oscillators[0].modulationIndex.value;\n        },\n        set: function (val) {\n            this._oscillators.forEach(function (osc) { return (osc.modulationIndex.value = val); });\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(MetalSynth.prototype, \"harmonicity\", {\n        /**\n         * The harmonicity of the oscillators which make up the source.\n         * see Tone.FMOscillator.harmonicity\n         * @min 0.1\n         * @max 10\n         */\n        get: function () {\n            return this._oscillators[0].harmonicity.value;\n        },\n        set: function (val) {\n            this._oscillators.forEach(function (osc) { return (osc.harmonicity.value = val); });\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(MetalSynth.prototype, \"resonance\", {\n        /**\n         * The lower level of the highpass filter which is attached to the envelope.\n         * This value should be between [0, 7000]\n         * @min 0\n         * @max 7000\n         */\n        get: function () {\n            return this._filterFreqScaler.min;\n        },\n        set: function (val) {\n            this._filterFreqScaler.min = this.toFrequency(val);\n            this.octaves = this._octaves;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(MetalSynth.prototype, \"octaves\", {\n        /**\n         * The number of octaves above the \"resonance\" frequency\n         * that the filter ramps during the attack/decay envelope\n         * @min 0\n         * @max 8\n         */\n        get: function () {\n            return this._octaves;\n        },\n        set: function (val) {\n            this._octaves = val;\n            this._filterFreqScaler.max = this._filterFreqScaler.min * Math.pow(2, val);\n        },\n        enumerable: true,\n        configurable: true\n    });\n    MetalSynth.prototype.dispose = function () {\n        _super.prototype.dispose.call(this);\n        this._oscillators.forEach(function (osc) { return osc.dispose(); });\n        this._freqMultipliers.forEach(function (freqMult) { return freqMult.dispose(); });\n        this.frequency.dispose();\n        this.detune.dispose();\n        this._filterFreqScaler.dispose();\n        this._amplitude.dispose();\n        this.envelope.dispose();\n        this._highpass.dispose();\n        return this;\n    };\n    return MetalSynth;\n}(Monophonic));\nexport { MetalSynth };\n//# sourceMappingURL=MetalSynth.js.map"]},"metadata":{},"sourceType":"module"}