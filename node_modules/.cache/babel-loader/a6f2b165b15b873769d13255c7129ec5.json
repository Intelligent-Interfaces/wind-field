{"ast":null,"code":"import * as tslib_1 from \"tslib\";\nimport { StereoXFeedbackEffect } from \"./StereoXFeedbackEffect\";\nimport { optionsFromArguments } from \"../core/util/Defaults\";\nimport { Delay } from \"../core/context/Delay\";\nimport { Signal } from \"../signal/Signal\";\nimport { readOnly } from \"../core/util/Interface\";\n/**\n * PingPongDelay is a feedback delay effect where the echo is heard\n * first in one channel and next in the opposite channel. In a stereo\n * system these are the right and left channels.\n * PingPongDelay in more simplified terms is two Tone.FeedbackDelays\n * with independent delay values. Each delay is routed to one channel\n * (left or right), and the channel triggered second will always\n * trigger at the same interval after the first.\n * @example\n * import { MembraneSynth, PingPongDelay } from \"tone\";\n * const pingPong = new PingPongDelay(\"4n\", 0.2).toDestination();\n * const drum = new MembraneSynth().connect(pingPong);\n * drum.triggerAttackRelease(\"C4\", \"32n\");\n * @category Effect\n */\n\nvar PingPongDelay =\n/** @class */\nfunction (_super) {\n  tslib_1.__extends(PingPongDelay, _super);\n\n  function PingPongDelay() {\n    var _this = _super.call(this, optionsFromArguments(PingPongDelay.getDefaults(), arguments, [\"delayTime\", \"feedback\"])) || this;\n\n    _this.name = \"PingPongDelay\";\n    var options = optionsFromArguments(PingPongDelay.getDefaults(), arguments, [\"delayTime\", \"feedback\"]);\n    _this._leftDelay = new Delay({\n      context: _this.context,\n      maxDelay: options.maxDelay\n    });\n    _this._rightDelay = new Delay({\n      context: _this.context,\n      maxDelay: options.maxDelay\n    });\n    _this._rightPreDelay = new Delay({\n      context: _this.context,\n      maxDelay: options.maxDelay\n    });\n    _this.delayTime = new Signal({\n      context: _this.context,\n      units: \"time\",\n      value: options.delayTime\n    }); // connect it up\n\n    _this.connectEffectLeft(_this._leftDelay);\n\n    _this.connectEffectRight(_this._rightPreDelay, _this._rightDelay);\n\n    _this.delayTime.fan(_this._leftDelay.delayTime, _this._rightDelay.delayTime, _this._rightPreDelay.delayTime); // rearranged the feedback to be after the rightPreDelay\n\n\n    _this._feedbackL.disconnect();\n\n    _this._feedbackL.connect(_this._rightDelay);\n\n    readOnly(_this, [\"delayTime\"]);\n    return _this;\n  }\n\n  PingPongDelay.getDefaults = function () {\n    return Object.assign(StereoXFeedbackEffect.getDefaults(), {\n      delayTime: 0.25,\n      maxDelay: 1\n    });\n  };\n\n  PingPongDelay.prototype.dispose = function () {\n    _super.prototype.dispose.call(this);\n\n    this._leftDelay.dispose();\n\n    this._rightDelay.dispose();\n\n    this._rightPreDelay.dispose();\n\n    this.delayTime.dispose();\n    return this;\n  };\n\n  return PingPongDelay;\n}(StereoXFeedbackEffect);\n\nexport { PingPongDelay };","map":{"version":3,"sources":["../../../Tone/effect/PingPongDelay.ts"],"names":[],"mappings":";AAAA,SAAS,qBAAT,QAAoE,yBAApE;AAEA,SAAS,oBAAT,QAAqC,uBAArC;AACA,SAAS,KAAT,QAAsB,uBAAtB;AACA,SAAS,MAAT,QAAuB,kBAAvB;AACA,SAAS,QAAT,QAAyB,wBAAzB;AAOA;;;;;;;;;;;;;;;;AAeA,IAAA,aAAA;AAAA;AAAA,UAAA,MAAA,EAAA;AAAmC,EAAA,OAAA,CAAA,SAAA,CAAA,aAAA,EAAA,MAAA;;AA8BlC,WAAA,aAAA,GAAA;AAAA,QAAA,KAAA,GAEC,MAAA,CAAA,IAAA,CAAA,IAAA,EAAM,oBAAoB,CAAC,aAAa,CAAC,WAAd,EAAD,EAA8B,SAA9B,EAAyC,CAAC,WAAD,EAAc,UAAd,CAAzC,CAA1B,KAA8F,IAF/F;;AA5BS,IAAA,KAAA,CAAA,IAAA,GAAe,eAAf;AA+BR,QAAM,OAAO,GAAG,oBAAoB,CAAC,aAAa,CAAC,WAAd,EAAD,EAA8B,SAA9B,EAAyC,CAAC,WAAD,EAAc,UAAd,CAAzC,CAApC;AAEA,IAAA,KAAI,CAAC,UAAL,GAAkB,IAAI,KAAJ,CAAU;AAC3B,MAAA,OAAO,EAAE,KAAI,CAAC,OADa;AAE3B,MAAA,QAAQ,EAAE,OAAO,CAAC;AAFS,KAAV,CAAlB;AAIA,IAAA,KAAI,CAAC,WAAL,GAAmB,IAAI,KAAJ,CAAU;AAC5B,MAAA,OAAO,EAAE,KAAI,CAAC,OADc;AAE5B,MAAA,QAAQ,EAAE,OAAO,CAAC;AAFU,KAAV,CAAnB;AAIA,IAAA,KAAI,CAAC,cAAL,GAAsB,IAAI,KAAJ,CAAU;AAC/B,MAAA,OAAO,EAAE,KAAI,CAAC,OADiB;AAE/B,MAAA,QAAQ,EAAE,OAAO,CAAC;AAFa,KAAV,CAAtB;AAIA,IAAA,KAAI,CAAC,SAAL,GAAiB,IAAI,MAAJ,CAAW;AAC3B,MAAA,OAAO,EAAE,KAAI,CAAC,OADa;AAE3B,MAAA,KAAK,EAAE,MAFoB;AAG3B,MAAA,KAAK,EAAE,OAAO,CAAC;AAHY,KAAX,CAAjB,CAjBD,CAuBC;;AACA,IAAA,KAAI,CAAC,iBAAL,CAAuB,KAAI,CAAC,UAA5B;;AACA,IAAA,KAAI,CAAC,kBAAL,CAAwB,KAAI,CAAC,cAA7B,EAA6C,KAAI,CAAC,WAAlD;;AACA,IAAA,KAAI,CAAC,SAAL,CAAe,GAAf,CAAmB,KAAI,CAAC,UAAL,CAAgB,SAAnC,EAA8C,KAAI,CAAC,WAAL,CAAiB,SAA/D,EAA0E,KAAI,CAAC,cAAL,CAAoB,SAA9F,EA1BD,CA2BC;;;AACA,IAAA,KAAI,CAAC,UAAL,CAAgB,UAAhB;;AACA,IAAA,KAAI,CAAC,UAAL,CAAgB,OAAhB,CAAwB,KAAI,CAAC,WAA7B;;AACA,IAAA,QAAQ,CAAC,KAAD,EAAO,CAAC,WAAD,CAAP,CAAR;;AACA;;AAEM,EAAA,aAAA,CAAA,WAAA,GAAP,YAAA;AACC,WAAO,MAAM,CAAC,MAAP,CAAc,qBAAqB,CAAC,WAAtB,EAAd,EAAmD;AACzD,MAAA,SAAS,EAAE,IAD8C;AAEzD,MAAA,QAAQ,EAAE;AAF+C,KAAnD,CAAP;AAIA,GALM;;AAOP,EAAA,aAAA,CAAA,SAAA,CAAA,OAAA,GAAA,YAAA;AACC,IAAA,MAAA,CAAA,SAAA,CAAM,OAAN,CAAa,IAAb,CAAa,IAAb;;AACA,SAAK,UAAL,CAAgB,OAAhB;;AACA,SAAK,WAAL,CAAiB,OAAjB;;AACA,SAAK,cAAL,CAAoB,OAApB;;AACA,SAAK,SAAL,CAAe,OAAf;AACA,WAAO,IAAP;AACA,GAPD;;AAQD,SAAA,aAAA;AAAC,CA9ED,CAAmC,qBAAnC,CAAA","sourceRoot":"","sourcesContent":["import * as tslib_1 from \"tslib\";\nimport { StereoXFeedbackEffect } from \"./StereoXFeedbackEffect\";\nimport { optionsFromArguments } from \"../core/util/Defaults\";\nimport { Delay } from \"../core/context/Delay\";\nimport { Signal } from \"../signal/Signal\";\nimport { readOnly } from \"../core/util/Interface\";\n/**\n * PingPongDelay is a feedback delay effect where the echo is heard\n * first in one channel and next in the opposite channel. In a stereo\n * system these are the right and left channels.\n * PingPongDelay in more simplified terms is two Tone.FeedbackDelays\n * with independent delay values. Each delay is routed to one channel\n * (left or right), and the channel triggered second will always\n * trigger at the same interval after the first.\n * @example\n * import { MembraneSynth, PingPongDelay } from \"tone\";\n * const pingPong = new PingPongDelay(\"4n\", 0.2).toDestination();\n * const drum = new MembraneSynth().connect(pingPong);\n * drum.triggerAttackRelease(\"C4\", \"32n\");\n * @category Effect\n */\nvar PingPongDelay = /** @class */ (function (_super) {\n    tslib_1.__extends(PingPongDelay, _super);\n    function PingPongDelay() {\n        var _this = _super.call(this, optionsFromArguments(PingPongDelay.getDefaults(), arguments, [\"delayTime\", \"feedback\"])) || this;\n        _this.name = \"PingPongDelay\";\n        var options = optionsFromArguments(PingPongDelay.getDefaults(), arguments, [\"delayTime\", \"feedback\"]);\n        _this._leftDelay = new Delay({\n            context: _this.context,\n            maxDelay: options.maxDelay,\n        });\n        _this._rightDelay = new Delay({\n            context: _this.context,\n            maxDelay: options.maxDelay\n        });\n        _this._rightPreDelay = new Delay({\n            context: _this.context,\n            maxDelay: options.maxDelay\n        });\n        _this.delayTime = new Signal({\n            context: _this.context,\n            units: \"time\",\n            value: options.delayTime,\n        });\n        // connect it up\n        _this.connectEffectLeft(_this._leftDelay);\n        _this.connectEffectRight(_this._rightPreDelay, _this._rightDelay);\n        _this.delayTime.fan(_this._leftDelay.delayTime, _this._rightDelay.delayTime, _this._rightPreDelay.delayTime);\n        // rearranged the feedback to be after the rightPreDelay\n        _this._feedbackL.disconnect();\n        _this._feedbackL.connect(_this._rightDelay);\n        readOnly(_this, [\"delayTime\"]);\n        return _this;\n    }\n    PingPongDelay.getDefaults = function () {\n        return Object.assign(StereoXFeedbackEffect.getDefaults(), {\n            delayTime: 0.25,\n            maxDelay: 1\n        });\n    };\n    PingPongDelay.prototype.dispose = function () {\n        _super.prototype.dispose.call(this);\n        this._leftDelay.dispose();\n        this._rightDelay.dispose();\n        this._rightPreDelay.dispose();\n        this.delayTime.dispose();\n        return this;\n    };\n    return PingPongDelay;\n}(StereoXFeedbackEffect));\nexport { PingPongDelay };\n//# sourceMappingURL=PingPongDelay.js.map"]},"metadata":{},"sourceType":"module"}