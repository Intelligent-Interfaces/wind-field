{"ast":null,"code":"import * as tslib_1 from \"tslib\";\nimport { Tone } from \"../Tone\";\nimport { optionsFromArguments } from \"../util/Defaults\";\nimport { noOp } from \"../util/Interface\";\nimport { isString } from \"../util/TypeCheck\";\nimport { ToneAudioBuffer } from \"./ToneAudioBuffer\";\nimport { assert } from \"../util/Debug\";\n/**\n * A data structure for holding multiple buffers in a Map-like datastructure.\n *\n * @example\n * import { Player, ToneAudioBuffers } from \"tone\";\n * const pianoSamples = new ToneAudioBuffers({\n * \tC1: \"https://tonejs.github.io/examples/audio/casio/C1.mp3\",\n * \tC2: \"https://tonejs.github.io/examples/audio/casio/C2.mp3\",\n * }, () => {\n * \tconst player = new Player().toDestination();\n * \t// play one of the samples when they all load\n * \tplayer.buffer = pianoSamples.get(\"C2\");\n * \tplayer.start();\n * });\n * @example\n * import { ToneAudioBuffers } from \"tone\";\n * // To pass in additional parameters in the second parameter\n * const buffers = new ToneAudioBuffers({\n * \t urls: {\n * \t\t C1: \"C1.mp3\",\n * \t\t C2: \"C2.mp3\",\n * \t },\n * \t onload: () => console.log(\"loaded\"),\n * \t baseUrl: \"https://tonejs.github.io/examples/audio/casio/\"\n * });\n * @category Core\n */\n\nvar ToneAudioBuffers =\n/** @class */\nfunction (_super) {\n  tslib_1.__extends(ToneAudioBuffers, _super);\n\n  function ToneAudioBuffers() {\n    var _this = _super.call(this) || this;\n\n    _this.name = \"ToneAudioBuffers\";\n    /**\n     * All of the buffers\n     */\n\n    _this._buffers = new Map();\n    /**\n     * Keep track of the number of loaded buffers\n     */\n\n    _this._loadingCount = 0;\n    var options = optionsFromArguments(ToneAudioBuffers.getDefaults(), arguments, [\"urls\", \"onload\", \"baseUrl\"], \"urls\");\n    _this.baseUrl = options.baseUrl; // add each one\n\n    Object.keys(options.urls).forEach(function (name) {\n      _this._loadingCount++;\n      var url = options.urls[name];\n\n      _this.add(name, url, _this._bufferLoaded.bind(_this, options.onload));\n    });\n    return _this;\n  }\n\n  ToneAudioBuffers.getDefaults = function () {\n    return {\n      baseUrl: \"\",\n      onerror: noOp,\n      onload: noOp,\n      urls: {}\n    };\n  };\n  /**\n   * True if the buffers object has a buffer by that name.\n   * @param  name  The key or index of the buffer.\n   */\n\n\n  ToneAudioBuffers.prototype.has = function (name) {\n    return this._buffers.has(name.toString());\n  };\n  /**\n   * Get a buffer by name. If an array was loaded,\n   * then use the array index.\n   * @param  name  The key or index of the buffer.\n   */\n\n\n  ToneAudioBuffers.prototype.get = function (name) {\n    assert(this.has(name), \"ToneAudioBuffers has no buffer named: \" + name);\n    return this._buffers.get(name.toString());\n  };\n  /**\n   * A buffer was loaded. decrement the counter.\n   */\n\n\n  ToneAudioBuffers.prototype._bufferLoaded = function (callback) {\n    this._loadingCount--;\n\n    if (this._loadingCount === 0 && callback) {\n      callback();\n    }\n  };\n\n  Object.defineProperty(ToneAudioBuffers.prototype, \"loaded\", {\n    /**\n     * If the buffers are loaded or not\n     */\n    get: function () {\n      return Array.from(this._buffers).every(function (_a) {\n        var _b = tslib_1.__read(_a, 2),\n            _ = _b[0],\n            buffer = _b[1];\n\n        return buffer.loaded;\n      });\n    },\n    enumerable: true,\n    configurable: true\n  });\n  /**\n   * Add a buffer by name and url to the Buffers\n   * @param  name      A unique name to give the buffer\n   * @param  url  Either the url of the bufer, or a buffer which will be added with the given name.\n   * @param  callback  The callback to invoke when the url is loaded.\n   */\n\n  ToneAudioBuffers.prototype.add = function (name, url, callback) {\n    if (callback === void 0) {\n      callback = noOp;\n    }\n\n    if (isString(url)) {\n      this._buffers.set(name.toString(), new ToneAudioBuffer(this.baseUrl + url, callback));\n    } else {\n      this._buffers.set(name.toString(), new ToneAudioBuffer(url, callback));\n    }\n\n    return this;\n  };\n\n  ToneAudioBuffers.prototype.dispose = function () {\n    _super.prototype.dispose.call(this);\n\n    this._buffers.forEach(function (buffer) {\n      return buffer.dispose();\n    });\n\n    this._buffers.clear();\n\n    return this;\n  };\n\n  return ToneAudioBuffers;\n}(Tone);\n\nexport { ToneAudioBuffers };","map":{"version":3,"sources":["../../../../Tone/core/context/ToneAudioBuffers.ts"],"names":[],"mappings":";AAAA,SAAS,IAAT,QAAqB,SAArB;AACA,SAAS,oBAAT,QAAqC,kBAArC;AACA,SAAS,IAAT,QAAqB,mBAArB;AACA,SAAS,QAAT,QAAyB,mBAAzB;AACA,SAAS,eAAT,QAAgC,mBAAhC;AACA,SAAS,MAAT,QAAuB,eAAvB;AAcA;;;;;;;;;;;;;;;;;;;;;;;;;;;;AA2BA,IAAA,gBAAA;AAAA;AAAA,UAAA,MAAA,EAAA;AAAsC,EAAA,OAAA,CAAA,SAAA,CAAA,gBAAA,EAAA,MAAA;;AA8BrC,WAAA,gBAAA,GAAA;AAAA,QAAA,KAAA,GAEC,MAAA,CAAA,IAAA,CAAA,IAAA,KAAO,IAFR;;AA5BS,IAAA,KAAA,CAAA,IAAA,GAAe,kBAAf;AAET;;;;AAGQ,IAAA,KAAA,CAAA,QAAA,GAAyC,IAAI,GAAJ,EAAzC;AAOR;;;;AAGQ,IAAA,KAAA,CAAA,aAAA,GAAgB,CAAhB;AAgBP,QAAM,OAAO,GAAG,oBAAoB,CACnC,gBAAgB,CAAC,WAAjB,EADmC,EACH,SADG,EACQ,CAAC,MAAD,EAAS,QAAT,EAAmB,SAAnB,CADR,EACuC,MADvC,CAApC;AAIA,IAAA,KAAI,CAAC,OAAL,GAAe,OAAO,CAAC,OAAvB,CAPD,CAQC;;AACA,IAAA,MAAM,CAAC,IAAP,CAAY,OAAO,CAAC,IAApB,EAA0B,OAA1B,CAAkC,UAAA,IAAA,EAAI;AACrC,MAAA,KAAI,CAAC,aAAL;AACA,UAAM,GAAG,GAAG,OAAO,CAAC,IAAR,CAAa,IAAb,CAAZ;;AACA,MAAA,KAAI,CAAC,GAAL,CAAS,IAAT,EAAe,GAAf,EAAoB,KAAI,CAAC,aAAL,CAAmB,IAAnB,CAAwB,KAAxB,EAA8B,OAAO,CAAC,MAAtC,CAApB;AACA,KAJD;;AAMA;;AAEM,EAAA,gBAAA,CAAA,WAAA,GAAP,YAAA;AACC,WAAO;AACN,MAAA,OAAO,EAAE,EADH;AAEN,MAAA,OAAO,EAAE,IAFH;AAGN,MAAA,MAAM,EAAE,IAHF;AAIN,MAAA,IAAI,EAAE;AAJA,KAAP;AAMA,GAPM;AASP;;;;;;AAIA,EAAA,gBAAA,CAAA,SAAA,CAAA,GAAA,GAAA,UAAI,IAAJ,EAAyB;AACxB,WAAO,KAAK,QAAL,CAAc,GAAd,CAAkB,IAAI,CAAC,QAAL,EAAlB,CAAP;AACA,GAFD;AAIA;;;;;;;AAKA,EAAA,gBAAA,CAAA,SAAA,CAAA,GAAA,GAAA,UAAI,IAAJ,EAAyB;AACxB,IAAA,MAAM,CAAC,KAAK,GAAL,CAAS,IAAT,CAAD,EAAiB,2CAAyC,IAA1D,CAAN;AACA,WAAO,KAAK,QAAL,CAAc,GAAd,CAAkB,IAAI,CAAC,QAAL,EAAlB,CAAP;AACA,GAHD;AAKA;;;;;AAGQ,EAAA,gBAAA,CAAA,SAAA,CAAA,aAAA,GAAR,UAAsB,QAAtB,EAA0C;AACzC,SAAK,aAAL;;AACA,QAAI,KAAK,aAAL,KAAuB,CAAvB,IAA4B,QAAhC,EAA0C;AACzC,MAAA,QAAQ;AACR;AACD,GALO;;AAUR,EAAA,MAAA,CAAA,cAAA,CAAI,gBAAA,CAAA,SAAJ,EAAI,QAAJ,EAAU;AAHV;;;SAGA,YAAA;AACC,aAAO,KAAK,CAAC,IAAN,CAAW,KAAK,QAAhB,EAA0B,KAA1B,CAAgC,UAAC,EAAD,EAAY;YAAX,EAAA,GAAA,OAAA,CAAA,MAAA,CAAA,EAAA,EAAA,CAAA,C;YAAC,CAAA,GAAA,EAAA,CAAA,CAAA,C;YAAG,MAAA,GAAA,EAAA,CAAA,CAAA,C;;AAAY,eAAA,MAAM,CAAC,MAAP;AAAa,OAA9D,CAAP;AACA,KAFS;oBAAA;;AAAA,GAAV;AAIA;;;;;;;AAMA,EAAA,gBAAA,CAAA,SAAA,CAAA,GAAA,GAAA,UACC,IADD,EAEC,GAFD,EAGC,QAHD,EAG4B;AAA3B,QAAA,QAAA,KAAA,KAAA,CAAA,EAAA;AAAA,MAAA,QAAA,GAAA,IAAA;AAA2B;;AAE3B,QAAI,QAAQ,CAAC,GAAD,CAAZ,EAAmB;AAClB,WAAK,QAAL,CAAc,GAAd,CAAkB,IAAI,CAAC,QAAL,EAAlB,EAAmC,IAAI,eAAJ,CAAoB,KAAK,OAAL,GAAe,GAAnC,EAAwC,QAAxC,CAAnC;AACA,KAFD,MAEO;AACN,WAAK,QAAL,CAAc,GAAd,CAAkB,IAAI,CAAC,QAAL,EAAlB,EAAmC,IAAI,eAAJ,CAAoB,GAApB,EAAyB,QAAzB,CAAnC;AACA;;AACD,WAAO,IAAP;AACA,GAXD;;AAaA,EAAA,gBAAA,CAAA,SAAA,CAAA,OAAA,GAAA,YAAA;AACC,IAAA,MAAA,CAAA,SAAA,CAAM,OAAN,CAAa,IAAb,CAAa,IAAb;;AACA,SAAK,QAAL,CAAc,OAAd,CAAsB,UAAA,MAAA,EAAM;AAAI,aAAA,MAAM,CAAN,OAAA,EAAA;AAAgB,KAAhD;;AACA,SAAK,QAAL,CAAc,KAAd;;AACA,WAAO,IAAP;AACA,GALD;;AAMD,SAAA,gBAAA;AAAC,CApHD,CAAsC,IAAtC,CAAA","sourceRoot":"","sourcesContent":["import * as tslib_1 from \"tslib\";\nimport { Tone } from \"../Tone\";\nimport { optionsFromArguments } from \"../util/Defaults\";\nimport { noOp } from \"../util/Interface\";\nimport { isString } from \"../util/TypeCheck\";\nimport { ToneAudioBuffer } from \"./ToneAudioBuffer\";\nimport { assert } from \"../util/Debug\";\n/**\n * A data structure for holding multiple buffers in a Map-like datastructure.\n *\n * @example\n * import { Player, ToneAudioBuffers } from \"tone\";\n * const pianoSamples = new ToneAudioBuffers({\n * \tC1: \"https://tonejs.github.io/examples/audio/casio/C1.mp3\",\n * \tC2: \"https://tonejs.github.io/examples/audio/casio/C2.mp3\",\n * }, () => {\n * \tconst player = new Player().toDestination();\n * \t// play one of the samples when they all load\n * \tplayer.buffer = pianoSamples.get(\"C2\");\n * \tplayer.start();\n * });\n * @example\n * import { ToneAudioBuffers } from \"tone\";\n * // To pass in additional parameters in the second parameter\n * const buffers = new ToneAudioBuffers({\n * \t urls: {\n * \t\t C1: \"C1.mp3\",\n * \t\t C2: \"C2.mp3\",\n * \t },\n * \t onload: () => console.log(\"loaded\"),\n * \t baseUrl: \"https://tonejs.github.io/examples/audio/casio/\"\n * });\n * @category Core\n */\nvar ToneAudioBuffers = /** @class */ (function (_super) {\n    tslib_1.__extends(ToneAudioBuffers, _super);\n    function ToneAudioBuffers() {\n        var _this = _super.call(this) || this;\n        _this.name = \"ToneAudioBuffers\";\n        /**\n         * All of the buffers\n         */\n        _this._buffers = new Map();\n        /**\n         * Keep track of the number of loaded buffers\n         */\n        _this._loadingCount = 0;\n        var options = optionsFromArguments(ToneAudioBuffers.getDefaults(), arguments, [\"urls\", \"onload\", \"baseUrl\"], \"urls\");\n        _this.baseUrl = options.baseUrl;\n        // add each one\n        Object.keys(options.urls).forEach(function (name) {\n            _this._loadingCount++;\n            var url = options.urls[name];\n            _this.add(name, url, _this._bufferLoaded.bind(_this, options.onload));\n        });\n        return _this;\n    }\n    ToneAudioBuffers.getDefaults = function () {\n        return {\n            baseUrl: \"\",\n            onerror: noOp,\n            onload: noOp,\n            urls: {},\n        };\n    };\n    /**\n     * True if the buffers object has a buffer by that name.\n     * @param  name  The key or index of the buffer.\n     */\n    ToneAudioBuffers.prototype.has = function (name) {\n        return this._buffers.has(name.toString());\n    };\n    /**\n     * Get a buffer by name. If an array was loaded,\n     * then use the array index.\n     * @param  name  The key or index of the buffer.\n     */\n    ToneAudioBuffers.prototype.get = function (name) {\n        assert(this.has(name), \"ToneAudioBuffers has no buffer named: \" + name);\n        return this._buffers.get(name.toString());\n    };\n    /**\n     * A buffer was loaded. decrement the counter.\n     */\n    ToneAudioBuffers.prototype._bufferLoaded = function (callback) {\n        this._loadingCount--;\n        if (this._loadingCount === 0 && callback) {\n            callback();\n        }\n    };\n    Object.defineProperty(ToneAudioBuffers.prototype, \"loaded\", {\n        /**\n         * If the buffers are loaded or not\n         */\n        get: function () {\n            return Array.from(this._buffers).every(function (_a) {\n                var _b = tslib_1.__read(_a, 2), _ = _b[0], buffer = _b[1];\n                return buffer.loaded;\n            });\n        },\n        enumerable: true,\n        configurable: true\n    });\n    /**\n     * Add a buffer by name and url to the Buffers\n     * @param  name      A unique name to give the buffer\n     * @param  url  Either the url of the bufer, or a buffer which will be added with the given name.\n     * @param  callback  The callback to invoke when the url is loaded.\n     */\n    ToneAudioBuffers.prototype.add = function (name, url, callback) {\n        if (callback === void 0) { callback = noOp; }\n        if (isString(url)) {\n            this._buffers.set(name.toString(), new ToneAudioBuffer(this.baseUrl + url, callback));\n        }\n        else {\n            this._buffers.set(name.toString(), new ToneAudioBuffer(url, callback));\n        }\n        return this;\n    };\n    ToneAudioBuffers.prototype.dispose = function () {\n        _super.prototype.dispose.call(this);\n        this._buffers.forEach(function (buffer) { return buffer.dispose(); });\n        this._buffers.clear();\n        return this;\n    };\n    return ToneAudioBuffers;\n}(Tone));\nexport { ToneAudioBuffers };\n//# sourceMappingURL=ToneAudioBuffers.js.map"]},"metadata":{},"sourceType":"module"}