{"ast":null,"code":"import * as tslib_1 from \"tslib\";\nimport { AmplitudeEnvelope } from \"../component/envelope/AmplitudeEnvelope\";\nimport { omitFromObject, optionsFromArguments } from \"../core/util/Defaults\";\nimport { Noise } from \"../source/Noise\";\nimport { Instrument } from \"./Instrument\";\nimport { ToneAudioNode } from \"../core/context/ToneAudioNode\";\nimport { Envelope } from \"../component/envelope/Envelope\";\nimport { Source } from \"../source/Source\";\n/**\n * Tone.NoiseSynth is composed of [[Noise]] through an [[AmplitudeEnvelope]].\n * ```\n * +-------+   +-------------------+\n * | Noise +>--> AmplitudeEnvelope +>--> Output\n * +-------+   +-------------------+\n * ```\n * @example\n * import { NoiseSynth } from \"tone\";\n * const noiseSynth = new NoiseSynth().toDestination();\n * noiseSynth.triggerAttackRelease(\"8n\", 0.05);\n * @category Instrument\n */\n\nvar NoiseSynth =\n/** @class */\nfunction (_super) {\n  tslib_1.__extends(NoiseSynth, _super);\n\n  function NoiseSynth() {\n    var _this = _super.call(this, optionsFromArguments(NoiseSynth.getDefaults(), arguments)) || this;\n\n    _this.name = \"NoiseSynth\";\n    var options = optionsFromArguments(NoiseSynth.getDefaults(), arguments);\n    _this.noise = new Noise(Object.assign({\n      context: _this.context\n    }, options.noise));\n    _this.envelope = new AmplitudeEnvelope(Object.assign({\n      context: _this.context\n    }, options.envelope)); // connect the noise to the output\n\n    _this.noise.chain(_this.envelope, _this.output);\n\n    return _this;\n  }\n\n  NoiseSynth.getDefaults = function () {\n    return Object.assign(Instrument.getDefaults(), {\n      envelope: Object.assign(omitFromObject(Envelope.getDefaults(), Object.keys(ToneAudioNode.getDefaults())), {\n        decay: 0.1,\n        sustain: 0.0\n      }),\n      noise: Object.assign(omitFromObject(Noise.getDefaults(), Object.keys(Source.getDefaults())), {\n        type: \"white\"\n      })\n    });\n  };\n  /**\n   * Start the attack portion of the envelopes. Unlike other\n   * instruments, Tone.NoiseSynth doesn't have a note.\n   * @example\n   * import { NoiseSynth } from \"tone\";\n   * const noiseSynth = new NoiseSynth().toDestination();\n   * noiseSynth.triggerAttack();\n   */\n\n\n  NoiseSynth.prototype.triggerAttack = function (time, velocity) {\n    if (velocity === void 0) {\n      velocity = 1;\n    }\n\n    time = this.toSeconds(time); // the envelopes\n\n    this.envelope.triggerAttack(time, velocity); // start the noise\n\n    this.noise.start(time);\n\n    if (this.envelope.sustain === 0) {\n      this.noise.stop(time + this.toSeconds(this.envelope.attack) + this.toSeconds(this.envelope.decay));\n    }\n\n    return this;\n  };\n  /**\n   * Start the release portion of the envelopes.\n   */\n\n\n  NoiseSynth.prototype.triggerRelease = function (time) {\n    time = this.toSeconds(time);\n    this.envelope.triggerRelease(time);\n    this.noise.stop(time + this.toSeconds(this.envelope.release));\n    return this;\n  };\n\n  NoiseSynth.prototype.sync = function () {\n    this._syncMethod(\"triggerAttack\", 0);\n\n    this._syncMethod(\"triggerRelease\", 0);\n\n    return this;\n  };\n\n  NoiseSynth.prototype.triggerAttackRelease = function (duration, time, velocity) {\n    if (velocity === void 0) {\n      velocity = 1;\n    }\n\n    time = this.toSeconds(time);\n    duration = this.toSeconds(duration);\n    this.triggerAttack(time, velocity);\n    this.triggerRelease(time + duration);\n    return this;\n  };\n\n  NoiseSynth.prototype.dispose = function () {\n    _super.prototype.dispose.call(this);\n\n    this.noise.dispose();\n    this.envelope.dispose();\n    return this;\n  };\n\n  return NoiseSynth;\n}(Instrument);\n\nexport { NoiseSynth };","map":{"version":3,"sources":["../../../Tone/instrument/NoiseSynth.ts"],"names":[],"mappings":"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","sourceRoot":"","sourcesContent":["import * as tslib_1 from \"tslib\";\nimport { AmplitudeEnvelope } from \"../component/envelope/AmplitudeEnvelope\";\nimport { omitFromObject, optionsFromArguments } from \"../core/util/Defaults\";\nimport { Noise } from \"../source/Noise\";\nimport { Instrument } from \"./Instrument\";\nimport { ToneAudioNode } from \"../core/context/ToneAudioNode\";\nimport { Envelope } from \"../component/envelope/Envelope\";\nimport { Source } from \"../source/Source\";\n/**\n * Tone.NoiseSynth is composed of [[Noise]] through an [[AmplitudeEnvelope]].\n * ```\n * +-------+   +-------------------+\n * | Noise +>--> AmplitudeEnvelope +>--> Output\n * +-------+   +-------------------+\n * ```\n * @example\n * import { NoiseSynth } from \"tone\";\n * const noiseSynth = new NoiseSynth().toDestination();\n * noiseSynth.triggerAttackRelease(\"8n\", 0.05);\n * @category Instrument\n */\nvar NoiseSynth = /** @class */ (function (_super) {\n    tslib_1.__extends(NoiseSynth, _super);\n    function NoiseSynth() {\n        var _this = _super.call(this, optionsFromArguments(NoiseSynth.getDefaults(), arguments)) || this;\n        _this.name = \"NoiseSynth\";\n        var options = optionsFromArguments(NoiseSynth.getDefaults(), arguments);\n        _this.noise = new Noise(Object.assign({\n            context: _this.context,\n        }, options.noise));\n        _this.envelope = new AmplitudeEnvelope(Object.assign({\n            context: _this.context,\n        }, options.envelope));\n        // connect the noise to the output\n        _this.noise.chain(_this.envelope, _this.output);\n        return _this;\n    }\n    NoiseSynth.getDefaults = function () {\n        return Object.assign(Instrument.getDefaults(), {\n            envelope: Object.assign(omitFromObject(Envelope.getDefaults(), Object.keys(ToneAudioNode.getDefaults())), {\n                decay: 0.1,\n                sustain: 0.0,\n            }),\n            noise: Object.assign(omitFromObject(Noise.getDefaults(), Object.keys(Source.getDefaults())), {\n                type: \"white\",\n            }),\n        });\n    };\n    /**\n     * Start the attack portion of the envelopes. Unlike other\n     * instruments, Tone.NoiseSynth doesn't have a note.\n     * @example\n     * import { NoiseSynth } from \"tone\";\n     * const noiseSynth = new NoiseSynth().toDestination();\n     * noiseSynth.triggerAttack();\n     */\n    NoiseSynth.prototype.triggerAttack = function (time, velocity) {\n        if (velocity === void 0) { velocity = 1; }\n        time = this.toSeconds(time);\n        // the envelopes\n        this.envelope.triggerAttack(time, velocity);\n        // start the noise\n        this.noise.start(time);\n        if (this.envelope.sustain === 0) {\n            this.noise.stop(time + this.toSeconds(this.envelope.attack) + this.toSeconds(this.envelope.decay));\n        }\n        return this;\n    };\n    /**\n     * Start the release portion of the envelopes.\n     */\n    NoiseSynth.prototype.triggerRelease = function (time) {\n        time = this.toSeconds(time);\n        this.envelope.triggerRelease(time);\n        this.noise.stop(time + this.toSeconds(this.envelope.release));\n        return this;\n    };\n    NoiseSynth.prototype.sync = function () {\n        this._syncMethod(\"triggerAttack\", 0);\n        this._syncMethod(\"triggerRelease\", 0);\n        return this;\n    };\n    NoiseSynth.prototype.triggerAttackRelease = function (duration, time, velocity) {\n        if (velocity === void 0) { velocity = 1; }\n        time = this.toSeconds(time);\n        duration = this.toSeconds(duration);\n        this.triggerAttack(time, velocity);\n        this.triggerRelease(time + duration);\n        return this;\n    };\n    NoiseSynth.prototype.dispose = function () {\n        _super.prototype.dispose.call(this);\n        this.noise.dispose();\n        this.envelope.dispose();\n        return this;\n    };\n    return NoiseSynth;\n}(Instrument));\nexport { NoiseSynth };\n//# sourceMappingURL=NoiseSynth.js.map"]},"metadata":{},"sourceType":"module"}