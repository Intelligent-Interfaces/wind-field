{"ast":null,"code":"import * as tslib_1 from \"tslib\";\nimport { getContext } from \"../Global\";\nimport { TransportTimeClass } from \"./TransportTime\";\n/**\n * Ticks is a primitive type for encoding Time values.\n * Ticks can be constructed with or without the `new` keyword. Ticks can be passed\n * into the parameter of any method which takes time as an argument.\n * @example\n * import { Ticks } from \"tone\";\n * const t = Ticks(\"4n\"); // a quarter note as ticks\n * @category Unit\n */\n\nvar TicksClass =\n/** @class */\nfunction (_super) {\n  tslib_1.__extends(TicksClass, _super);\n\n  function TicksClass() {\n    var _this = _super !== null && _super.apply(this, arguments) || this;\n\n    _this.name = \"Ticks\";\n    _this.defaultUnits = \"i\";\n    return _this;\n  }\n  /**\n   * Get the current time in the given units\n   */\n\n\n  TicksClass.prototype._now = function () {\n    return this.context.transport.ticks;\n  };\n  /**\n   * Return the value of the beats in the current units\n   */\n\n\n  TicksClass.prototype._beatsToUnits = function (beats) {\n    return this._getPPQ() * beats;\n  };\n  /**\n   * Returns the value of a second in the current units\n   */\n\n\n  TicksClass.prototype._secondsToUnits = function (seconds) {\n    return Math.floor(seconds / (60 / this._getBpm()) * this._getPPQ());\n  };\n  /**\n   * Returns the value of a tick in the current time units\n   */\n\n\n  TicksClass.prototype._ticksToUnits = function (ticks) {\n    return ticks;\n  };\n  /**\n   * Return the time in ticks\n   */\n\n\n  TicksClass.prototype.toTicks = function () {\n    return this.valueOf();\n  };\n  /**\n   * Return the time in seconds\n   */\n\n\n  TicksClass.prototype.toSeconds = function () {\n    return this.valueOf() / this._getPPQ() * (60 / this._getBpm());\n  };\n\n  return TicksClass;\n}(TransportTimeClass);\n\nexport { TicksClass };\n/**\n * Convert a time representation to ticks\n * @category Unit\n */\n\nexport function Ticks(value, units) {\n  return new TicksClass(getContext(), value, units);\n}","map":{"version":3,"sources":["../../../../Tone/core/type/Ticks.ts"],"names":[],"mappings":";AAAA,SAAS,UAAT,QAA2B,WAA3B;AAEA,SAAS,kBAAT,QAAmC,iBAAnC;AAGA;;;;;;;;;;AASA,IAAA,UAAA;AAAA;AAAA,UAAA,MAAA,EAAA;AAAgC,EAAA,OAAA,CAAA,SAAA,CAAA,UAAA,EAAA,MAAA;;AAAhC,WAAA,UAAA,GAAA;AAAA,QAAA,KAAA,GAAA,MAAA,KAAA,IAAA,IAAA,MAAA,CAAA,KAAA,CAAA,IAAA,EAAA,SAAA,CAAA,IAAA,IAAA;;AAEU,IAAA,KAAA,CAAA,IAAA,GAAe,OAAf;AAEA,IAAA,KAAA,CAAA,YAAA,GAA6B,GAA7B;;AA2CT;AAzCA;;;;;AAGU,EAAA,UAAA,CAAA,SAAA,CAAA,IAAA,GAAV,YAAA;AACC,WAAO,KAAK,OAAL,CAAa,SAAb,CAAuB,KAA9B;AACA,GAFS;AAIV;;;;;AAGU,EAAA,UAAA,CAAA,SAAA,CAAA,aAAA,GAAV,UAAwB,KAAxB,EAAqC;AACpC,WAAO,KAAK,OAAL,KAAiB,KAAxB;AACA,GAFS;AAIV;;;;;AAGU,EAAA,UAAA,CAAA,SAAA,CAAA,eAAA,GAAV,UAA0B,OAA1B,EAA0C;AACzC,WAAO,IAAI,CAAC,KAAL,CAAW,OAAO,IAAI,KAAK,KAAK,OAAL,EAAT,CAAP,GAAkC,KAAK,OAAL,EAA7C,CAAP;AACA,GAFS;AAIV;;;;;AAGU,EAAA,UAAA,CAAA,SAAA,CAAA,aAAA,GAAV,UAAwB,KAAxB,EAAoC;AACnC,WAAO,KAAP;AACA,GAFS;AAIV;;;;;AAGA,EAAA,UAAA,CAAA,SAAA,CAAA,OAAA,GAAA,YAAA;AACC,WAAO,KAAK,OAAL,EAAP;AACA,GAFD;AAIA;;;;;AAGA,EAAA,UAAA,CAAA,SAAA,CAAA,SAAA,GAAA,YAAA;AACC,WAAQ,KAAK,OAAL,KAAiB,KAAK,OAAL,EAAlB,IAAqC,KAAK,KAAK,OAAL,EAA1C,CAAP;AACA,GAFD;;AAGD,SAAA,UAAA;AAAC,CA/CD,CAAgC,kBAAhC,CAAA;;;AAiDA;;;;;AAIA,OAAM,SAAU,KAAV,CAAgB,KAAhB,EAAmC,KAAnC,EAAuD;AAC5D,SAAO,IAAI,UAAJ,CAAe,UAAU,EAAzB,EAA6B,KAA7B,EAAoC,KAApC,CAAP;AACA","sourceRoot":"","sourcesContent":["import * as tslib_1 from \"tslib\";\nimport { getContext } from \"../Global\";\nimport { TransportTimeClass } from \"./TransportTime\";\n/**\n * Ticks is a primitive type for encoding Time values.\n * Ticks can be constructed with or without the `new` keyword. Ticks can be passed\n * into the parameter of any method which takes time as an argument.\n * @example\n * import { Ticks } from \"tone\";\n * const t = Ticks(\"4n\"); // a quarter note as ticks\n * @category Unit\n */\nvar TicksClass = /** @class */ (function (_super) {\n    tslib_1.__extends(TicksClass, _super);\n    function TicksClass() {\n        var _this = _super !== null && _super.apply(this, arguments) || this;\n        _this.name = \"Ticks\";\n        _this.defaultUnits = \"i\";\n        return _this;\n    }\n    /**\n     * Get the current time in the given units\n     */\n    TicksClass.prototype._now = function () {\n        return this.context.transport.ticks;\n    };\n    /**\n     * Return the value of the beats in the current units\n     */\n    TicksClass.prototype._beatsToUnits = function (beats) {\n        return this._getPPQ() * beats;\n    };\n    /**\n     * Returns the value of a second in the current units\n     */\n    TicksClass.prototype._secondsToUnits = function (seconds) {\n        return Math.floor(seconds / (60 / this._getBpm()) * this._getPPQ());\n    };\n    /**\n     * Returns the value of a tick in the current time units\n     */\n    TicksClass.prototype._ticksToUnits = function (ticks) {\n        return ticks;\n    };\n    /**\n     * Return the time in ticks\n     */\n    TicksClass.prototype.toTicks = function () {\n        return this.valueOf();\n    };\n    /**\n     * Return the time in seconds\n     */\n    TicksClass.prototype.toSeconds = function () {\n        return (this.valueOf() / this._getPPQ()) * (60 / this._getBpm());\n    };\n    return TicksClass;\n}(TransportTimeClass));\nexport { TicksClass };\n/**\n * Convert a time representation to ticks\n * @category Unit\n */\nexport function Ticks(value, units) {\n    return new TicksClass(getContext(), value, units);\n}\n//# sourceMappingURL=Ticks.js.map"]},"metadata":{},"sourceType":"module"}