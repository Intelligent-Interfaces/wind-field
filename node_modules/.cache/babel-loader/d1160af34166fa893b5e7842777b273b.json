{"ast":null,"code":"import * as tslib_1 from \"tslib\";\nimport { StereoFeedbackEffect } from \"../effect/StereoFeedbackEffect\";\nimport { optionsFromArguments } from \"../core/util/Defaults\";\nimport { LFO } from \"../source/oscillator/LFO\";\nimport { Delay } from \"../core/context/Delay\";\nimport { readOnly } from \"../core/util/Interface\";\n/**\n * Chorus is a stereo chorus effect composed of a left and right delay with an [[LFO]] applied to the delayTime of each channel.\n * When [[feedback]] is set to a value larger than 0, you also get Flanger-type effects.\n * Inspiration from [Tuna.js](https://github.com/Dinahmoe/tuna/blob/master/tuna.js).\n * Read more on the chorus effect on [SoundOnSound](http://www.soundonsound.com/sos/jun04/articles/synthsecrets.htm).\n *\n * @example\n * import { Chorus, PolySynth } from \"tone\";\n * const chorus = new Chorus(4, 2.5, 0.5);\n * const synth = new PolySynth().connect(chorus);\n * synth.triggerAttackRelease([\"C3\", \"E3\", \"G3\"], \"8n\");\n *\n * @category Effect\n */\n\nvar Chorus =\n/** @class */\nfunction (_super) {\n  tslib_1.__extends(Chorus, _super);\n\n  function Chorus() {\n    var _this = _super.call(this, optionsFromArguments(Chorus.getDefaults(), arguments, [\"frequency\", \"delayTime\", \"depth\"])) || this;\n\n    _this.name = \"Chorus\";\n    var options = optionsFromArguments(Chorus.getDefaults(), arguments, [\"frequency\", \"delayTime\", \"depth\"]);\n    _this._depth = options.depth;\n    _this._delayTime = options.delayTime / 1000;\n    _this._lfoL = new LFO({\n      context: _this.context,\n      frequency: options.frequency,\n      min: 0,\n      max: 1\n    });\n    _this._lfoR = new LFO({\n      context: _this.context,\n      frequency: options.frequency,\n      min: 0,\n      max: 1,\n      phase: 180\n    });\n    _this._delayNodeL = new Delay({\n      context: _this.context\n    });\n    _this._delayNodeR = new Delay({\n      context: _this.context\n    });\n    _this.frequency = _this._lfoL.frequency;\n    readOnly(_this, [\"frequency\"]); // have one LFO frequency control the other\n\n    _this._lfoL.frequency.connect(_this._lfoR.frequency); // connections\n\n\n    _this.connectEffectLeft(_this._delayNodeL);\n\n    _this.connectEffectRight(_this._delayNodeR); // lfo setup\n\n\n    _this._lfoL.connect(_this._delayNodeL.delayTime);\n\n    _this._lfoR.connect(_this._delayNodeR.delayTime); // set the initial values\n\n\n    _this.depth = _this._depth;\n    _this.type = options.type;\n    _this.spread = options.spread;\n    return _this;\n  }\n\n  Chorus.getDefaults = function () {\n    return Object.assign(StereoFeedbackEffect.getDefaults(), {\n      frequency: 1.5,\n      delayTime: 3.5,\n      depth: 0.7,\n      type: \"sine\",\n      spread: 180,\n      feedback: 0,\n      wet: 0.5\n    });\n  };\n\n  Object.defineProperty(Chorus.prototype, \"depth\", {\n    /**\n     * The depth of the effect. A depth of 1 makes the delayTime\n     * modulate between 0 and 2*delayTime (centered around the delayTime).\n     */\n    get: function () {\n      return this._depth;\n    },\n    set: function (depth) {\n      this._depth = depth;\n      var deviation = this._delayTime * depth;\n      this._lfoL.min = Math.max(this._delayTime - deviation, 0);\n      this._lfoL.max = this._delayTime + deviation;\n      this._lfoR.min = Math.max(this._delayTime - deviation, 0);\n      this._lfoR.max = this._delayTime + deviation;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(Chorus.prototype, \"delayTime\", {\n    /**\n     * The delayTime in milliseconds of the chorus. A larger delayTime\n     * will give a more pronounced effect. Nominal range a delayTime\n     * is between 2 and 20ms.\n     */\n    get: function () {\n      return this._delayTime * 1000;\n    },\n    set: function (delayTime) {\n      this._delayTime = delayTime / 1000;\n      this.depth = this._depth;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(Chorus.prototype, \"type\", {\n    /**\n     * The oscillator type of the LFO.\n     */\n    get: function () {\n      return this._lfoL.type;\n    },\n    set: function (type) {\n      this._lfoL.type = type;\n      this._lfoR.type = type;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(Chorus.prototype, \"spread\", {\n    /**\n     * Amount of stereo spread. When set to 0, both LFO's will be panned centrally.\n     * When set to 180, LFO's will be panned hard left and right respectively.\n     */\n    get: function () {\n      return this._lfoR.phase - this._lfoL.phase;\n    },\n    set: function (spread) {\n      this._lfoL.phase = 90 - spread / 2;\n      this._lfoR.phase = spread / 2 + 90;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  /**\n   * Start the effect.\n   */\n\n  Chorus.prototype.start = function (time) {\n    this._lfoL.start(time);\n\n    this._lfoR.start(time);\n\n    return this;\n  };\n  /**\n   * Stop the lfo\n   */\n\n\n  Chorus.prototype.stop = function (time) {\n    this._lfoL.stop(time);\n\n    this._lfoR.stop(time);\n\n    return this;\n  };\n  /**\n   * Sync the filter to the transport. See [[LFO.sync]]\n   */\n\n\n  Chorus.prototype.sync = function () {\n    this._lfoL.sync();\n\n    this._lfoR.sync();\n\n    return this;\n  };\n  /**\n   * Unsync the filter from the transport.\n   */\n\n\n  Chorus.prototype.unsync = function () {\n    this._lfoL.unsync();\n\n    this._lfoR.unsync();\n\n    return this;\n  };\n\n  Chorus.prototype.dispose = function () {\n    _super.prototype.dispose.call(this);\n\n    this._lfoL.dispose();\n\n    this._lfoR.dispose();\n\n    this._delayNodeL.dispose();\n\n    this._delayNodeR.dispose();\n\n    this.frequency.dispose();\n    return this;\n  };\n\n  return Chorus;\n}(StereoFeedbackEffect);\n\nexport { Chorus };","map":{"version":3,"sources":["../../../Tone/effect/Chorus.ts"],"names":[],"mappings":"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","sourceRoot":"","sourcesContent":["import * as tslib_1 from \"tslib\";\nimport { StereoFeedbackEffect } from \"../effect/StereoFeedbackEffect\";\nimport { optionsFromArguments } from \"../core/util/Defaults\";\nimport { LFO } from \"../source/oscillator/LFO\";\nimport { Delay } from \"../core/context/Delay\";\nimport { readOnly } from \"../core/util/Interface\";\n/**\n * Chorus is a stereo chorus effect composed of a left and right delay with an [[LFO]] applied to the delayTime of each channel.\n * When [[feedback]] is set to a value larger than 0, you also get Flanger-type effects.\n * Inspiration from [Tuna.js](https://github.com/Dinahmoe/tuna/blob/master/tuna.js).\n * Read more on the chorus effect on [SoundOnSound](http://www.soundonsound.com/sos/jun04/articles/synthsecrets.htm).\n *\n * @example\n * import { Chorus, PolySynth } from \"tone\";\n * const chorus = new Chorus(4, 2.5, 0.5);\n * const synth = new PolySynth().connect(chorus);\n * synth.triggerAttackRelease([\"C3\", \"E3\", \"G3\"], \"8n\");\n *\n * @category Effect\n */\nvar Chorus = /** @class */ (function (_super) {\n    tslib_1.__extends(Chorus, _super);\n    function Chorus() {\n        var _this = _super.call(this, optionsFromArguments(Chorus.getDefaults(), arguments, [\"frequency\", \"delayTime\", \"depth\"])) || this;\n        _this.name = \"Chorus\";\n        var options = optionsFromArguments(Chorus.getDefaults(), arguments, [\"frequency\", \"delayTime\", \"depth\"]);\n        _this._depth = options.depth;\n        _this._delayTime = options.delayTime / 1000;\n        _this._lfoL = new LFO({\n            context: _this.context,\n            frequency: options.frequency,\n            min: 0,\n            max: 1,\n        });\n        _this._lfoR = new LFO({\n            context: _this.context,\n            frequency: options.frequency,\n            min: 0,\n            max: 1,\n            phase: 180\n        });\n        _this._delayNodeL = new Delay({ context: _this.context });\n        _this._delayNodeR = new Delay({ context: _this.context });\n        _this.frequency = _this._lfoL.frequency;\n        readOnly(_this, [\"frequency\"]);\n        // have one LFO frequency control the other\n        _this._lfoL.frequency.connect(_this._lfoR.frequency);\n        // connections\n        _this.connectEffectLeft(_this._delayNodeL);\n        _this.connectEffectRight(_this._delayNodeR);\n        // lfo setup\n        _this._lfoL.connect(_this._delayNodeL.delayTime);\n        _this._lfoR.connect(_this._delayNodeR.delayTime);\n        // set the initial values\n        _this.depth = _this._depth;\n        _this.type = options.type;\n        _this.spread = options.spread;\n        return _this;\n    }\n    Chorus.getDefaults = function () {\n        return Object.assign(StereoFeedbackEffect.getDefaults(), {\n            frequency: 1.5,\n            delayTime: 3.5,\n            depth: 0.7,\n            type: \"sine\",\n            spread: 180,\n            feedback: 0,\n            wet: 0.5,\n        });\n    };\n    Object.defineProperty(Chorus.prototype, \"depth\", {\n        /**\n         * The depth of the effect. A depth of 1 makes the delayTime\n         * modulate between 0 and 2*delayTime (centered around the delayTime).\n         */\n        get: function () {\n            return this._depth;\n        },\n        set: function (depth) {\n            this._depth = depth;\n            var deviation = this._delayTime * depth;\n            this._lfoL.min = Math.max(this._delayTime - deviation, 0);\n            this._lfoL.max = this._delayTime + deviation;\n            this._lfoR.min = Math.max(this._delayTime - deviation, 0);\n            this._lfoR.max = this._delayTime + deviation;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(Chorus.prototype, \"delayTime\", {\n        /**\n         * The delayTime in milliseconds of the chorus. A larger delayTime\n         * will give a more pronounced effect. Nominal range a delayTime\n         * is between 2 and 20ms.\n         */\n        get: function () {\n            return this._delayTime * 1000;\n        },\n        set: function (delayTime) {\n            this._delayTime = delayTime / 1000;\n            this.depth = this._depth;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(Chorus.prototype, \"type\", {\n        /**\n         * The oscillator type of the LFO.\n         */\n        get: function () {\n            return this._lfoL.type;\n        },\n        set: function (type) {\n            this._lfoL.type = type;\n            this._lfoR.type = type;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(Chorus.prototype, \"spread\", {\n        /**\n         * Amount of stereo spread. When set to 0, both LFO's will be panned centrally.\n         * When set to 180, LFO's will be panned hard left and right respectively.\n         */\n        get: function () {\n            return this._lfoR.phase - this._lfoL.phase;\n        },\n        set: function (spread) {\n            this._lfoL.phase = 90 - (spread / 2);\n            this._lfoR.phase = (spread / 2) + 90;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    /**\n     * Start the effect.\n     */\n    Chorus.prototype.start = function (time) {\n        this._lfoL.start(time);\n        this._lfoR.start(time);\n        return this;\n    };\n    /**\n     * Stop the lfo\n     */\n    Chorus.prototype.stop = function (time) {\n        this._lfoL.stop(time);\n        this._lfoR.stop(time);\n        return this;\n    };\n    /**\n     * Sync the filter to the transport. See [[LFO.sync]]\n     */\n    Chorus.prototype.sync = function () {\n        this._lfoL.sync();\n        this._lfoR.sync();\n        return this;\n    };\n    /**\n     * Unsync the filter from the transport.\n     */\n    Chorus.prototype.unsync = function () {\n        this._lfoL.unsync();\n        this._lfoR.unsync();\n        return this;\n    };\n    Chorus.prototype.dispose = function () {\n        _super.prototype.dispose.call(this);\n        this._lfoL.dispose();\n        this._lfoR.dispose();\n        this._delayNodeL.dispose();\n        this._delayNodeR.dispose();\n        this.frequency.dispose();\n        return this;\n    };\n    return Chorus;\n}(StereoFeedbackEffect));\nexport { Chorus };\n//# sourceMappingURL=Chorus.js.map"]},"metadata":{},"sourceType":"module"}