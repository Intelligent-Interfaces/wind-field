{"ast":null,"code":"import * as tslib_1 from \"tslib\";\nimport { Filter } from \"../component/filter/Filter\";\nimport { optionsFromArguments } from \"../core/util/Defaults\";\nimport { LFOEffect } from \"./LFOEffect\";\n/**\n * AutoFilter is a Tone.Filter with a Tone.LFO connected to the filter cutoff frequency.\n * Setting the LFO rate and depth allows for control over the filter modulation rate\n * and depth.\n *\n * @example\n * import { AutoFilter, Oscillator } from \"tone\";\n * // create an autofilter and start it's LFO\n * const autoFilter = new AutoFilter(\"4n\").toDestination().start();\n * // route an oscillator through the filter and start it\n * const oscillator = new Oscillator().connect(autoFilter).start();\n * @category Effect\n */\n\nvar AutoFilter =\n/** @class */\nfunction (_super) {\n  tslib_1.__extends(AutoFilter, _super);\n\n  function AutoFilter() {\n    var _this = _super.call(this, optionsFromArguments(AutoFilter.getDefaults(), arguments, [\"frequency\", \"baseFrequency\", \"octaves\"])) || this;\n\n    _this.name = \"AutoFilter\";\n    var options = optionsFromArguments(AutoFilter.getDefaults(), arguments, [\"frequency\", \"baseFrequency\", \"octaves\"]);\n    _this.filter = new Filter(Object.assign(options.filter, {\n      context: _this.context\n    })); // connections\n\n    _this.connectEffect(_this.filter);\n\n    _this._lfo.connect(_this.filter.frequency);\n\n    _this.octaves = options.octaves;\n    _this.baseFrequency = options.baseFrequency;\n    return _this;\n  }\n\n  AutoFilter.getDefaults = function () {\n    return Object.assign(LFOEffect.getDefaults(), {\n      baseFrequency: 200,\n      octaves: 2.6,\n      filter: {\n        type: \"lowpass\",\n        rolloff: -12,\n        Q: 1\n      }\n    });\n  };\n\n  Object.defineProperty(AutoFilter.prototype, \"baseFrequency\", {\n    /**\n     * The minimum value of the filter's cutoff frequency.\n     */\n    get: function () {\n      return this._lfo.min;\n    },\n    set: function (freq) {\n      this._lfo.min = this.toFrequency(freq); // and set the max\n\n      this.octaves = this._octaves;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(AutoFilter.prototype, \"octaves\", {\n    /**\n     * The maximum value of the filter's cutoff frequency.\n     */\n    get: function () {\n      return this._octaves;\n    },\n    set: function (oct) {\n      this._octaves = oct;\n      this._lfo.max = this._lfo.min * Math.pow(2, oct);\n    },\n    enumerable: true,\n    configurable: true\n  });\n\n  AutoFilter.prototype.dispose = function () {\n    _super.prototype.dispose.call(this);\n\n    this.filter.dispose();\n    return this;\n  };\n\n  return AutoFilter;\n}(LFOEffect);\n\nexport { AutoFilter };","map":{"version":3,"sources":["../../../Tone/effect/AutoFilter.ts"],"names":[],"mappings":";AACA,SAAS,MAAT,QAAsC,4BAAtC;AAEA,SAAS,oBAAT,QAAqC,uBAArC;AACA,SAAS,SAAT,QAA4C,aAA5C;AAQA;;;;;;;;;;;;;;AAaA,IAAA,UAAA;AAAA;AAAA,UAAA,MAAA,EAAA;AAAgC,EAAA,OAAA,CAAA,SAAA,CAAA,UAAA,EAAA,MAAA;;AAqB/B,WAAA,UAAA,GAAA;AAAA,QAAA,KAAA,GAEC,MAAA,CAAA,IAAA,CAAA,IAAA,EAAM,oBAAoB,CAAC,UAAU,CAAC,WAAX,EAAD,EAA2B,SAA3B,EAAsC,CAAC,WAAD,EAAc,eAAd,EAA+B,SAA/B,CAAtC,CAA1B,KAA2G,IAF5G;;AAnBS,IAAA,KAAA,CAAA,IAAA,GAAe,YAAf;AAsBR,QAAM,OAAO,GAAG,oBAAoB,CAAC,UAAU,CAAC,WAAX,EAAD,EAA2B,SAA3B,EAAsC,CAAC,WAAD,EAAc,eAAd,EAA+B,SAA/B,CAAtC,CAApC;AAEA,IAAA,KAAI,CAAC,MAAL,GAAc,IAAI,MAAJ,CAAW,MAAM,CAAC,MAAP,CAAc,OAAO,CAAC,MAAtB,EAA8B;AACtD,MAAA,OAAO,EAAE,KAAI,CAAC;AADwC,KAA9B,CAAX,CAAd,CALD,CASC;;AACA,IAAA,KAAI,CAAC,aAAL,CAAmB,KAAI,CAAC,MAAxB;;AACA,IAAA,KAAI,CAAC,IAAL,CAAU,OAAV,CAAkB,KAAI,CAAC,MAAL,CAAY,SAA9B;;AACA,IAAA,KAAI,CAAC,OAAL,GAAe,OAAO,CAAC,OAAvB;AACA,IAAA,KAAI,CAAC,aAAL,GAAqB,OAAO,CAAC,aAA7B;;AACA;;AAEM,EAAA,UAAA,CAAA,WAAA,GAAP,YAAA;AACC,WAAO,MAAM,CAAC,MAAP,CAAc,SAAS,CAAC,WAAV,EAAd,EAAuC;AAC7C,MAAA,aAAa,EAAE,GAD8B;AAE7C,MAAA,OAAO,EAAE,GAFoC;AAG7C,MAAA,MAAM,EAAE;AACP,QAAA,IAAI,EAAE,SADC;AAEP,QAAA,OAAO,EAAE,CAAC,EAFH;AAGP,QAAA,CAAC,EAAE;AAHI;AAHqC,KAAvC,CAAP;AASA,GAVM;;AAeP,EAAA,MAAA,CAAA,cAAA,CAAI,UAAA,CAAA,SAAJ,EAAI,eAAJ,EAAiB;AAHjB;;;SAGA,YAAA;AACC,aAAO,KAAK,IAAL,CAAU,GAAjB;AACA,KAFgB;SAGjB,UAAkB,IAAlB,EAAsB;AACrB,WAAK,IAAL,CAAU,GAAV,GAAgB,KAAK,WAAL,CAAiB,IAAjB,CAAhB,CADqB,CAErB;;AACA,WAAK,OAAL,GAAe,KAAK,QAApB;AACA,KAPgB;oBAAA;;AAAA,GAAjB;AAYA,EAAA,MAAA,CAAA,cAAA,CAAI,UAAA,CAAA,SAAJ,EAAI,SAAJ,EAAW;AAHX;;;SAGA,YAAA;AACC,aAAO,KAAK,QAAZ;AACA,KAFU;SAGX,UAAY,GAAZ,EAAe;AACd,WAAK,QAAL,GAAgB,GAAhB;AACA,WAAK,IAAL,CAAU,GAAV,GAAgB,KAAK,IAAL,CAAU,GAAV,GAAgB,IAAI,CAAC,GAAL,CAAS,CAAT,EAAY,GAAZ,CAAhC;AACA,KANU;oBAAA;;AAAA,GAAX;;AAQA,EAAA,UAAA,CAAA,SAAA,CAAA,OAAA,GAAA,YAAA;AACC,IAAA,MAAA,CAAA,SAAA,CAAM,OAAN,CAAa,IAAb,CAAa,IAAb;;AACA,SAAK,MAAL,CAAY,OAAZ;AACA,WAAO,IAAP;AACA,GAJD;;AAKD,SAAA,UAAA;AAAC,CA7ED,CAAgC,SAAhC,CAAA","sourceRoot":"","sourcesContent":["import * as tslib_1 from \"tslib\";\nimport { Filter } from \"../component/filter/Filter\";\nimport { optionsFromArguments } from \"../core/util/Defaults\";\nimport { LFOEffect } from \"./LFOEffect\";\n/**\n * AutoFilter is a Tone.Filter with a Tone.LFO connected to the filter cutoff frequency.\n * Setting the LFO rate and depth allows for control over the filter modulation rate\n * and depth.\n *\n * @example\n * import { AutoFilter, Oscillator } from \"tone\";\n * // create an autofilter and start it's LFO\n * const autoFilter = new AutoFilter(\"4n\").toDestination().start();\n * // route an oscillator through the filter and start it\n * const oscillator = new Oscillator().connect(autoFilter).start();\n * @category Effect\n */\nvar AutoFilter = /** @class */ (function (_super) {\n    tslib_1.__extends(AutoFilter, _super);\n    function AutoFilter() {\n        var _this = _super.call(this, optionsFromArguments(AutoFilter.getDefaults(), arguments, [\"frequency\", \"baseFrequency\", \"octaves\"])) || this;\n        _this.name = \"AutoFilter\";\n        var options = optionsFromArguments(AutoFilter.getDefaults(), arguments, [\"frequency\", \"baseFrequency\", \"octaves\"]);\n        _this.filter = new Filter(Object.assign(options.filter, {\n            context: _this.context,\n        }));\n        // connections\n        _this.connectEffect(_this.filter);\n        _this._lfo.connect(_this.filter.frequency);\n        _this.octaves = options.octaves;\n        _this.baseFrequency = options.baseFrequency;\n        return _this;\n    }\n    AutoFilter.getDefaults = function () {\n        return Object.assign(LFOEffect.getDefaults(), {\n            baseFrequency: 200,\n            octaves: 2.6,\n            filter: {\n                type: \"lowpass\",\n                rolloff: -12,\n                Q: 1,\n            }\n        });\n    };\n    Object.defineProperty(AutoFilter.prototype, \"baseFrequency\", {\n        /**\n         * The minimum value of the filter's cutoff frequency.\n         */\n        get: function () {\n            return this._lfo.min;\n        },\n        set: function (freq) {\n            this._lfo.min = this.toFrequency(freq);\n            // and set the max\n            this.octaves = this._octaves;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(AutoFilter.prototype, \"octaves\", {\n        /**\n         * The maximum value of the filter's cutoff frequency.\n         */\n        get: function () {\n            return this._octaves;\n        },\n        set: function (oct) {\n            this._octaves = oct;\n            this._lfo.max = this._lfo.min * Math.pow(2, oct);\n        },\n        enumerable: true,\n        configurable: true\n    });\n    AutoFilter.prototype.dispose = function () {\n        _super.prototype.dispose.call(this);\n        this.filter.dispose();\n        return this;\n    };\n    return AutoFilter;\n}(LFOEffect));\nexport { AutoFilter };\n//# sourceMappingURL=AutoFilter.js.map"]},"metadata":{},"sourceType":"module"}