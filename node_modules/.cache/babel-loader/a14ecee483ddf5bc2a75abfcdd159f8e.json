{"ast":null,"code":"import * as tslib_1 from \"tslib\";\nimport { StereoEffect } from \"./StereoEffect\";\nimport { optionsFromArguments } from \"../core/util/Defaults\";\nimport { LFO } from \"../source/oscillator/LFO\";\nimport { Signal } from \"../signal/Signal\";\nimport { readOnly } from \"../core/util/Interface\";\n/**\n * Phaser is a phaser effect. Phasers work by changing the phase\n * of different frequency components of an incoming signal. Read more on\n * [Wikipedia](https://en.wikipedia.org/wiki/Phaser_(effect)).\n * Inspiration for this phaser comes from [Tuna.js](https://github.com/Dinahmoe/tuna/).\n * @example\n * import { FMSynth, Phaser } from \"tone\";\n * const phaser = new Phaser({\n * \tfrequency: 15,\n * \toctaves: 5,\n * \tbaseFrequency: 1000\n * }).toDestination();\n * const synth = new FMSynth().connect(phaser);\n * synth.triggerAttackRelease(\"E3\", \"2n\");\n * @category Effect\n */\n\nvar Phaser =\n/** @class */\nfunction (_super) {\n  tslib_1.__extends(Phaser, _super);\n\n  function Phaser() {\n    var _this = _super.call(this, optionsFromArguments(Phaser.getDefaults(), arguments, [\"frequency\", \"octaves\", \"baseFrequency\"])) || this;\n\n    _this.name = \"Phaser\";\n    var options = optionsFromArguments(Phaser.getDefaults(), arguments, [\"frequency\", \"octaves\", \"baseFrequency\"]);\n    _this._lfoL = new LFO({\n      context: _this.context,\n      frequency: options.frequency,\n      min: 0,\n      max: 1\n    });\n    _this._lfoR = new LFO({\n      context: _this.context,\n      frequency: options.frequency,\n      min: 0,\n      max: 1,\n      phase: 180\n    });\n    _this._baseFrequency = _this.toFrequency(options.baseFrequency);\n    _this._octaves = options.octaves;\n    _this.Q = new Signal({\n      context: _this.context,\n      value: options.Q,\n      units: \"positive\"\n    });\n    _this._filtersL = _this._makeFilters(options.stages, _this._lfoL);\n    _this._filtersR = _this._makeFilters(options.stages, _this._lfoR);\n    _this.frequency = _this._lfoL.frequency;\n    _this.frequency.value = options.frequency; // connect them up\n\n    _this.connectEffectLeft.apply(_this, tslib_1.__spread(_this._filtersL));\n\n    _this.connectEffectRight.apply(_this, tslib_1.__spread(_this._filtersR)); // control the frequency with one LFO\n\n\n    _this._lfoL.frequency.connect(_this._lfoR.frequency); // set the options\n\n\n    _this.baseFrequency = options.baseFrequency;\n    _this.octaves = options.octaves; // start the lfo\n\n    _this._lfoL.start();\n\n    _this._lfoR.start();\n\n    readOnly(_this, [\"frequency\", \"Q\"]);\n    return _this;\n  }\n\n  Phaser.getDefaults = function () {\n    return Object.assign(StereoEffect.getDefaults(), {\n      frequency: 0.5,\n      octaves: 3,\n      stages: 10,\n      Q: 10,\n      baseFrequency: 350\n    });\n  };\n\n  Phaser.prototype._makeFilters = function (stages, connectToFreq) {\n    var filters = []; // make all the filters\n\n    for (var i = 0; i < stages; i++) {\n      var filter = this.context.createBiquadFilter();\n      filter.type = \"allpass\";\n      this.Q.connect(filter.Q);\n      connectToFreq.connect(filter.frequency);\n      filters.push(filter);\n    }\n\n    return filters;\n  };\n\n  Object.defineProperty(Phaser.prototype, \"octaves\", {\n    /**\n     * The number of octaves the phase goes above the baseFrequency\n     */\n    get: function () {\n      return this._octaves;\n    },\n    set: function (octaves) {\n      this._octaves = octaves;\n      var max = this._baseFrequency * Math.pow(2, octaves);\n      this._lfoL.max = max;\n      this._lfoR.max = max;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(Phaser.prototype, \"baseFrequency\", {\n    /**\n     * The the base frequency of the filters.\n     */\n    get: function () {\n      return this._baseFrequency;\n    },\n    set: function (freq) {\n      this._baseFrequency = this.toFrequency(freq);\n      this._lfoL.min = this._baseFrequency;\n      this._lfoR.min = this._baseFrequency;\n      this.octaves = this._octaves;\n    },\n    enumerable: true,\n    configurable: true\n  });\n\n  Phaser.prototype.dispose = function () {\n    _super.prototype.dispose.call(this);\n\n    this.Q.dispose();\n\n    this._lfoL.dispose();\n\n    this._lfoR.dispose();\n\n    this._filtersL.forEach(function (f) {\n      return f.disconnect();\n    });\n\n    this._filtersR.forEach(function (f) {\n      return f.disconnect();\n    });\n\n    this.frequency.dispose();\n    return this;\n  };\n\n  return Phaser;\n}(StereoEffect);\n\nexport { Phaser };","map":{"version":3,"sources":["../../../Tone/effect/Phaser.ts"],"names":[],"mappings":"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","sourceRoot":"","sourcesContent":["import * as tslib_1 from \"tslib\";\nimport { StereoEffect } from \"./StereoEffect\";\nimport { optionsFromArguments } from \"../core/util/Defaults\";\nimport { LFO } from \"../source/oscillator/LFO\";\nimport { Signal } from \"../signal/Signal\";\nimport { readOnly } from \"../core/util/Interface\";\n/**\n * Phaser is a phaser effect. Phasers work by changing the phase\n * of different frequency components of an incoming signal. Read more on\n * [Wikipedia](https://en.wikipedia.org/wiki/Phaser_(effect)).\n * Inspiration for this phaser comes from [Tuna.js](https://github.com/Dinahmoe/tuna/).\n * @example\n * import { FMSynth, Phaser } from \"tone\";\n * const phaser = new Phaser({\n * \tfrequency: 15,\n * \toctaves: 5,\n * \tbaseFrequency: 1000\n * }).toDestination();\n * const synth = new FMSynth().connect(phaser);\n * synth.triggerAttackRelease(\"E3\", \"2n\");\n * @category Effect\n */\nvar Phaser = /** @class */ (function (_super) {\n    tslib_1.__extends(Phaser, _super);\n    function Phaser() {\n        var _this = _super.call(this, optionsFromArguments(Phaser.getDefaults(), arguments, [\"frequency\", \"octaves\", \"baseFrequency\"])) || this;\n        _this.name = \"Phaser\";\n        var options = optionsFromArguments(Phaser.getDefaults(), arguments, [\"frequency\", \"octaves\", \"baseFrequency\"]);\n        _this._lfoL = new LFO({\n            context: _this.context,\n            frequency: options.frequency,\n            min: 0,\n            max: 1\n        });\n        _this._lfoR = new LFO({\n            context: _this.context,\n            frequency: options.frequency,\n            min: 0,\n            max: 1,\n            phase: 180,\n        });\n        _this._baseFrequency = _this.toFrequency(options.baseFrequency);\n        _this._octaves = options.octaves;\n        _this.Q = new Signal({\n            context: _this.context,\n            value: options.Q,\n            units: \"positive\",\n        });\n        _this._filtersL = _this._makeFilters(options.stages, _this._lfoL);\n        _this._filtersR = _this._makeFilters(options.stages, _this._lfoR);\n        _this.frequency = _this._lfoL.frequency;\n        _this.frequency.value = options.frequency;\n        // connect them up\n        _this.connectEffectLeft.apply(_this, tslib_1.__spread(_this._filtersL));\n        _this.connectEffectRight.apply(_this, tslib_1.__spread(_this._filtersR));\n        // control the frequency with one LFO\n        _this._lfoL.frequency.connect(_this._lfoR.frequency);\n        // set the options\n        _this.baseFrequency = options.baseFrequency;\n        _this.octaves = options.octaves;\n        // start the lfo\n        _this._lfoL.start();\n        _this._lfoR.start();\n        readOnly(_this, [\"frequency\", \"Q\"]);\n        return _this;\n    }\n    Phaser.getDefaults = function () {\n        return Object.assign(StereoEffect.getDefaults(), {\n            frequency: 0.5,\n            octaves: 3,\n            stages: 10,\n            Q: 10,\n            baseFrequency: 350,\n        });\n    };\n    Phaser.prototype._makeFilters = function (stages, connectToFreq) {\n        var filters = [];\n        // make all the filters\n        for (var i = 0; i < stages; i++) {\n            var filter = this.context.createBiquadFilter();\n            filter.type = \"allpass\";\n            this.Q.connect(filter.Q);\n            connectToFreq.connect(filter.frequency);\n            filters.push(filter);\n        }\n        return filters;\n    };\n    Object.defineProperty(Phaser.prototype, \"octaves\", {\n        /**\n         * The number of octaves the phase goes above the baseFrequency\n         */\n        get: function () {\n            return this._octaves;\n        },\n        set: function (octaves) {\n            this._octaves = octaves;\n            var max = this._baseFrequency * Math.pow(2, octaves);\n            this._lfoL.max = max;\n            this._lfoR.max = max;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(Phaser.prototype, \"baseFrequency\", {\n        /**\n         * The the base frequency of the filters.\n         */\n        get: function () {\n            return this._baseFrequency;\n        },\n        set: function (freq) {\n            this._baseFrequency = this.toFrequency(freq);\n            this._lfoL.min = this._baseFrequency;\n            this._lfoR.min = this._baseFrequency;\n            this.octaves = this._octaves;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Phaser.prototype.dispose = function () {\n        _super.prototype.dispose.call(this);\n        this.Q.dispose();\n        this._lfoL.dispose();\n        this._lfoR.dispose();\n        this._filtersL.forEach(function (f) { return f.disconnect(); });\n        this._filtersR.forEach(function (f) { return f.disconnect(); });\n        this.frequency.dispose();\n        return this;\n    };\n    return Phaser;\n}(StereoEffect));\nexport { Phaser };\n//# sourceMappingURL=Phaser.js.map"]},"metadata":{},"sourceType":"module"}