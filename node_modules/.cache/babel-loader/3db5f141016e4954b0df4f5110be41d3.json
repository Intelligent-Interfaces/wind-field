{"ast":null,"code":"import * as tslib_1 from \"tslib\";\nimport { StereoEffect } from \"./StereoEffect\";\nimport { optionsFromArguments } from \"../core/util/Defaults\";\nimport { Scale } from \"../signal/Scale\";\nimport { Signal } from \"../signal/Signal\";\nimport { FeedbackCombFilter } from \"../component/filter/FeedbackCombFilter\";\nimport { readOnly } from \"../core/util/Interface\";\n/**\n * an array of the comb filter delay time values\n */\n\nvar combFilterDelayTimes = [1687 / 25000, 1601 / 25000, 2053 / 25000, 2251 / 25000];\n/**\n * the resonances of each of the comb filters\n */\n\nvar combFilterResonances = [0.773, 0.802, 0.753, 0.733];\n/**\n * the allpass filter frequencies\n */\n\nvar allpassFilterFreqs = [347, 113, 37];\n/**\n * JCReverb is a simple [Schroeder Reverberator](https://ccrma.stanford.edu/~jos/pasp/Schroeder_Reverberators.html)\n * tuned by John Chowning in 1970.\n * It is made up of three allpass filters and four [[FeedbackCombFilter]].\n * JCReverb is now implemented with an AudioWorkletNode which may result on performance degradation on some platforms\n *\n * @example\n * import { DuoSynth, FeedbackDelay, JCReverb } from \"tone\";\n * const reverb = new JCReverb(0.4).toDestination();\n * const delay = new FeedbackDelay(0.5);\n * // connecting the synth to reverb through delay\n * const synth = new DuoSynth().chain(delay, reverb);\n * synth.triggerAttackRelease(\"A4\", \"8n\");\n *\n * @category Effect\n */\n\nvar JCReverb =\n/** @class */\nfunction (_super) {\n  tslib_1.__extends(JCReverb, _super);\n\n  function JCReverb() {\n    var _this = _super.call(this, optionsFromArguments(JCReverb.getDefaults(), arguments, [\"roomSize\"])) || this;\n\n    _this.name = \"JCReverb\";\n    /**\n     * a series of allpass filters\n     */\n\n    _this._allpassFilters = [];\n    /**\n     * parallel feedback comb filters\n     */\n\n    _this._feedbackCombFilters = [];\n    var options = optionsFromArguments(JCReverb.getDefaults(), arguments, [\"roomSize\"]);\n    _this.roomSize = new Signal({\n      context: _this.context,\n      value: options.roomSize,\n      units: \"normalRange\"\n    });\n    _this._scaleRoomSize = new Scale({\n      context: _this.context,\n      min: -0.733,\n      max: 0.197\n    }); // make the allpass filters\n\n    _this._allpassFilters = allpassFilterFreqs.map(function (freq) {\n      var allpass = _this.context.createBiquadFilter();\n\n      allpass.type = \"allpass\";\n      allpass.frequency.value = freq;\n      return allpass;\n    }); // and the comb filters\n\n    _this._feedbackCombFilters = combFilterDelayTimes.map(function (delayTime, index) {\n      var fbcf = new FeedbackCombFilter({\n        context: _this.context,\n        delayTime: delayTime\n      });\n\n      _this._scaleRoomSize.connect(fbcf.resonance);\n\n      fbcf.resonance.value = combFilterResonances[index];\n\n      if (index < combFilterDelayTimes.length / 2) {\n        _this.connectEffectLeft.apply(_this, tslib_1.__spread(_this._allpassFilters, [fbcf]));\n      } else {\n        _this.connectEffectRight.apply(_this, tslib_1.__spread(_this._allpassFilters, [fbcf]));\n      }\n\n      return fbcf;\n    }); // chain the allpass filters together\n\n    _this.roomSize.connect(_this._scaleRoomSize);\n\n    readOnly(_this, [\"roomSize\"]);\n    return _this;\n  }\n\n  JCReverb.getDefaults = function () {\n    return Object.assign(StereoEffect.getDefaults(), {\n      roomSize: 0.5\n    });\n  };\n\n  JCReverb.prototype.dispose = function () {\n    _super.prototype.dispose.call(this);\n\n    this._allpassFilters.forEach(function (apf) {\n      return apf.disconnect();\n    });\n\n    this._feedbackCombFilters.forEach(function (fbcf) {\n      return fbcf.dispose();\n    });\n\n    this.roomSize.dispose();\n\n    this._scaleRoomSize.dispose();\n\n    return this;\n  };\n\n  return JCReverb;\n}(StereoEffect);\n\nexport { JCReverb };","map":{"version":3,"sources":["../../../Tone/effect/JCReverb.ts"],"names":[],"mappings":"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","sourceRoot":"","sourcesContent":["import * as tslib_1 from \"tslib\";\nimport { StereoEffect } from \"./StereoEffect\";\nimport { optionsFromArguments } from \"../core/util/Defaults\";\nimport { Scale } from \"../signal/Scale\";\nimport { Signal } from \"../signal/Signal\";\nimport { FeedbackCombFilter } from \"../component/filter/FeedbackCombFilter\";\nimport { readOnly } from \"../core/util/Interface\";\n/**\n * an array of the comb filter delay time values\n */\nvar combFilterDelayTimes = [1687 / 25000, 1601 / 25000, 2053 / 25000, 2251 / 25000];\n/**\n * the resonances of each of the comb filters\n */\nvar combFilterResonances = [0.773, 0.802, 0.753, 0.733];\n/**\n * the allpass filter frequencies\n */\nvar allpassFilterFreqs = [347, 113, 37];\n/**\n * JCReverb is a simple [Schroeder Reverberator](https://ccrma.stanford.edu/~jos/pasp/Schroeder_Reverberators.html)\n * tuned by John Chowning in 1970.\n * It is made up of three allpass filters and four [[FeedbackCombFilter]].\n * JCReverb is now implemented with an AudioWorkletNode which may result on performance degradation on some platforms\n *\n * @example\n * import { DuoSynth, FeedbackDelay, JCReverb } from \"tone\";\n * const reverb = new JCReverb(0.4).toDestination();\n * const delay = new FeedbackDelay(0.5);\n * // connecting the synth to reverb through delay\n * const synth = new DuoSynth().chain(delay, reverb);\n * synth.triggerAttackRelease(\"A4\", \"8n\");\n *\n * @category Effect\n */\nvar JCReverb = /** @class */ (function (_super) {\n    tslib_1.__extends(JCReverb, _super);\n    function JCReverb() {\n        var _this = _super.call(this, optionsFromArguments(JCReverb.getDefaults(), arguments, [\"roomSize\"])) || this;\n        _this.name = \"JCReverb\";\n        /**\n         * a series of allpass filters\n         */\n        _this._allpassFilters = [];\n        /**\n         * parallel feedback comb filters\n         */\n        _this._feedbackCombFilters = [];\n        var options = optionsFromArguments(JCReverb.getDefaults(), arguments, [\"roomSize\"]);\n        _this.roomSize = new Signal({\n            context: _this.context,\n            value: options.roomSize,\n            units: \"normalRange\",\n        });\n        _this._scaleRoomSize = new Scale({\n            context: _this.context,\n            min: -0.733,\n            max: 0.197,\n        });\n        // make the allpass filters\n        _this._allpassFilters = allpassFilterFreqs.map(function (freq) {\n            var allpass = _this.context.createBiquadFilter();\n            allpass.type = \"allpass\";\n            allpass.frequency.value = freq;\n            return allpass;\n        });\n        // and the comb filters\n        _this._feedbackCombFilters = combFilterDelayTimes.map(function (delayTime, index) {\n            var fbcf = new FeedbackCombFilter({\n                context: _this.context,\n                delayTime: delayTime,\n            });\n            _this._scaleRoomSize.connect(fbcf.resonance);\n            fbcf.resonance.value = combFilterResonances[index];\n            if (index < combFilterDelayTimes.length / 2) {\n                _this.connectEffectLeft.apply(_this, tslib_1.__spread(_this._allpassFilters, [fbcf]));\n            }\n            else {\n                _this.connectEffectRight.apply(_this, tslib_1.__spread(_this._allpassFilters, [fbcf]));\n            }\n            return fbcf;\n        });\n        // chain the allpass filters together\n        _this.roomSize.connect(_this._scaleRoomSize);\n        readOnly(_this, [\"roomSize\"]);\n        return _this;\n    }\n    JCReverb.getDefaults = function () {\n        return Object.assign(StereoEffect.getDefaults(), {\n            roomSize: 0.5,\n        });\n    };\n    JCReverb.prototype.dispose = function () {\n        _super.prototype.dispose.call(this);\n        this._allpassFilters.forEach(function (apf) { return apf.disconnect(); });\n        this._feedbackCombFilters.forEach(function (fbcf) { return fbcf.dispose(); });\n        this.roomSize.dispose();\n        this._scaleRoomSize.dispose();\n        return this;\n    };\n    return JCReverb;\n}(StereoEffect));\nexport { JCReverb };\n//# sourceMappingURL=JCReverb.js.map"]},"metadata":{},"sourceType":"module"}