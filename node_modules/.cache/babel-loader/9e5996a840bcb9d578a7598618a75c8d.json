{"ast":null,"code":"import * as tslib_1 from \"tslib\";\nimport { connect, connectSeries, ToneAudioNode } from \"../core/context/ToneAudioNode\";\nimport { CrossFade } from \"../component/channel/CrossFade\";\nimport { Split } from \"../component/channel/Split\";\nimport { Gain } from \"../core/context/Gain\";\nimport { Merge } from \"../component/channel/Merge\";\nimport { readOnly } from \"../core/util/Interface\";\n/**\n * Base class for Stereo effects.\n */\n\nvar StereoEffect =\n/** @class */\nfunction (_super) {\n  tslib_1.__extends(StereoEffect, _super);\n\n  function StereoEffect(options) {\n    var _this = _super.call(this, options) || this;\n\n    _this.name = \"StereoEffect\";\n    _this.input = new Gain({\n      context: _this.context\n    }); // force mono sources to be stereo\n\n    _this.input.channelCount = 2;\n    _this.input.channelCountMode = \"explicit\";\n    _this._dryWet = _this.output = new CrossFade({\n      context: _this.context,\n      fade: options.wet\n    });\n    _this.wet = _this._dryWet.fade;\n    _this._split = new Split({\n      context: _this.context,\n      channels: 2\n    });\n    _this._merge = new Merge({\n      context: _this.context,\n      channels: 2\n    }); // connections\n\n    _this.input.connect(_this._split); // dry wet connections\n\n\n    _this.input.connect(_this._dryWet.a);\n\n    _this._merge.connect(_this._dryWet.b);\n\n    readOnly(_this, [\"wet\"]);\n    return _this;\n  }\n  /**\n   * Connect the left part of the effect\n   */\n\n\n  StereoEffect.prototype.connectEffectLeft = function () {\n    var nodes = [];\n\n    for (var _i = 0; _i < arguments.length; _i++) {\n      nodes[_i] = arguments[_i];\n    }\n\n    this._split.connect(nodes[0], 0, 0);\n\n    connectSeries.apply(void 0, tslib_1.__spread(nodes));\n    connect(nodes[nodes.length - 1], this._merge, 0, 0);\n  };\n  /**\n   * Connect the right part of the effect\n   */\n\n\n  StereoEffect.prototype.connectEffectRight = function () {\n    var nodes = [];\n\n    for (var _i = 0; _i < arguments.length; _i++) {\n      nodes[_i] = arguments[_i];\n    }\n\n    this._split.connect(nodes[0], 1, 0);\n\n    connectSeries.apply(void 0, tslib_1.__spread(nodes));\n    connect(nodes[nodes.length - 1], this._merge, 0, 1);\n  };\n\n  StereoEffect.getDefaults = function () {\n    return Object.assign(ToneAudioNode.getDefaults(), {\n      wet: 1\n    });\n  };\n\n  StereoEffect.prototype.dispose = function () {\n    _super.prototype.dispose.call(this);\n\n    this._dryWet.dispose();\n\n    this._split.dispose();\n\n    this._merge.dispose();\n\n    return this;\n  };\n\n  return StereoEffect;\n}(ToneAudioNode);\n\nexport { StereoEffect };","map":{"version":3,"sources":["../../../Tone/effect/StereoEffect.ts"],"names":[],"mappings":"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","sourceRoot":"","sourcesContent":["import * as tslib_1 from \"tslib\";\nimport { connect, connectSeries, ToneAudioNode } from \"../core/context/ToneAudioNode\";\nimport { CrossFade } from \"../component/channel/CrossFade\";\nimport { Split } from \"../component/channel/Split\";\nimport { Gain } from \"../core/context/Gain\";\nimport { Merge } from \"../component/channel/Merge\";\nimport { readOnly } from \"../core/util/Interface\";\n/**\n * Base class for Stereo effects.\n */\nvar StereoEffect = /** @class */ (function (_super) {\n    tslib_1.__extends(StereoEffect, _super);\n    function StereoEffect(options) {\n        var _this = _super.call(this, options) || this;\n        _this.name = \"StereoEffect\";\n        _this.input = new Gain({ context: _this.context });\n        // force mono sources to be stereo\n        _this.input.channelCount = 2;\n        _this.input.channelCountMode = \"explicit\";\n        _this._dryWet = _this.output = new CrossFade({\n            context: _this.context,\n            fade: options.wet\n        });\n        _this.wet = _this._dryWet.fade;\n        _this._split = new Split({ context: _this.context, channels: 2 });\n        _this._merge = new Merge({ context: _this.context, channels: 2 });\n        // connections\n        _this.input.connect(_this._split);\n        // dry wet connections\n        _this.input.connect(_this._dryWet.a);\n        _this._merge.connect(_this._dryWet.b);\n        readOnly(_this, [\"wet\"]);\n        return _this;\n    }\n    /**\n     * Connect the left part of the effect\n     */\n    StereoEffect.prototype.connectEffectLeft = function () {\n        var nodes = [];\n        for (var _i = 0; _i < arguments.length; _i++) {\n            nodes[_i] = arguments[_i];\n        }\n        this._split.connect(nodes[0], 0, 0);\n        connectSeries.apply(void 0, tslib_1.__spread(nodes));\n        connect(nodes[nodes.length - 1], this._merge, 0, 0);\n    };\n    /**\n     * Connect the right part of the effect\n     */\n    StereoEffect.prototype.connectEffectRight = function () {\n        var nodes = [];\n        for (var _i = 0; _i < arguments.length; _i++) {\n            nodes[_i] = arguments[_i];\n        }\n        this._split.connect(nodes[0], 1, 0);\n        connectSeries.apply(void 0, tslib_1.__spread(nodes));\n        connect(nodes[nodes.length - 1], this._merge, 0, 1);\n    };\n    StereoEffect.getDefaults = function () {\n        return Object.assign(ToneAudioNode.getDefaults(), {\n            wet: 1,\n        });\n    };\n    StereoEffect.prototype.dispose = function () {\n        _super.prototype.dispose.call(this);\n        this._dryWet.dispose();\n        this._split.dispose();\n        this._merge.dispose();\n        return this;\n    };\n    return StereoEffect;\n}(ToneAudioNode));\nexport { StereoEffect };\n//# sourceMappingURL=StereoEffect.js.map"]},"metadata":{},"sourceType":"module"}