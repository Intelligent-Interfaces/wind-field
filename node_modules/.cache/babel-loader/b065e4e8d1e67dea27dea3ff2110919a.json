{"ast":null,"code":"import * as tslib_1 from \"tslib\";\nimport { TicksClass } from \"../core/type/Ticks\";\nimport { omitFromObject, optionsFromArguments } from \"../core/util/Defaults\";\nimport { isArray, isString } from \"../core/util/TypeCheck\";\nimport { Part } from \"./Part\";\nimport { ToneEvent } from \"./ToneEvent\";\n/**\n * A sequence is an alternate notation of a part. Instead\n * of passing in an array of [time, event] pairs, pass\n * in an array of events which will be spaced at the\n * given subdivision. Sub-arrays will subdivide that beat\n * by the number of items are in the array.\n * Sequence notation inspiration from [Tidal](http://yaxu.org/tidal/)\n * @example\n * import { Sequence, Synth, Transport } from \"tone\";\n * const synth = new Synth().toDestination();\n * const seq = new Sequence((time, note) => {\n * \tsynth.triggerAttackRelease(note, 0.1, time);\n * \t// subdivisions are given as subarrays\n * }, [\"C4\", [\"E4\", \"D4\", \"E4\"], \"G4\", [\"A4\", \"G4\"]]).start(0);\n * Transport.start();\n * @category Event\n */\n\nvar Sequence =\n/** @class */\nfunction (_super) {\n  tslib_1.__extends(Sequence, _super);\n\n  function Sequence() {\n    var _this = _super.call(this, optionsFromArguments(Sequence.getDefaults(), arguments, [\"callback\", \"events\", \"subdivision\"])) || this;\n\n    _this.name = \"Sequence\";\n    /**\n     * The object responsible for scheduling all of the events\n     */\n\n    _this._part = new Part({\n      callback: _this._seqCallback.bind(_this),\n      context: _this.context\n    });\n    /**\n     * private reference to all of the sequence proxies\n     */\n\n    _this._events = [];\n    /**\n     * The proxied array\n     */\n\n    _this._eventsArray = [];\n    var options = optionsFromArguments(Sequence.getDefaults(), arguments, [\"callback\", \"events\", \"subdivision\"]);\n    _this._subdivision = _this.toTicks(options.subdivision);\n    _this.events = options.events; // set all of the values\n\n    _this.loop = options.loop;\n    _this.loopStart = options.loopStart;\n    _this.loopEnd = options.loopEnd;\n    _this.playbackRate = options.playbackRate;\n    _this.probability = options.probability;\n    _this.humanize = options.humanize;\n    _this.mute = options.mute;\n    _this.playbackRate = options.playbackRate;\n    return _this;\n  }\n\n  Sequence.getDefaults = function () {\n    return Object.assign(omitFromObject(ToneEvent.getDefaults(), [\"value\"]), {\n      events: [],\n      loop: true,\n      loopEnd: 0,\n      loopStart: 0,\n      subdivision: \"8n\"\n    });\n  };\n  /**\n   * The internal callback for when an event is invoked\n   */\n\n\n  Sequence.prototype._seqCallback = function (time, value) {\n    if (value !== null) {\n      this.callback(time, value);\n    }\n  };\n\n  Object.defineProperty(Sequence.prototype, \"events\", {\n    /**\n     * The sequence\n     */\n    get: function () {\n      return this._events;\n    },\n    set: function (s) {\n      this.clear();\n      this._eventsArray = s;\n      this._events = this._createSequence(this._eventsArray);\n\n      this._eventsUpdated();\n    },\n    enumerable: true,\n    configurable: true\n  });\n  /**\n   * Start the part at the given time.\n   * @param  time    When to start the part.\n   * @param  offset  The offset index to start at\n   */\n\n  Sequence.prototype.start = function (time, offset) {\n    this._part.start(time, offset ? this._indexTime(offset) : offset);\n\n    return this;\n  };\n  /**\n   * Stop the part at the given time.\n   * @param  time  When to stop the part.\n   */\n\n\n  Sequence.prototype.stop = function (time) {\n    this._part.stop(time);\n\n    return this;\n  };\n\n  Object.defineProperty(Sequence.prototype, \"subdivision\", {\n    /**\n     * The subdivision of the sequence. This can only be\n     * set in the constructor. The subdivision is the\n     * interval between successive steps.\n     */\n    get: function () {\n      return new TicksClass(this.context, this._subdivision).toSeconds();\n    },\n    enumerable: true,\n    configurable: true\n  });\n  /**\n   * Create a sequence proxy which can be monitored to create subsequences\n   */\n\n  Sequence.prototype._createSequence = function (array) {\n    var _this = this;\n\n    return new Proxy(array, {\n      get: function (target, property) {\n        // property is index in this case\n        return target[property];\n      },\n      set: function (target, property, value) {\n        if (isString(property) && isFinite(parseInt(property, 10))) {\n          if (isArray(value)) {\n            target[property] = _this._createSequence(value);\n          } else {\n            target[property] = value;\n          }\n        } else {\n          target[property] = value;\n        }\n\n        _this._eventsUpdated(); // return true to accept the changes\n\n\n        return true;\n      }\n    });\n  };\n  /**\n   * When the sequence has changed, all of the events need to be recreated\n   */\n\n\n  Sequence.prototype._eventsUpdated = function () {\n    this._part.clear();\n\n    this._rescheduleSequence(this._eventsArray, this._subdivision, this.startOffset); // update the loopEnd\n\n\n    this.loopEnd = this.loopEnd;\n  };\n  /**\n   * reschedule all of the events that need to be rescheduled\n   */\n\n\n  Sequence.prototype._rescheduleSequence = function (sequence, subdivision, startOffset) {\n    var _this = this;\n\n    sequence.forEach(function (value, index) {\n      var eventOffset = index * subdivision + startOffset;\n\n      if (isArray(value)) {\n        _this._rescheduleSequence(value, subdivision / value.length, eventOffset);\n      } else {\n        var startTime = new TicksClass(_this.context, eventOffset, \"i\").toSeconds();\n\n        _this._part.add(startTime, value);\n      }\n    });\n  };\n  /**\n   * Get the time of the index given the Sequence's subdivision\n   * @param  index\n   * @return The time of that index\n   */\n\n\n  Sequence.prototype._indexTime = function (index) {\n    return new TicksClass(this.context, index * this._subdivision + this.startOffset).toSeconds();\n  };\n  /**\n   * Clear all of the events\n   */\n\n\n  Sequence.prototype.clear = function () {\n    this._part.clear();\n\n    return this;\n  };\n\n  Sequence.prototype.dispose = function () {\n    _super.prototype.dispose.call(this);\n\n    this._part.dispose();\n\n    return this;\n  };\n\n  Object.defineProperty(Sequence.prototype, \"loop\", {\n    //-------------------------------------\n    // PROXY CALLS\n    //-------------------------------------\n    get: function () {\n      return this._part.loop;\n    },\n    set: function (l) {\n      this._part.loop = l;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(Sequence.prototype, \"loopStart\", {\n    /**\n     * The index at which the sequence should start looping\n     */\n    get: function () {\n      return this._loopStart;\n    },\n    set: function (index) {\n      this._loopStart = index;\n      this._part.loopStart = this._indexTime(index);\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(Sequence.prototype, \"loopEnd\", {\n    /**\n     * The index at which the sequence should end looping\n     */\n    get: function () {\n      return this._loopEnd;\n    },\n    set: function (index) {\n      this._loopEnd = index;\n\n      if (index === 0) {\n        this._part.loopEnd = this._indexTime(this._eventsArray.length);\n      } else {\n        this._part.loopEnd = this._indexTime(index);\n      }\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(Sequence.prototype, \"startOffset\", {\n    get: function () {\n      return this._part.startOffset;\n    },\n    set: function (start) {\n      this._part.startOffset = start;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(Sequence.prototype, \"playbackRate\", {\n    get: function () {\n      return this._part.playbackRate;\n    },\n    set: function (rate) {\n      this._part.playbackRate = rate;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(Sequence.prototype, \"probability\", {\n    get: function () {\n      return this._part.probability;\n    },\n    set: function (prob) {\n      this._part.probability = prob;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(Sequence.prototype, \"progress\", {\n    get: function () {\n      return this._part.progress;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(Sequence.prototype, \"humanize\", {\n    get: function () {\n      return this._part.humanize;\n    },\n    set: function (variation) {\n      this._part.humanize = variation;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(Sequence.prototype, \"length\", {\n    /**\n     * The number of scheduled events\n     */\n    get: function () {\n      return this._part.length;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  return Sequence;\n}(ToneEvent);\n\nexport { Sequence };","map":{"version":3,"sources":["../../../Tone/event/Sequence.ts"],"names":[],"mappings":"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","sourceRoot":"","sourcesContent":["import * as tslib_1 from \"tslib\";\nimport { TicksClass } from \"../core/type/Ticks\";\nimport { omitFromObject, optionsFromArguments } from \"../core/util/Defaults\";\nimport { isArray, isString } from \"../core/util/TypeCheck\";\nimport { Part } from \"./Part\";\nimport { ToneEvent } from \"./ToneEvent\";\n/**\n * A sequence is an alternate notation of a part. Instead\n * of passing in an array of [time, event] pairs, pass\n * in an array of events which will be spaced at the\n * given subdivision. Sub-arrays will subdivide that beat\n * by the number of items are in the array.\n * Sequence notation inspiration from [Tidal](http://yaxu.org/tidal/)\n * @example\n * import { Sequence, Synth, Transport } from \"tone\";\n * const synth = new Synth().toDestination();\n * const seq = new Sequence((time, note) => {\n * \tsynth.triggerAttackRelease(note, 0.1, time);\n * \t// subdivisions are given as subarrays\n * }, [\"C4\", [\"E4\", \"D4\", \"E4\"], \"G4\", [\"A4\", \"G4\"]]).start(0);\n * Transport.start();\n * @category Event\n */\nvar Sequence = /** @class */ (function (_super) {\n    tslib_1.__extends(Sequence, _super);\n    function Sequence() {\n        var _this = _super.call(this, optionsFromArguments(Sequence.getDefaults(), arguments, [\"callback\", \"events\", \"subdivision\"])) || this;\n        _this.name = \"Sequence\";\n        /**\n         * The object responsible for scheduling all of the events\n         */\n        _this._part = new Part({\n            callback: _this._seqCallback.bind(_this),\n            context: _this.context,\n        });\n        /**\n         * private reference to all of the sequence proxies\n         */\n        _this._events = [];\n        /**\n         * The proxied array\n         */\n        _this._eventsArray = [];\n        var options = optionsFromArguments(Sequence.getDefaults(), arguments, [\"callback\", \"events\", \"subdivision\"]);\n        _this._subdivision = _this.toTicks(options.subdivision);\n        _this.events = options.events;\n        // set all of the values\n        _this.loop = options.loop;\n        _this.loopStart = options.loopStart;\n        _this.loopEnd = options.loopEnd;\n        _this.playbackRate = options.playbackRate;\n        _this.probability = options.probability;\n        _this.humanize = options.humanize;\n        _this.mute = options.mute;\n        _this.playbackRate = options.playbackRate;\n        return _this;\n    }\n    Sequence.getDefaults = function () {\n        return Object.assign(omitFromObject(ToneEvent.getDefaults(), [\"value\"]), {\n            events: [],\n            loop: true,\n            loopEnd: 0,\n            loopStart: 0,\n            subdivision: \"8n\",\n        });\n    };\n    /**\n     * The internal callback for when an event is invoked\n     */\n    Sequence.prototype._seqCallback = function (time, value) {\n        if (value !== null) {\n            this.callback(time, value);\n        }\n    };\n    Object.defineProperty(Sequence.prototype, \"events\", {\n        /**\n         * The sequence\n         */\n        get: function () {\n            return this._events;\n        },\n        set: function (s) {\n            this.clear();\n            this._eventsArray = s;\n            this._events = this._createSequence(this._eventsArray);\n            this._eventsUpdated();\n        },\n        enumerable: true,\n        configurable: true\n    });\n    /**\n     * Start the part at the given time.\n     * @param  time    When to start the part.\n     * @param  offset  The offset index to start at\n     */\n    Sequence.prototype.start = function (time, offset) {\n        this._part.start(time, offset ? this._indexTime(offset) : offset);\n        return this;\n    };\n    /**\n     * Stop the part at the given time.\n     * @param  time  When to stop the part.\n     */\n    Sequence.prototype.stop = function (time) {\n        this._part.stop(time);\n        return this;\n    };\n    Object.defineProperty(Sequence.prototype, \"subdivision\", {\n        /**\n         * The subdivision of the sequence. This can only be\n         * set in the constructor. The subdivision is the\n         * interval between successive steps.\n         */\n        get: function () {\n            return new TicksClass(this.context, this._subdivision).toSeconds();\n        },\n        enumerable: true,\n        configurable: true\n    });\n    /**\n     * Create a sequence proxy which can be monitored to create subsequences\n     */\n    Sequence.prototype._createSequence = function (array) {\n        var _this = this;\n        return new Proxy(array, {\n            get: function (target, property) {\n                // property is index in this case\n                return target[property];\n            },\n            set: function (target, property, value) {\n                if (isString(property) && isFinite(parseInt(property, 10))) {\n                    if (isArray(value)) {\n                        target[property] = _this._createSequence(value);\n                    }\n                    else {\n                        target[property] = value;\n                    }\n                }\n                else {\n                    target[property] = value;\n                }\n                _this._eventsUpdated();\n                // return true to accept the changes\n                return true;\n            },\n        });\n    };\n    /**\n     * When the sequence has changed, all of the events need to be recreated\n     */\n    Sequence.prototype._eventsUpdated = function () {\n        this._part.clear();\n        this._rescheduleSequence(this._eventsArray, this._subdivision, this.startOffset);\n        // update the loopEnd\n        this.loopEnd = this.loopEnd;\n    };\n    /**\n     * reschedule all of the events that need to be rescheduled\n     */\n    Sequence.prototype._rescheduleSequence = function (sequence, subdivision, startOffset) {\n        var _this = this;\n        sequence.forEach(function (value, index) {\n            var eventOffset = index * (subdivision) + startOffset;\n            if (isArray(value)) {\n                _this._rescheduleSequence(value, subdivision / value.length, eventOffset);\n            }\n            else {\n                var startTime = new TicksClass(_this.context, eventOffset, \"i\").toSeconds();\n                _this._part.add(startTime, value);\n            }\n        });\n    };\n    /**\n     * Get the time of the index given the Sequence's subdivision\n     * @param  index\n     * @return The time of that index\n     */\n    Sequence.prototype._indexTime = function (index) {\n        return new TicksClass(this.context, index * (this._subdivision) + this.startOffset).toSeconds();\n    };\n    /**\n     * Clear all of the events\n     */\n    Sequence.prototype.clear = function () {\n        this._part.clear();\n        return this;\n    };\n    Sequence.prototype.dispose = function () {\n        _super.prototype.dispose.call(this);\n        this._part.dispose();\n        return this;\n    };\n    Object.defineProperty(Sequence.prototype, \"loop\", {\n        //-------------------------------------\n        // PROXY CALLS\n        //-------------------------------------\n        get: function () {\n            return this._part.loop;\n        },\n        set: function (l) {\n            this._part.loop = l;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(Sequence.prototype, \"loopStart\", {\n        /**\n         * The index at which the sequence should start looping\n         */\n        get: function () {\n            return this._loopStart;\n        },\n        set: function (index) {\n            this._loopStart = index;\n            this._part.loopStart = this._indexTime(index);\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(Sequence.prototype, \"loopEnd\", {\n        /**\n         * The index at which the sequence should end looping\n         */\n        get: function () {\n            return this._loopEnd;\n        },\n        set: function (index) {\n            this._loopEnd = index;\n            if (index === 0) {\n                this._part.loopEnd = this._indexTime(this._eventsArray.length);\n            }\n            else {\n                this._part.loopEnd = this._indexTime(index);\n            }\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(Sequence.prototype, \"startOffset\", {\n        get: function () {\n            return this._part.startOffset;\n        },\n        set: function (start) {\n            this._part.startOffset = start;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(Sequence.prototype, \"playbackRate\", {\n        get: function () {\n            return this._part.playbackRate;\n        },\n        set: function (rate) {\n            this._part.playbackRate = rate;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(Sequence.prototype, \"probability\", {\n        get: function () {\n            return this._part.probability;\n        },\n        set: function (prob) {\n            this._part.probability = prob;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(Sequence.prototype, \"progress\", {\n        get: function () {\n            return this._part.progress;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(Sequence.prototype, \"humanize\", {\n        get: function () {\n            return this._part.humanize;\n        },\n        set: function (variation) {\n            this._part.humanize = variation;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(Sequence.prototype, \"length\", {\n        /**\n         * The number of scheduled events\n         */\n        get: function () {\n            return this._part.length;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    return Sequence;\n}(ToneEvent));\nexport { Sequence };\n//# sourceMappingURL=Sequence.js.map"]},"metadata":{},"sourceType":"module"}