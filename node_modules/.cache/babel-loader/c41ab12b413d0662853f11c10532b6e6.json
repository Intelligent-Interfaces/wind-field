{"ast":null,"code":"import * as tslib_1 from \"tslib\";\nimport \"../core/clock/Transport\";\nimport { ToneWithContext } from \"../core/context/ToneWithContext\";\nimport { TicksClass } from \"../core/type/Ticks\";\nimport { defaultArg, optionsFromArguments } from \"../core/util/Defaults\";\nimport { noOp } from \"../core/util/Interface\";\nimport { StateTimeline } from \"../core/util/StateTimeline\";\nimport { isBoolean, isNumber } from \"../core/util/TypeCheck\";\n/**\n * ToneEvent abstracts away this.context.transport.schedule and provides a schedulable\n * callback for a single or repeatable events along the timeline.\n *\n * @example\n * import { PolySynth, Sequence, ToneEvent, Transport } from \"tone\";\n *\n * const synth = new PolySynth().toDestination();\n * const chordEvent = new ToneEvent(((time, chord) => {\n * \t// the chord as well as the exact time of the event\n * \t// are passed in as arguments to the callback function\n * \tsynth.triggerAttackRelease(chord, 0.5, time);\n * }), [\"D4\", \"E4\", \"F4\"]);\n * // start the chord at the beginning of the transport timeline\n * chordEvent.start();\n * // loop it every measure for 8 measures\n * chordEvent.loop = 8;\n * chordEvent.loopEnd = \"1m\";\n * @category Event\n */\n\nvar ToneEvent =\n/** @class */\nfunction (_super) {\n  tslib_1.__extends(ToneEvent, _super);\n\n  function ToneEvent() {\n    var _this = _super.call(this, optionsFromArguments(ToneEvent.getDefaults(), arguments, [\"callback\", \"value\"])) || this;\n\n    _this.name = \"ToneEvent\";\n    /**\n     * Tracks the scheduled events\n     */\n\n    _this._state = new StateTimeline(\"stopped\");\n    /**\n     * A delay time from when the event is scheduled to start\n     */\n\n    _this._startOffset = 0;\n    var options = optionsFromArguments(ToneEvent.getDefaults(), arguments, [\"callback\", \"value\"]);\n    _this._loop = options.loop;\n    _this.callback = options.callback;\n    _this.value = options.value;\n    _this._loopStart = _this.toTicks(options.loopStart);\n    _this._loopEnd = _this.toTicks(options.loopEnd);\n    _this._playbackRate = options.playbackRate;\n    _this._probability = options.probability;\n    _this._humanize = options.humanize;\n    _this.mute = options.mute;\n    _this._playbackRate = options.playbackRate;\n    _this._state.increasing = true; // schedule the events for the first time\n\n    _this._rescheduleEvents();\n\n    return _this;\n  }\n\n  ToneEvent.getDefaults = function () {\n    return Object.assign(ToneWithContext.getDefaults(), {\n      callback: noOp,\n      humanize: false,\n      loop: false,\n      loopEnd: \"1m\",\n      loopStart: 0,\n      mute: false,\n      playbackRate: 1,\n      probability: 1,\n      value: null\n    });\n  };\n  /**\n   * Reschedule all of the events along the timeline\n   * with the updated values.\n   * @param after Only reschedules events after the given time.\n   */\n\n\n  ToneEvent.prototype._rescheduleEvents = function (after) {\n    var _this = this;\n\n    if (after === void 0) {\n      after = -1;\n    } // if no argument is given, schedules all of the events\n\n\n    this._state.forEachFrom(after, function (event) {\n      var duration;\n\n      if (event.state === \"started\") {\n        if (event.id !== -1) {\n          _this.context.transport.clear(event.id);\n        }\n\n        var startTick = event.time + Math.round(_this.startOffset / _this._playbackRate);\n\n        if (_this._loop === true || isNumber(_this._loop) && _this._loop > 1) {\n          duration = Infinity;\n\n          if (isNumber(_this._loop)) {\n            duration = _this._loop * _this._getLoopDuration();\n          }\n\n          var nextEvent = _this._state.getAfter(startTick);\n\n          if (nextEvent !== null) {\n            duration = Math.min(duration, nextEvent.time - startTick);\n          }\n\n          if (duration !== Infinity) {\n            // schedule a stop since it's finite duration\n            _this._state.setStateAtTime(\"stopped\", startTick + duration + 1, {\n              id: -1\n            });\n\n            duration = new TicksClass(_this.context, duration);\n          }\n\n          var interval = new TicksClass(_this.context, _this._getLoopDuration());\n          event.id = _this.context.transport.scheduleRepeat(_this._tick.bind(_this), interval, new TicksClass(_this.context, startTick), duration);\n        } else {\n          event.id = _this.context.transport.schedule(_this._tick.bind(_this), new TicksClass(_this.context, startTick));\n        }\n      }\n    });\n  };\n\n  Object.defineProperty(ToneEvent.prototype, \"state\", {\n    /**\n     * Returns the playback state of the note, either \"started\" or \"stopped\".\n     */\n    get: function () {\n      return this._state.getValueAtTime(this.context.transport.ticks);\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(ToneEvent.prototype, \"startOffset\", {\n    /**\n     * The start from the scheduled start time.\n     */\n    get: function () {\n      return this._startOffset;\n    },\n    set: function (offset) {\n      this._startOffset = offset;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(ToneEvent.prototype, \"probability\", {\n    /**\n     * The probability of the notes being triggered.\n     */\n    get: function () {\n      return this._probability;\n    },\n    set: function (prob) {\n      this._probability = prob;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(ToneEvent.prototype, \"humanize\", {\n    /**\n     * If set to true, will apply small random variation\n     * to the callback time. If the value is given as a time, it will randomize\n     * by that amount.\n     * @example\n     * import { ToneEvent } from \"tone\";\n     * const event = new ToneEvent();\n     * event.humanize = true;\n     */\n    get: function () {\n      return this._humanize;\n    },\n    set: function (variation) {\n      this._humanize = variation;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  /**\n   * Start the note at the given time.\n   * @param  time  When the event should start.\n   */\n\n  ToneEvent.prototype.start = function (time) {\n    var ticks = this.toTicks(time);\n\n    if (this._state.getValueAtTime(ticks) === \"stopped\") {\n      this._state.add({\n        id: -1,\n        state: \"started\",\n        time: ticks\n      });\n\n      this._rescheduleEvents(ticks);\n    }\n\n    return this;\n  };\n  /**\n   * Stop the Event at the given time.\n   * @param  time  When the event should stop.\n   */\n\n\n  ToneEvent.prototype.stop = function (time) {\n    this.cancel(time);\n    var ticks = this.toTicks(time);\n\n    if (this._state.getValueAtTime(ticks) === \"started\") {\n      this._state.setStateAtTime(\"stopped\", ticks, {\n        id: -1\n      });\n\n      var previousEvent = this._state.getBefore(ticks);\n\n      var reschedulTime = ticks;\n\n      if (previousEvent !== null) {\n        reschedulTime = previousEvent.time;\n      }\n\n      this._rescheduleEvents(reschedulTime);\n    }\n\n    return this;\n  };\n  /**\n   * Cancel all scheduled events greater than or equal to the given time\n   * @param  time  The time after which events will be cancel.\n   */\n\n\n  ToneEvent.prototype.cancel = function (time) {\n    var _this = this;\n\n    time = defaultArg(time, -Infinity);\n    var ticks = this.toTicks(time);\n\n    this._state.forEachFrom(ticks, function (event) {\n      _this.context.transport.clear(event.id);\n    });\n\n    this._state.cancel(ticks);\n\n    return this;\n  };\n  /**\n   * The callback function invoker. Also\n   * checks if the Event is done playing\n   * @param  time  The time of the event in seconds\n   */\n\n\n  ToneEvent.prototype._tick = function (time) {\n    var ticks = this.context.transport.getTicksAtTime(time);\n\n    if (!this.mute && this._state.getValueAtTime(ticks) === \"started\") {\n      if (this.probability < 1 && Math.random() > this.probability) {\n        return;\n      }\n\n      if (this.humanize) {\n        var variation = 0.02;\n\n        if (!isBoolean(this.humanize)) {\n          variation = this.toSeconds(this.humanize);\n        }\n\n        time += (Math.random() * 2 - 1) * variation;\n      }\n\n      this.callback(time, this.value);\n    }\n  };\n  /**\n   * Get the duration of the loop.\n   */\n\n\n  ToneEvent.prototype._getLoopDuration = function () {\n    return Math.round((this._loopEnd - this._loopStart) / this._playbackRate);\n  };\n\n  Object.defineProperty(ToneEvent.prototype, \"loop\", {\n    /**\n     * If the note should loop or not\n     * between ToneEvent.loopStart and\n     * ToneEvent.loopEnd. If set to true,\n     * the event will loop indefinitely,\n     * if set to a number greater than 1\n     * it will play a specific number of\n     * times, if set to false, 0 or 1, the\n     * part will only play once.\n     */\n    get: function () {\n      return this._loop;\n    },\n    set: function (loop) {\n      this._loop = loop;\n\n      this._rescheduleEvents();\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(ToneEvent.prototype, \"playbackRate\", {\n    /**\n     * The playback rate of the note. Defaults to 1.\n     * @example\n     * import { ToneEvent } from \"tone\";\n     * const note = new ToneEvent();\n     * note.loop = true;\n     * // repeat the note twice as fast\n     * note.playbackRate = 2;\n     */\n    get: function () {\n      return this._playbackRate;\n    },\n    set: function (rate) {\n      this._playbackRate = rate;\n\n      this._rescheduleEvents();\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(ToneEvent.prototype, \"loopEnd\", {\n    /**\n     * The loopEnd point is the time the event will loop\n     * if ToneEvent.loop is true.\n     */\n    get: function () {\n      return new TicksClass(this.context, this._loopEnd).toSeconds();\n    },\n    set: function (loopEnd) {\n      this._loopEnd = this.toTicks(loopEnd);\n\n      if (this._loop) {\n        this._rescheduleEvents();\n      }\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(ToneEvent.prototype, \"loopStart\", {\n    /**\n     * The time when the loop should start.\n     */\n    get: function () {\n      return new TicksClass(this.context, this._loopStart).toSeconds();\n    },\n    set: function (loopStart) {\n      this._loopStart = this.toTicks(loopStart);\n\n      if (this._loop) {\n        this._rescheduleEvents();\n      }\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(ToneEvent.prototype, \"progress\", {\n    /**\n     * The current progress of the loop interval.\n     * Returns 0 if the event is not started yet or\n     * it is not set to loop.\n     */\n    get: function () {\n      if (this._loop) {\n        var ticks = this.context.transport.ticks;\n\n        var lastEvent = this._state.get(ticks);\n\n        if (lastEvent !== null && lastEvent.state === \"started\") {\n          var loopDuration = this._getLoopDuration();\n\n          var progress = (ticks - lastEvent.time) % loopDuration;\n          return progress / loopDuration;\n        } else {\n          return 0;\n        }\n      } else {\n        return 0;\n      }\n    },\n    enumerable: true,\n    configurable: true\n  });\n\n  ToneEvent.prototype.dispose = function () {\n    _super.prototype.dispose.call(this);\n\n    this.cancel();\n\n    this._state.dispose();\n\n    return this;\n  };\n\n  return ToneEvent;\n}(ToneWithContext);\n\nexport { ToneEvent };","map":{"version":3,"sources":["../../../Tone/event/ToneEvent.ts"],"names":[],"mappings":"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","sourceRoot":"","sourcesContent":["import * as tslib_1 from \"tslib\";\nimport \"../core/clock/Transport\";\nimport { ToneWithContext } from \"../core/context/ToneWithContext\";\nimport { TicksClass } from \"../core/type/Ticks\";\nimport { defaultArg, optionsFromArguments } from \"../core/util/Defaults\";\nimport { noOp } from \"../core/util/Interface\";\nimport { StateTimeline } from \"../core/util/StateTimeline\";\nimport { isBoolean, isNumber } from \"../core/util/TypeCheck\";\n/**\n * ToneEvent abstracts away this.context.transport.schedule and provides a schedulable\n * callback for a single or repeatable events along the timeline.\n *\n * @example\n * import { PolySynth, Sequence, ToneEvent, Transport } from \"tone\";\n *\n * const synth = new PolySynth().toDestination();\n * const chordEvent = new ToneEvent(((time, chord) => {\n * \t// the chord as well as the exact time of the event\n * \t// are passed in as arguments to the callback function\n * \tsynth.triggerAttackRelease(chord, 0.5, time);\n * }), [\"D4\", \"E4\", \"F4\"]);\n * // start the chord at the beginning of the transport timeline\n * chordEvent.start();\n * // loop it every measure for 8 measures\n * chordEvent.loop = 8;\n * chordEvent.loopEnd = \"1m\";\n * @category Event\n */\nvar ToneEvent = /** @class */ (function (_super) {\n    tslib_1.__extends(ToneEvent, _super);\n    function ToneEvent() {\n        var _this = _super.call(this, optionsFromArguments(ToneEvent.getDefaults(), arguments, [\"callback\", \"value\"])) || this;\n        _this.name = \"ToneEvent\";\n        /**\n         * Tracks the scheduled events\n         */\n        _this._state = new StateTimeline(\"stopped\");\n        /**\n         * A delay time from when the event is scheduled to start\n         */\n        _this._startOffset = 0;\n        var options = optionsFromArguments(ToneEvent.getDefaults(), arguments, [\"callback\", \"value\"]);\n        _this._loop = options.loop;\n        _this.callback = options.callback;\n        _this.value = options.value;\n        _this._loopStart = _this.toTicks(options.loopStart);\n        _this._loopEnd = _this.toTicks(options.loopEnd);\n        _this._playbackRate = options.playbackRate;\n        _this._probability = options.probability;\n        _this._humanize = options.humanize;\n        _this.mute = options.mute;\n        _this._playbackRate = options.playbackRate;\n        _this._state.increasing = true;\n        // schedule the events for the first time\n        _this._rescheduleEvents();\n        return _this;\n    }\n    ToneEvent.getDefaults = function () {\n        return Object.assign(ToneWithContext.getDefaults(), {\n            callback: noOp,\n            humanize: false,\n            loop: false,\n            loopEnd: \"1m\",\n            loopStart: 0,\n            mute: false,\n            playbackRate: 1,\n            probability: 1,\n            value: null,\n        });\n    };\n    /**\n     * Reschedule all of the events along the timeline\n     * with the updated values.\n     * @param after Only reschedules events after the given time.\n     */\n    ToneEvent.prototype._rescheduleEvents = function (after) {\n        var _this = this;\n        if (after === void 0) { after = -1; }\n        // if no argument is given, schedules all of the events\n        this._state.forEachFrom(after, function (event) {\n            var duration;\n            if (event.state === \"started\") {\n                if (event.id !== -1) {\n                    _this.context.transport.clear(event.id);\n                }\n                var startTick = event.time + Math.round(_this.startOffset / _this._playbackRate);\n                if (_this._loop === true || isNumber(_this._loop) && _this._loop > 1) {\n                    duration = Infinity;\n                    if (isNumber(_this._loop)) {\n                        duration = (_this._loop) * _this._getLoopDuration();\n                    }\n                    var nextEvent = _this._state.getAfter(startTick);\n                    if (nextEvent !== null) {\n                        duration = Math.min(duration, nextEvent.time - startTick);\n                    }\n                    if (duration !== Infinity) {\n                        // schedule a stop since it's finite duration\n                        _this._state.setStateAtTime(\"stopped\", startTick + duration + 1, { id: -1 });\n                        duration = new TicksClass(_this.context, duration);\n                    }\n                    var interval = new TicksClass(_this.context, _this._getLoopDuration());\n                    event.id = _this.context.transport.scheduleRepeat(_this._tick.bind(_this), interval, new TicksClass(_this.context, startTick), duration);\n                }\n                else {\n                    event.id = _this.context.transport.schedule(_this._tick.bind(_this), new TicksClass(_this.context, startTick));\n                }\n            }\n        });\n    };\n    Object.defineProperty(ToneEvent.prototype, \"state\", {\n        /**\n         * Returns the playback state of the note, either \"started\" or \"stopped\".\n         */\n        get: function () {\n            return this._state.getValueAtTime(this.context.transport.ticks);\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(ToneEvent.prototype, \"startOffset\", {\n        /**\n         * The start from the scheduled start time.\n         */\n        get: function () {\n            return this._startOffset;\n        },\n        set: function (offset) {\n            this._startOffset = offset;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(ToneEvent.prototype, \"probability\", {\n        /**\n         * The probability of the notes being triggered.\n         */\n        get: function () {\n            return this._probability;\n        },\n        set: function (prob) {\n            this._probability = prob;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(ToneEvent.prototype, \"humanize\", {\n        /**\n         * If set to true, will apply small random variation\n         * to the callback time. If the value is given as a time, it will randomize\n         * by that amount.\n         * @example\n         * import { ToneEvent } from \"tone\";\n         * const event = new ToneEvent();\n         * event.humanize = true;\n         */\n        get: function () {\n            return this._humanize;\n        },\n        set: function (variation) {\n            this._humanize = variation;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    /**\n     * Start the note at the given time.\n     * @param  time  When the event should start.\n     */\n    ToneEvent.prototype.start = function (time) {\n        var ticks = this.toTicks(time);\n        if (this._state.getValueAtTime(ticks) === \"stopped\") {\n            this._state.add({\n                id: -1,\n                state: \"started\",\n                time: ticks,\n            });\n            this._rescheduleEvents(ticks);\n        }\n        return this;\n    };\n    /**\n     * Stop the Event at the given time.\n     * @param  time  When the event should stop.\n     */\n    ToneEvent.prototype.stop = function (time) {\n        this.cancel(time);\n        var ticks = this.toTicks(time);\n        if (this._state.getValueAtTime(ticks) === \"started\") {\n            this._state.setStateAtTime(\"stopped\", ticks, { id: -1 });\n            var previousEvent = this._state.getBefore(ticks);\n            var reschedulTime = ticks;\n            if (previousEvent !== null) {\n                reschedulTime = previousEvent.time;\n            }\n            this._rescheduleEvents(reschedulTime);\n        }\n        return this;\n    };\n    /**\n     * Cancel all scheduled events greater than or equal to the given time\n     * @param  time  The time after which events will be cancel.\n     */\n    ToneEvent.prototype.cancel = function (time) {\n        var _this = this;\n        time = defaultArg(time, -Infinity);\n        var ticks = this.toTicks(time);\n        this._state.forEachFrom(ticks, function (event) {\n            _this.context.transport.clear(event.id);\n        });\n        this._state.cancel(ticks);\n        return this;\n    };\n    /**\n     * The callback function invoker. Also\n     * checks if the Event is done playing\n     * @param  time  The time of the event in seconds\n     */\n    ToneEvent.prototype._tick = function (time) {\n        var ticks = this.context.transport.getTicksAtTime(time);\n        if (!this.mute && this._state.getValueAtTime(ticks) === \"started\") {\n            if (this.probability < 1 && Math.random() > this.probability) {\n                return;\n            }\n            if (this.humanize) {\n                var variation = 0.02;\n                if (!isBoolean(this.humanize)) {\n                    variation = this.toSeconds(this.humanize);\n                }\n                time += (Math.random() * 2 - 1) * variation;\n            }\n            this.callback(time, this.value);\n        }\n    };\n    /**\n     * Get the duration of the loop.\n     */\n    ToneEvent.prototype._getLoopDuration = function () {\n        return Math.round((this._loopEnd - this._loopStart) / this._playbackRate);\n    };\n    Object.defineProperty(ToneEvent.prototype, \"loop\", {\n        /**\n         * If the note should loop or not\n         * between ToneEvent.loopStart and\n         * ToneEvent.loopEnd. If set to true,\n         * the event will loop indefinitely,\n         * if set to a number greater than 1\n         * it will play a specific number of\n         * times, if set to false, 0 or 1, the\n         * part will only play once.\n         */\n        get: function () {\n            return this._loop;\n        },\n        set: function (loop) {\n            this._loop = loop;\n            this._rescheduleEvents();\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(ToneEvent.prototype, \"playbackRate\", {\n        /**\n         * The playback rate of the note. Defaults to 1.\n         * @example\n         * import { ToneEvent } from \"tone\";\n         * const note = new ToneEvent();\n         * note.loop = true;\n         * // repeat the note twice as fast\n         * note.playbackRate = 2;\n         */\n        get: function () {\n            return this._playbackRate;\n        },\n        set: function (rate) {\n            this._playbackRate = rate;\n            this._rescheduleEvents();\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(ToneEvent.prototype, \"loopEnd\", {\n        /**\n         * The loopEnd point is the time the event will loop\n         * if ToneEvent.loop is true.\n         */\n        get: function () {\n            return new TicksClass(this.context, this._loopEnd).toSeconds();\n        },\n        set: function (loopEnd) {\n            this._loopEnd = this.toTicks(loopEnd);\n            if (this._loop) {\n                this._rescheduleEvents();\n            }\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(ToneEvent.prototype, \"loopStart\", {\n        /**\n         * The time when the loop should start.\n         */\n        get: function () {\n            return new TicksClass(this.context, this._loopStart).toSeconds();\n        },\n        set: function (loopStart) {\n            this._loopStart = this.toTicks(loopStart);\n            if (this._loop) {\n                this._rescheduleEvents();\n            }\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(ToneEvent.prototype, \"progress\", {\n        /**\n         * The current progress of the loop interval.\n         * Returns 0 if the event is not started yet or\n         * it is not set to loop.\n         */\n        get: function () {\n            if (this._loop) {\n                var ticks = this.context.transport.ticks;\n                var lastEvent = this._state.get(ticks);\n                if (lastEvent !== null && lastEvent.state === \"started\") {\n                    var loopDuration = this._getLoopDuration();\n                    var progress = (ticks - lastEvent.time) % loopDuration;\n                    return progress / loopDuration;\n                }\n                else {\n                    return 0;\n                }\n            }\n            else {\n                return 0;\n            }\n        },\n        enumerable: true,\n        configurable: true\n    });\n    ToneEvent.prototype.dispose = function () {\n        _super.prototype.dispose.call(this);\n        this.cancel();\n        this._state.dispose();\n        return this;\n    };\n    return ToneEvent;\n}(ToneWithContext));\nexport { ToneEvent };\n//# sourceMappingURL=ToneEvent.js.map"]},"metadata":{},"sourceType":"module"}