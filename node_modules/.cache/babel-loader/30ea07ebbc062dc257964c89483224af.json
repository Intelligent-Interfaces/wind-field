{"ast":null,"code":"import * as tslib_1 from \"tslib\";\nimport { Multiply } from \"./Multiply\";\nimport { SignalOperator } from \"./SignalOperator\";\n/**\n * Negate the incoming signal. i.e. an input signal of 10 will output -10\n *\n * @example\n * import { Negate, Signal } from \"tone\";\n * const neg = new Negate();\n * const sig = new Signal(-2).connect(neg);\n * // output of neg is positive 2.\n * @category Signal\n */\n\nvar Negate =\n/** @class */\nfunction (_super) {\n  tslib_1.__extends(Negate, _super);\n\n  function Negate() {\n    var _this = _super !== null && _super.apply(this, arguments) || this;\n\n    _this.name = \"Negate\";\n    /**\n     * negation is done by multiplying by -1\n     */\n\n    _this._multiply = new Multiply({\n      context: _this.context,\n      value: -1\n    });\n    /**\n     * The input and output are equal to the multiply node\n     */\n\n    _this.input = _this._multiply;\n    _this.output = _this._multiply;\n    return _this;\n  }\n  /**\n   * clean up\n   * @returns {Negate} this\n   */\n\n\n  Negate.prototype.dispose = function () {\n    _super.prototype.dispose.call(this);\n\n    this._multiply.dispose();\n\n    return this;\n  };\n\n  return Negate;\n}(SignalOperator);\n\nexport { Negate };","map":{"version":3,"sources":["../../../Tone/signal/Negate.ts"],"names":[],"mappings":";AACA,SAAS,QAAT,QAAyB,YAAzB;AACA,SAAS,cAAT,QAA+B,kBAA/B;AAEA;;;;;;;;;;;AAUA,IAAA,MAAA;AAAA;AAAA,UAAA,MAAA,EAAA;AAA4B,EAAA,OAAA,CAAA,SAAA,CAAA,MAAA,EAAA,MAAA;;AAA5B,WAAA,MAAA,GAAA;AAAA,QAAA,KAAA,GAAA,MAAA,KAAA,IAAA,IAAA,MAAA,CAAA,KAAA,CAAA,IAAA,EAAA,SAAA,CAAA,IAAA,IAAA;;AAEU,IAAA,KAAA,CAAA,IAAA,GAAe,QAAf;AAET;;;;AAGQ,IAAA,KAAA,CAAA,SAAA,GAAsB,IAAI,QAAJ,CAAa;AAC1C,MAAA,OAAO,EAAE,KAAI,CAAC,OAD4B;AAE1C,MAAA,KAAK,EAAE,CAAC;AAFkC,KAAb,CAAtB;AAKR;;;;AAGA,IAAA,KAAA,CAAA,KAAA,GAAQ,KAAI,CAAC,SAAb;AACA,IAAA,KAAA,CAAA,MAAA,GAAS,KAAI,CAAC,SAAd;;AAWA;AATA;;;;;;AAIA,EAAA,MAAA,CAAA,SAAA,CAAA,OAAA,GAAA,YAAA;AACC,IAAA,MAAA,CAAA,SAAA,CAAM,OAAN,CAAa,IAAb,CAAa,IAAb;;AACA,SAAK,SAAL,CAAe,OAAf;;AACA,WAAO,IAAP;AACA,GAJD;;AAKD,SAAA,MAAA;AAAC,CA3BD,CAA4B,cAA5B,CAAA","sourceRoot":"","sourcesContent":["import * as tslib_1 from \"tslib\";\nimport { Multiply } from \"./Multiply\";\nimport { SignalOperator } from \"./SignalOperator\";\n/**\n * Negate the incoming signal. i.e. an input signal of 10 will output -10\n *\n * @example\n * import { Negate, Signal } from \"tone\";\n * const neg = new Negate();\n * const sig = new Signal(-2).connect(neg);\n * // output of neg is positive 2.\n * @category Signal\n */\nvar Negate = /** @class */ (function (_super) {\n    tslib_1.__extends(Negate, _super);\n    function Negate() {\n        var _this = _super !== null && _super.apply(this, arguments) || this;\n        _this.name = \"Negate\";\n        /**\n         * negation is done by multiplying by -1\n         */\n        _this._multiply = new Multiply({\n            context: _this.context,\n            value: -1,\n        });\n        /**\n         * The input and output are equal to the multiply node\n         */\n        _this.input = _this._multiply;\n        _this.output = _this._multiply;\n        return _this;\n    }\n    /**\n     * clean up\n     * @returns {Negate} this\n     */\n    Negate.prototype.dispose = function () {\n        _super.prototype.dispose.call(this);\n        this._multiply.dispose();\n        return this;\n    };\n    return Negate;\n}(SignalOperator));\nexport { Negate };\n//# sourceMappingURL=Negate.js.map"]},"metadata":{},"sourceType":"module"}