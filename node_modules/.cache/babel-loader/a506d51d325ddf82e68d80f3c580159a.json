{"ast":null,"code":"/*! Source code licensed under Apache License 2.0. Copyright Â© 2017-current William Ngan and contributors. (https://github.com/williamngan/pts) */\nimport { Util, Const } from \"./Util\";\nimport { Geom, Num } from \"./Num\";\nimport { Vec, Mat } from \"./LinearAlgebra\";\nexport class Pt extends Float32Array {\n  constructor(...args) {\n    if (args.length === 1 && typeof args[0] == \"number\") {\n      super(args[0]);\n    } else {\n      super(args.length > 0 ? Util.getArgs(args) : [0, 0]);\n    }\n  }\n\n  static make(dimensions, defaultValue = 0, randomize = false) {\n    let p = new Float32Array(dimensions);\n    if (defaultValue) p.fill(defaultValue);\n\n    if (randomize) {\n      for (let i = 0, len = p.length; i < len; i++) {\n        p[i] = p[i] * Math.random();\n      }\n    }\n\n    return new Pt(p);\n  }\n\n  get id() {\n    return this._id;\n  }\n\n  set id(s) {\n    this._id = s;\n  }\n\n  get x() {\n    return this[0];\n  }\n\n  set x(n) {\n    this[0] = n;\n  }\n\n  get y() {\n    return this[1];\n  }\n\n  set y(n) {\n    this[1] = n;\n  }\n\n  get z() {\n    return this[2];\n  }\n\n  set z(n) {\n    this[2] = n;\n  }\n\n  get w() {\n    return this[3];\n  }\n\n  set w(n) {\n    this[3] = n;\n  }\n\n  clone() {\n    return new Pt(this);\n  }\n\n  equals(p, threshold = 0.000001) {\n    for (let i = 0, len = this.length; i < len; i++) {\n      if (Math.abs(this[i] - p[i]) > threshold) return false;\n    }\n\n    return true;\n  }\n\n  to(...args) {\n    let p = Util.getArgs(args);\n\n    for (let i = 0, len = Math.min(this.length, p.length); i < len; i++) {\n      this[i] = p[i];\n    }\n\n    return this;\n  }\n\n  $to(...args) {\n    return this.clone().to(...args);\n  }\n\n  toAngle(radian, magnitude, anchorFromPt = false) {\n    let m = magnitude != undefined ? magnitude : this.magnitude();\n    let change = [Math.cos(radian) * m, Math.sin(radian) * m];\n    return anchorFromPt ? this.add(change) : this.to(change);\n  }\n\n  op(fn) {\n    let self = this;\n    return (...params) => {\n      return fn(self, ...params);\n    };\n  }\n\n  ops(fns) {\n    let _ops = [];\n\n    for (let i = 0, len = fns.length; i < len; i++) {\n      _ops.push(this.op(fns[i]));\n    }\n\n    return _ops;\n  }\n\n  $take(axis) {\n    let p = [];\n\n    for (let i = 0, len = axis.length; i < len; i++) {\n      p.push(this[axis[i]] || 0);\n    }\n\n    return new Pt(p);\n  }\n\n  $concat(...args) {\n    return new Pt(this.toArray().concat(Util.getArgs(args)));\n  }\n\n  add(...args) {\n    args.length === 1 && typeof args[0] == \"number\" ? Vec.add(this, args[0]) : Vec.add(this, Util.getArgs(args));\n    return this;\n  }\n\n  $add(...args) {\n    return this.clone().add(...args);\n  }\n\n  subtract(...args) {\n    args.length === 1 && typeof args[0] == \"number\" ? Vec.subtract(this, args[0]) : Vec.subtract(this, Util.getArgs(args));\n    return this;\n  }\n\n  $subtract(...args) {\n    return this.clone().subtract(...args);\n  }\n\n  multiply(...args) {\n    args.length === 1 && typeof args[0] == \"number\" ? Vec.multiply(this, args[0]) : Vec.multiply(this, Util.getArgs(args));\n    return this;\n  }\n\n  $multiply(...args) {\n    return this.clone().multiply(...args);\n  }\n\n  divide(...args) {\n    args.length === 1 && typeof args[0] == \"number\" ? Vec.divide(this, args[0]) : Vec.divide(this, Util.getArgs(args));\n    return this;\n  }\n\n  $divide(...args) {\n    return this.clone().divide(...args);\n  }\n\n  magnitudeSq() {\n    return Vec.dot(this, this);\n  }\n\n  magnitude() {\n    return Vec.magnitude(this);\n  }\n\n  unit(magnitude = undefined) {\n    Vec.unit(this, magnitude);\n    return this;\n  }\n\n  $unit(magnitude = undefined) {\n    return this.clone().unit(magnitude);\n  }\n\n  dot(...args) {\n    return Vec.dot(this, Util.getArgs(args));\n  }\n\n  $cross2D(...args) {\n    return Vec.cross2D(this, Util.getArgs(args));\n  }\n\n  $cross(...args) {\n    return Vec.cross(this, Util.getArgs(args));\n  }\n\n  $project(...args) {\n    return this.$multiply(this.dot(...args) / this.magnitudeSq());\n  }\n\n  projectScalar(...args) {\n    return this.dot(...args) / this.magnitude();\n  }\n\n  abs() {\n    Vec.abs(this);\n    return this;\n  }\n\n  $abs() {\n    return this.clone().abs();\n  }\n\n  floor() {\n    Vec.floor(this);\n    return this;\n  }\n\n  $floor() {\n    return this.clone().floor();\n  }\n\n  ceil() {\n    Vec.ceil(this);\n    return this;\n  }\n\n  $ceil() {\n    return this.clone().ceil();\n  }\n\n  round() {\n    Vec.round(this);\n    return this;\n  }\n\n  $round() {\n    return this.clone().round();\n  }\n\n  minValue() {\n    return Vec.min(this);\n  }\n\n  maxValue() {\n    return Vec.max(this);\n  }\n\n  $min(...args) {\n    let p = Util.getArgs(args);\n    let m = this.clone();\n\n    for (let i = 0, len = Math.min(this.length, p.length); i < len; i++) {\n      m[i] = Math.min(this[i], p[i]);\n    }\n\n    return m;\n  }\n\n  $max(...args) {\n    let p = Util.getArgs(args);\n    let m = this.clone();\n\n    for (let i = 0, len = Math.min(this.length, p.length); i < len; i++) {\n      m[i] = Math.max(this[i], p[i]);\n    }\n\n    return m;\n  }\n\n  angle(axis = Const.xy) {\n    return Math.atan2(this[axis[1]], this[axis[0]]);\n  }\n\n  angleBetween(p, axis = Const.xy) {\n    return Geom.boundRadian(this.angle(axis)) - Geom.boundRadian(p.angle(axis));\n  }\n\n  scale(scale, anchor) {\n    Geom.scale(this, scale, anchor || Pt.make(this.length, 0));\n    return this;\n  }\n\n  rotate2D(angle, anchor, axis) {\n    Geom.rotate2D(this, angle, anchor || Pt.make(this.length, 0), axis);\n    return this;\n  }\n\n  shear2D(scale, anchor, axis) {\n    Geom.shear2D(this, scale, anchor || Pt.make(this.length, 0), axis);\n    return this;\n  }\n\n  reflect2D(line, axis) {\n    Geom.reflect2D(this, line, axis);\n    return this;\n  }\n\n  toString() {\n    return `Pt(${this.join(\", \")})`;\n  }\n\n  toArray() {\n    return [].slice.call(this);\n  }\n\n}\nexport class Group extends Array {\n  constructor(...args) {\n    super(...args);\n  }\n\n  get id() {\n    return this._id;\n  }\n\n  set id(s) {\n    this._id = s;\n  }\n\n  get p1() {\n    return this[0];\n  }\n\n  get p2() {\n    return this[1];\n  }\n\n  get p3() {\n    return this[2];\n  }\n\n  get p4() {\n    return this[3];\n  }\n\n  get q1() {\n    return this[this.length - 1];\n  }\n\n  get q2() {\n    return this[this.length - 2];\n  }\n\n  get q3() {\n    return this[this.length - 3];\n  }\n\n  get q4() {\n    return this[this.length - 4];\n  }\n\n  clone() {\n    let group = new Group();\n\n    for (let i = 0, len = this.length; i < len; i++) {\n      group.push(this[i].clone());\n    }\n\n    return group;\n  }\n\n  static fromArray(list) {\n    let g = new Group();\n\n    for (let i = 0, len = list.length; i < len; i++) {\n      let p = list[i] instanceof Pt ? list[i] : new Pt(list[i]);\n      g.push(p);\n    }\n\n    return g;\n  }\n\n  static fromPtArray(list) {\n    return Group.from(list);\n  }\n\n  split(chunkSize, stride, loopBack = false) {\n    let sp = Util.split(this, chunkSize, stride, loopBack);\n    return sp;\n  }\n\n  insert(pts, index = 0) {\n    Group.prototype.splice.apply(this, [index, 0, ...pts]);\n    return this;\n  }\n\n  remove(index = 0, count = 1) {\n    let param = index < 0 ? [index * -1 - 1, count] : [index, count];\n    return Group.prototype.splice.apply(this, param);\n  }\n\n  segments(pts_per_segment = 2, stride = 1, loopBack = false) {\n    return this.split(pts_per_segment, stride, loopBack);\n  }\n\n  lines() {\n    return this.segments(2, 1);\n  }\n\n  centroid() {\n    return Geom.centroid(this);\n  }\n\n  boundingBox() {\n    return Geom.boundingBox(this);\n  }\n\n  anchorTo(ptOrIndex = 0) {\n    Geom.anchor(this, ptOrIndex, \"to\");\n  }\n\n  anchorFrom(ptOrIndex = 0) {\n    Geom.anchor(this, ptOrIndex, \"from\");\n  }\n\n  op(fn) {\n    let self = this;\n    return (...params) => {\n      return fn(self, ...params);\n    };\n  }\n\n  ops(fns) {\n    let _ops = [];\n\n    for (let i = 0, len = fns.length; i < len; i++) {\n      _ops.push(this.op(fns[i]));\n    }\n\n    return _ops;\n  }\n\n  interpolate(t) {\n    t = Num.clamp(t, 0, 1);\n    let chunk = this.length - 1;\n    let tc = 1 / (this.length - 1);\n    let idx = Math.floor(t / tc);\n    return Geom.interpolate(this[idx], this[Math.min(this.length - 1, idx + 1)], (t - idx * tc) * chunk);\n  }\n\n  moveBy(...args) {\n    return this.add(...args);\n  }\n\n  moveTo(...args) {\n    let d = new Pt(Util.getArgs(args)).subtract(this[0]);\n    this.moveBy(d);\n    return this;\n  }\n\n  scale(scale, anchor) {\n    for (let i = 0, len = this.length; i < len; i++) {\n      Geom.scale(this[i], scale, anchor || this[0]);\n    }\n\n    return this;\n  }\n\n  rotate2D(angle, anchor, axis) {\n    for (let i = 0, len = this.length; i < len; i++) {\n      Geom.rotate2D(this[i], angle, anchor || this[0], axis);\n    }\n\n    return this;\n  }\n\n  shear2D(scale, anchor, axis) {\n    for (let i = 0, len = this.length; i < len; i++) {\n      Geom.shear2D(this[i], scale, anchor || this[0], axis);\n    }\n\n    return this;\n  }\n\n  reflect2D(line, axis) {\n    for (let i = 0, len = this.length; i < len; i++) {\n      Geom.reflect2D(this[i], line, axis);\n    }\n\n    return this;\n  }\n\n  sortByDimension(dim, desc = false) {\n    return this.sort((a, b) => desc ? b[dim] - a[dim] : a[dim] - b[dim]);\n  }\n\n  forEachPt(ptFn, ...args) {\n    if (!this[0][ptFn]) {\n      Util.warn(`${ptFn} is not a function of Pt`);\n      return this;\n    }\n\n    for (let i = 0, len = this.length; i < len; i++) {\n      this[i] = this[i][ptFn](...args);\n    }\n\n    return this;\n  }\n\n  add(...args) {\n    return this.forEachPt(\"add\", ...args);\n  }\n\n  subtract(...args) {\n    return this.forEachPt(\"subtract\", ...args);\n  }\n\n  multiply(...args) {\n    return this.forEachPt(\"multiply\", ...args);\n  }\n\n  divide(...args) {\n    return this.forEachPt(\"divide\", ...args);\n  }\n\n  $matrixAdd(g) {\n    return Mat.add(this, g);\n  }\n\n  $matrixMultiply(g, transposed = false, elementwise = false) {\n    return Mat.multiply(this, g, transposed, elementwise);\n  }\n\n  zipSlice(index, defaultValue = false) {\n    return Mat.zipSlice(this, index, defaultValue);\n  }\n\n  $zip(defaultValue = undefined, useLongest = false) {\n    return Mat.zip(this, defaultValue, useLongest);\n  }\n\n  toString() {\n    return \"Group[ \" + this.reduce((p, c) => p + c.toString() + \" \", \"\") + \" ]\";\n  }\n\n}\nexport class Bound extends Group {\n  constructor(...args) {\n    super(...args);\n    this._center = new Pt();\n    this._size = new Pt();\n    this._topLeft = new Pt();\n    this._bottomRight = new Pt();\n    this._inited = false;\n    this.init();\n  }\n\n  static fromBoundingRect(rect) {\n    let b = new Bound(new Pt(rect.left || 0, rect.top || 0), new Pt(rect.right || 0, rect.bottom || 0));\n    if (rect.width && rect.height) b.size = new Pt(rect.width, rect.height);\n    return b;\n  }\n\n  static fromGroup(g) {\n    if (g.length < 2) throw new Error(\"Cannot create a Bound from a group that has less than 2 Pt\");\n    return new Bound(g[0], g[g.length - 1]);\n  }\n\n  init() {\n    if (this.p1) {\n      this._size = this.p1.clone();\n      this._inited = true;\n    }\n\n    if (this.p1 && this.p2) {\n      let a = this.p1;\n      let b = this.p2;\n      this.topLeft = a.$min(b);\n      this._bottomRight = a.$max(b);\n\n      this._updateSize();\n\n      this._inited = true;\n    }\n  }\n\n  clone() {\n    return new Bound(this._topLeft.clone(), this._bottomRight.clone());\n  }\n\n  _updateSize() {\n    this._size = this._bottomRight.$subtract(this._topLeft).abs();\n\n    this._updateCenter();\n  }\n\n  _updateCenter() {\n    this._center = this._size.$multiply(0.5).add(this._topLeft);\n  }\n\n  _updatePosFromTop() {\n    this._bottomRight = this._topLeft.$add(this._size);\n\n    this._updateCenter();\n  }\n\n  _updatePosFromBottom() {\n    this._topLeft = this._bottomRight.$subtract(this._size);\n\n    this._updateCenter();\n  }\n\n  _updatePosFromCenter() {\n    let half = this._size.$multiply(0.5);\n\n    this._topLeft = this._center.$subtract(half);\n    this._bottomRight = this._center.$add(half);\n  }\n\n  get size() {\n    return new Pt(this._size);\n  }\n\n  set size(p) {\n    this._size = new Pt(p);\n\n    this._updatePosFromTop();\n  }\n\n  get center() {\n    return new Pt(this._center);\n  }\n\n  set center(p) {\n    this._center = new Pt(p);\n\n    this._updatePosFromCenter();\n  }\n\n  get topLeft() {\n    return new Pt(this._topLeft);\n  }\n\n  set topLeft(p) {\n    this._topLeft = new Pt(p);\n    this[0] = this._topLeft;\n\n    this._updateSize();\n  }\n\n  get bottomRight() {\n    return new Pt(this._bottomRight);\n  }\n\n  set bottomRight(p) {\n    this._bottomRight = new Pt(p);\n    this[1] = this._bottomRight;\n\n    this._updateSize();\n  }\n\n  get width() {\n    return this._size.length > 0 ? this._size.x : 0;\n  }\n\n  set width(w) {\n    this._size.x = w;\n\n    this._updatePosFromTop();\n  }\n\n  get height() {\n    return this._size.length > 1 ? this._size.y : 0;\n  }\n\n  set height(h) {\n    this._size.y = h;\n\n    this._updatePosFromTop();\n  }\n\n  get depth() {\n    return this._size.length > 2 ? this._size.z : 0;\n  }\n\n  set depth(d) {\n    this._size.z = d;\n\n    this._updatePosFromTop();\n  }\n\n  get x() {\n    return this.topLeft.x;\n  }\n\n  get y() {\n    return this.topLeft.y;\n  }\n\n  get z() {\n    return this.topLeft.z;\n  }\n\n  get inited() {\n    return this._inited;\n  }\n\n  update() {\n    this._topLeft = this[0];\n    this._bottomRight = this[1];\n\n    this._updateSize();\n\n    return this;\n  }\n\n}","map":{"version":3,"sources":["/Users/erickoduniyi/Desktop/affective_chaos_control/Emulators/wind-field/node_modules/pts/dist/es2015/Pt.js"],"names":["Util","Const","Geom","Num","Vec","Mat","Pt","Float32Array","constructor","args","length","getArgs","make","dimensions","defaultValue","randomize","p","fill","i","len","Math","random","id","_id","s","x","n","y","z","w","clone","equals","threshold","abs","to","min","$to","toAngle","radian","magnitude","anchorFromPt","m","undefined","change","cos","sin","add","op","fn","self","params","ops","fns","_ops","push","$take","axis","$concat","toArray","concat","$add","subtract","$subtract","multiply","$multiply","divide","$divide","magnitudeSq","dot","unit","$unit","$cross2D","cross2D","$cross","cross","$project","projectScalar","$abs","floor","$floor","ceil","$ceil","round","$round","minValue","maxValue","max","$min","$max","angle","xy","atan2","angleBetween","boundRadian","scale","anchor","rotate2D","shear2D","reflect2D","line","toString","join","slice","call","Group","Array","p1","p2","p3","p4","q1","q2","q3","q4","group","fromArray","list","g","fromPtArray","from","split","chunkSize","stride","loopBack","sp","insert","pts","index","prototype","splice","apply","remove","count","param","segments","pts_per_segment","lines","centroid","boundingBox","anchorTo","ptOrIndex","anchorFrom","interpolate","t","clamp","chunk","tc","idx","moveBy","moveTo","d","sortByDimension","dim","desc","sort","a","b","forEachPt","ptFn","warn","$matrixAdd","$matrixMultiply","transposed","elementwise","zipSlice","$zip","useLongest","zip","reduce","c","Bound","_center","_size","_topLeft","_bottomRight","_inited","init","fromBoundingRect","rect","left","top","right","bottom","width","height","size","fromGroup","Error","topLeft","_updateSize","_updateCenter","_updatePosFromTop","_updatePosFromBottom","_updatePosFromCenter","half","center","bottomRight","h","depth","inited","update"],"mappings":"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","sourcesContent":["/*! Source code licensed under Apache License 2.0. Copyright Â© 2017-current William Ngan and contributors. (https://github.com/williamngan/pts) */\nimport { Util, Const } from \"./Util\";\nimport { Geom, Num } from \"./Num\";\nimport { Vec, Mat } from \"./LinearAlgebra\";\nexport class Pt extends Float32Array {\n    constructor(...args) {\n        if (args.length === 1 && typeof args[0] == \"number\") {\n            super(args[0]);\n        }\n        else {\n            super((args.length > 0) ? Util.getArgs(args) : [0, 0]);\n        }\n    }\n    static make(dimensions, defaultValue = 0, randomize = false) {\n        let p = new Float32Array(dimensions);\n        if (defaultValue)\n            p.fill(defaultValue);\n        if (randomize) {\n            for (let i = 0, len = p.length; i < len; i++) {\n                p[i] = p[i] * Math.random();\n            }\n        }\n        return new Pt(p);\n    }\n    get id() { return this._id; }\n    set id(s) { this._id = s; }\n    get x() { return this[0]; }\n    set x(n) { this[0] = n; }\n    get y() { return this[1]; }\n    set y(n) { this[1] = n; }\n    get z() { return this[2]; }\n    set z(n) { this[2] = n; }\n    get w() { return this[3]; }\n    set w(n) { this[3] = n; }\n    clone() {\n        return new Pt(this);\n    }\n    equals(p, threshold = 0.000001) {\n        for (let i = 0, len = this.length; i < len; i++) {\n            if (Math.abs(this[i] - p[i]) > threshold)\n                return false;\n        }\n        return true;\n    }\n    to(...args) {\n        let p = Util.getArgs(args);\n        for (let i = 0, len = Math.min(this.length, p.length); i < len; i++) {\n            this[i] = p[i];\n        }\n        return this;\n    }\n    $to(...args) {\n        return this.clone().to(...args);\n    }\n    toAngle(radian, magnitude, anchorFromPt = false) {\n        let m = (magnitude != undefined) ? magnitude : this.magnitude();\n        let change = [Math.cos(radian) * m, Math.sin(radian) * m];\n        return (anchorFromPt) ? this.add(change) : this.to(change);\n    }\n    op(fn) {\n        let self = this;\n        return (...params) => {\n            return fn(self, ...params);\n        };\n    }\n    ops(fns) {\n        let _ops = [];\n        for (let i = 0, len = fns.length; i < len; i++) {\n            _ops.push(this.op(fns[i]));\n        }\n        return _ops;\n    }\n    $take(axis) {\n        let p = [];\n        for (let i = 0, len = axis.length; i < len; i++) {\n            p.push(this[axis[i]] || 0);\n        }\n        return new Pt(p);\n    }\n    $concat(...args) {\n        return new Pt(this.toArray().concat(Util.getArgs(args)));\n    }\n    add(...args) {\n        (args.length === 1 && typeof args[0] == \"number\") ? Vec.add(this, args[0]) : Vec.add(this, Util.getArgs(args));\n        return this;\n    }\n    $add(...args) { return this.clone().add(...args); }\n    subtract(...args) {\n        (args.length === 1 && typeof args[0] == \"number\") ? Vec.subtract(this, args[0]) : Vec.subtract(this, Util.getArgs(args));\n        return this;\n    }\n    $subtract(...args) { return this.clone().subtract(...args); }\n    multiply(...args) {\n        (args.length === 1 && typeof args[0] == \"number\") ? Vec.multiply(this, args[0]) : Vec.multiply(this, Util.getArgs(args));\n        return this;\n    }\n    $multiply(...args) { return this.clone().multiply(...args); }\n    divide(...args) {\n        (args.length === 1 && typeof args[0] == \"number\") ? Vec.divide(this, args[0]) : Vec.divide(this, Util.getArgs(args));\n        return this;\n    }\n    $divide(...args) { return this.clone().divide(...args); }\n    magnitudeSq() { return Vec.dot(this, this); }\n    magnitude() { return Vec.magnitude(this); }\n    unit(magnitude = undefined) {\n        Vec.unit(this, magnitude);\n        return this;\n    }\n    $unit(magnitude = undefined) { return this.clone().unit(magnitude); }\n    dot(...args) { return Vec.dot(this, Util.getArgs(args)); }\n    $cross2D(...args) { return Vec.cross2D(this, Util.getArgs(args)); }\n    $cross(...args) { return Vec.cross(this, Util.getArgs(args)); }\n    $project(...args) {\n        return this.$multiply(this.dot(...args) / this.magnitudeSq());\n    }\n    projectScalar(...args) {\n        return this.dot(...args) / this.magnitude();\n    }\n    abs() {\n        Vec.abs(this);\n        return this;\n    }\n    $abs() {\n        return this.clone().abs();\n    }\n    floor() {\n        Vec.floor(this);\n        return this;\n    }\n    $floor() {\n        return this.clone().floor();\n    }\n    ceil() {\n        Vec.ceil(this);\n        return this;\n    }\n    $ceil() {\n        return this.clone().ceil();\n    }\n    round() {\n        Vec.round(this);\n        return this;\n    }\n    $round() {\n        return this.clone().round();\n    }\n    minValue() {\n        return Vec.min(this);\n    }\n    maxValue() {\n        return Vec.max(this);\n    }\n    $min(...args) {\n        let p = Util.getArgs(args);\n        let m = this.clone();\n        for (let i = 0, len = Math.min(this.length, p.length); i < len; i++) {\n            m[i] = Math.min(this[i], p[i]);\n        }\n        return m;\n    }\n    $max(...args) {\n        let p = Util.getArgs(args);\n        let m = this.clone();\n        for (let i = 0, len = Math.min(this.length, p.length); i < len; i++) {\n            m[i] = Math.max(this[i], p[i]);\n        }\n        return m;\n    }\n    angle(axis = Const.xy) {\n        return Math.atan2(this[axis[1]], this[axis[0]]);\n    }\n    angleBetween(p, axis = Const.xy) {\n        return Geom.boundRadian(this.angle(axis)) - Geom.boundRadian(p.angle(axis));\n    }\n    scale(scale, anchor) {\n        Geom.scale(this, scale, anchor || Pt.make(this.length, 0));\n        return this;\n    }\n    rotate2D(angle, anchor, axis) {\n        Geom.rotate2D(this, angle, anchor || Pt.make(this.length, 0), axis);\n        return this;\n    }\n    shear2D(scale, anchor, axis) {\n        Geom.shear2D(this, scale, anchor || Pt.make(this.length, 0), axis);\n        return this;\n    }\n    reflect2D(line, axis) {\n        Geom.reflect2D(this, line, axis);\n        return this;\n    }\n    toString() {\n        return `Pt(${this.join(\", \")})`;\n    }\n    toArray() {\n        return [].slice.call(this);\n    }\n}\nexport class Group extends Array {\n    constructor(...args) {\n        super(...args);\n    }\n    get id() { return this._id; }\n    set id(s) { this._id = s; }\n    get p1() { return this[0]; }\n    get p2() { return this[1]; }\n    get p3() { return this[2]; }\n    get p4() { return this[3]; }\n    get q1() { return this[this.length - 1]; }\n    get q2() { return this[this.length - 2]; }\n    get q3() { return this[this.length - 3]; }\n    get q4() { return this[this.length - 4]; }\n    clone() {\n        let group = new Group();\n        for (let i = 0, len = this.length; i < len; i++) {\n            group.push(this[i].clone());\n        }\n        return group;\n    }\n    static fromArray(list) {\n        let g = new Group();\n        for (let i = 0, len = list.length; i < len; i++) {\n            let p = (list[i] instanceof Pt) ? list[i] : new Pt(list[i]);\n            g.push(p);\n        }\n        return g;\n    }\n    static fromPtArray(list) {\n        return Group.from(list);\n    }\n    split(chunkSize, stride, loopBack = false) {\n        let sp = Util.split(this, chunkSize, stride, loopBack);\n        return sp;\n    }\n    insert(pts, index = 0) {\n        Group.prototype.splice.apply(this, [index, 0, ...pts]);\n        return this;\n    }\n    remove(index = 0, count = 1) {\n        let param = (index < 0) ? [index * -1 - 1, count] : [index, count];\n        return Group.prototype.splice.apply(this, param);\n    }\n    segments(pts_per_segment = 2, stride = 1, loopBack = false) {\n        return this.split(pts_per_segment, stride, loopBack);\n    }\n    lines() { return this.segments(2, 1); }\n    centroid() {\n        return Geom.centroid(this);\n    }\n    boundingBox() {\n        return Geom.boundingBox(this);\n    }\n    anchorTo(ptOrIndex = 0) { Geom.anchor(this, ptOrIndex, \"to\"); }\n    anchorFrom(ptOrIndex = 0) { Geom.anchor(this, ptOrIndex, \"from\"); }\n    op(fn) {\n        let self = this;\n        return (...params) => {\n            return fn(self, ...params);\n        };\n    }\n    ops(fns) {\n        let _ops = [];\n        for (let i = 0, len = fns.length; i < len; i++) {\n            _ops.push(this.op(fns[i]));\n        }\n        return _ops;\n    }\n    interpolate(t) {\n        t = Num.clamp(t, 0, 1);\n        let chunk = this.length - 1;\n        let tc = 1 / (this.length - 1);\n        let idx = Math.floor(t / tc);\n        return Geom.interpolate(this[idx], this[Math.min(this.length - 1, idx + 1)], (t - idx * tc) * chunk);\n    }\n    moveBy(...args) {\n        return this.add(...args);\n    }\n    moveTo(...args) {\n        let d = new Pt(Util.getArgs(args)).subtract(this[0]);\n        this.moveBy(d);\n        return this;\n    }\n    scale(scale, anchor) {\n        for (let i = 0, len = this.length; i < len; i++) {\n            Geom.scale(this[i], scale, anchor || this[0]);\n        }\n        return this;\n    }\n    rotate2D(angle, anchor, axis) {\n        for (let i = 0, len = this.length; i < len; i++) {\n            Geom.rotate2D(this[i], angle, anchor || this[0], axis);\n        }\n        return this;\n    }\n    shear2D(scale, anchor, axis) {\n        for (let i = 0, len = this.length; i < len; i++) {\n            Geom.shear2D(this[i], scale, anchor || this[0], axis);\n        }\n        return this;\n    }\n    reflect2D(line, axis) {\n        for (let i = 0, len = this.length; i < len; i++) {\n            Geom.reflect2D(this[i], line, axis);\n        }\n        return this;\n    }\n    sortByDimension(dim, desc = false) {\n        return this.sort((a, b) => (desc) ? b[dim] - a[dim] : a[dim] - b[dim]);\n    }\n    forEachPt(ptFn, ...args) {\n        if (!this[0][ptFn]) {\n            Util.warn(`${ptFn} is not a function of Pt`);\n            return this;\n        }\n        for (let i = 0, len = this.length; i < len; i++) {\n            this[i] = this[i][ptFn](...args);\n        }\n        return this;\n    }\n    add(...args) {\n        return this.forEachPt(\"add\", ...args);\n    }\n    subtract(...args) {\n        return this.forEachPt(\"subtract\", ...args);\n    }\n    multiply(...args) {\n        return this.forEachPt(\"multiply\", ...args);\n    }\n    divide(...args) {\n        return this.forEachPt(\"divide\", ...args);\n    }\n    $matrixAdd(g) {\n        return Mat.add(this, g);\n    }\n    $matrixMultiply(g, transposed = false, elementwise = false) {\n        return Mat.multiply(this, g, transposed, elementwise);\n    }\n    zipSlice(index, defaultValue = false) {\n        return Mat.zipSlice(this, index, defaultValue);\n    }\n    $zip(defaultValue = undefined, useLongest = false) {\n        return Mat.zip(this, defaultValue, useLongest);\n    }\n    toString() {\n        return \"Group[ \" + this.reduce((p, c) => p + c.toString() + \" \", \"\") + \" ]\";\n    }\n}\nexport class Bound extends Group {\n    constructor(...args) {\n        super(...args);\n        this._center = new Pt();\n        this._size = new Pt();\n        this._topLeft = new Pt();\n        this._bottomRight = new Pt();\n        this._inited = false;\n        this.init();\n    }\n    static fromBoundingRect(rect) {\n        let b = new Bound(new Pt(rect.left || 0, rect.top || 0), new Pt(rect.right || 0, rect.bottom || 0));\n        if (rect.width && rect.height)\n            b.size = new Pt(rect.width, rect.height);\n        return b;\n    }\n    static fromGroup(g) {\n        if (g.length < 2)\n            throw new Error(\"Cannot create a Bound from a group that has less than 2 Pt\");\n        return new Bound(g[0], g[g.length - 1]);\n    }\n    init() {\n        if (this.p1) {\n            this._size = this.p1.clone();\n            this._inited = true;\n        }\n        if (this.p1 && this.p2) {\n            let a = this.p1;\n            let b = this.p2;\n            this.topLeft = a.$min(b);\n            this._bottomRight = a.$max(b);\n            this._updateSize();\n            this._inited = true;\n        }\n    }\n    clone() {\n        return new Bound(this._topLeft.clone(), this._bottomRight.clone());\n    }\n    _updateSize() {\n        this._size = this._bottomRight.$subtract(this._topLeft).abs();\n        this._updateCenter();\n    }\n    _updateCenter() {\n        this._center = this._size.$multiply(0.5).add(this._topLeft);\n    }\n    _updatePosFromTop() {\n        this._bottomRight = this._topLeft.$add(this._size);\n        this._updateCenter();\n    }\n    _updatePosFromBottom() {\n        this._topLeft = this._bottomRight.$subtract(this._size);\n        this._updateCenter();\n    }\n    _updatePosFromCenter() {\n        let half = this._size.$multiply(0.5);\n        this._topLeft = this._center.$subtract(half);\n        this._bottomRight = this._center.$add(half);\n    }\n    get size() { return new Pt(this._size); }\n    set size(p) {\n        this._size = new Pt(p);\n        this._updatePosFromTop();\n    }\n    get center() { return new Pt(this._center); }\n    set center(p) {\n        this._center = new Pt(p);\n        this._updatePosFromCenter();\n    }\n    get topLeft() { return new Pt(this._topLeft); }\n    set topLeft(p) {\n        this._topLeft = new Pt(p);\n        this[0] = this._topLeft;\n        this._updateSize();\n    }\n    get bottomRight() { return new Pt(this._bottomRight); }\n    set bottomRight(p) {\n        this._bottomRight = new Pt(p);\n        this[1] = this._bottomRight;\n        this._updateSize();\n    }\n    get width() { return (this._size.length > 0) ? this._size.x : 0; }\n    set width(w) {\n        this._size.x = w;\n        this._updatePosFromTop();\n    }\n    get height() { return (this._size.length > 1) ? this._size.y : 0; }\n    set height(h) {\n        this._size.y = h;\n        this._updatePosFromTop();\n    }\n    get depth() { return (this._size.length > 2) ? this._size.z : 0; }\n    set depth(d) {\n        this._size.z = d;\n        this._updatePosFromTop();\n    }\n    get x() { return this.topLeft.x; }\n    get y() { return this.topLeft.y; }\n    get z() { return this.topLeft.z; }\n    get inited() { return this._inited; }\n    update() {\n        this._topLeft = this[0];\n        this._bottomRight = this[1];\n        this._updateSize();\n        return this;\n    }\n}\n//# sourceMappingURL=Pt.js.map"]},"metadata":{},"sourceType":"module"}