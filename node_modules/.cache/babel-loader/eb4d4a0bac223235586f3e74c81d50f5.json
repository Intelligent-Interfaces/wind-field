{"ast":null,"code":"import * as tslib_1 from \"tslib\";\nimport { OfflineContext } from \"../../core/context/OfflineContext\";\n/**\n * Render a segment of the oscillator to an offline context and return the results as an array\n */\n\nexport function generateWaveform(instance, length) {\n  return tslib_1.__awaiter(this, void 0, void 0, function () {\n    var duration, context, clone, buffer;\n    return tslib_1.__generator(this, function (_a) {\n      switch (_a.label) {\n        case 0:\n          duration = length / instance.context.sampleRate;\n          context = new OfflineContext(1, duration, instance.context.sampleRate);\n          clone = new instance.constructor(Object.assign(instance.get(), {\n            // should do 2 iterations\n            frequency: 2 / duration,\n            // zero out the detune\n            detune: 0,\n            context: context\n          })).toDestination();\n          clone.start(0);\n          return [4\n          /*yield*/\n          , context.render()];\n\n        case 1:\n          buffer = _a.sent();\n          return [2\n          /*return*/\n          , buffer.getChannelData(0)];\n      }\n    });\n  });\n}","map":{"version":3,"sources":["../../../../Tone/source/oscillator/OscillatorInterface.ts"],"names":[],"mappings":";AAIA,SAAS,cAAT,QAA+B,mCAA/B;AA4FA;;;;AAGA,OAAM,SAAgB,gBAAhB,CAAiC,QAAjC,EAAgD,MAAhD,EAA8D;;;;;;AAC7D,UAAA,QAAQ,GAAG,MAAM,GAAG,QAAQ,CAAC,OAAT,CAAiB,UAArC;AACA,UAAA,OAAO,GAAG,IAAI,cAAJ,CAAmB,CAAnB,EAAsB,QAAtB,EAAgC,QAAQ,CAAC,OAAT,CAAiB,UAAjD,CAAV;AACA,UAAA,KAAK,GAAG,IAAI,QAAQ,CAAC,WAAb,CAAyB,MAAM,CAAC,MAAP,CAAc,QAAQ,CAAC,GAAT,EAAd,EAA8B;AACpE;AACA,YAAA,SAAS,EAAE,IAAI,QAFqD;AAGpE;AACA,YAAA,MAAM,EAAE,CAJ4D;AAKpE,YAAA,OAAO,EAAA;AAL6D,WAA9B,CAAzB,EAMV,aANU,EAAR;AAON,UAAA,KAAK,CAAC,KAAN,CAAY,CAAZ;AACe,iBAAA,CAAA;AAAA;AAAA,YAAM,OAAO,CAAC,MAAR,EAAN,CAAA;;;AAAT,UAAA,MAAM,GAAG,EAAA,CAAA,IAAA,EAAT;AACN,iBAAA,CAAA;AAAA;AAAA,YAAO,MAAM,CAAC,cAAP,CAAsB,CAAtB,CAAP,CAAA;;;;AACA","sourceRoot":"","sourcesContent":["import * as tslib_1 from \"tslib\";\nimport { OfflineContext } from \"../../core/context/OfflineContext\";\n/**\n * Render a segment of the oscillator to an offline context and return the results as an array\n */\nexport function generateWaveform(instance, length) {\n    return tslib_1.__awaiter(this, void 0, void 0, function () {\n        var duration, context, clone, buffer;\n        return tslib_1.__generator(this, function (_a) {\n            switch (_a.label) {\n                case 0:\n                    duration = length / instance.context.sampleRate;\n                    context = new OfflineContext(1, duration, instance.context.sampleRate);\n                    clone = new instance.constructor(Object.assign(instance.get(), {\n                        // should do 2 iterations\n                        frequency: 2 / duration,\n                        // zero out the detune\n                        detune: 0,\n                        context: context\n                    })).toDestination();\n                    clone.start(0);\n                    return [4 /*yield*/, context.render()];\n                case 1:\n                    buffer = _a.sent();\n                    return [2 /*return*/, buffer.getChannelData(0)];\n            }\n        });\n    });\n}\n//# sourceMappingURL=OscillatorInterface.js.map"]},"metadata":{},"sourceType":"module"}