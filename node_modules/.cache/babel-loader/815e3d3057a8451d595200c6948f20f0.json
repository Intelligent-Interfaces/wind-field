{"ast":null,"code":"import * as tslib_1 from \"tslib\";\nimport { optionsFromArguments } from \"../../core/util/Defaults\";\nimport { noOp, readOnly } from \"../../core/util/Interface\";\nimport { Signal } from \"../../signal/Signal\";\nimport { Source } from \"../Source\";\nimport { Oscillator } from \"./Oscillator\";\nimport { generateWaveform } from \"./OscillatorInterface\";\nimport { assertRange } from \"../../core/util/Debug\";\n/**\n * FatOscillator is an array of oscillators with detune spread between the oscillators\n * @example\n * import { FatOscillator } from \"tone\";\n * const fatOsc = new FatOscillator(\"Ab3\", \"sawtooth\", 40).toDestination().start();\n * @category Source\n */\n\nvar FatOscillator =\n/** @class */\nfunction (_super) {\n  tslib_1.__extends(FatOscillator, _super);\n\n  function FatOscillator() {\n    var _this = _super.call(this, optionsFromArguments(FatOscillator.getDefaults(), arguments, [\"frequency\", \"type\", \"spread\"])) || this;\n\n    _this.name = \"FatOscillator\";\n    /**\n     * The array of oscillators\n     */\n\n    _this._oscillators = [];\n    var options = optionsFromArguments(FatOscillator.getDefaults(), arguments, [\"frequency\", \"type\", \"spread\"]);\n    _this.frequency = new Signal({\n      context: _this.context,\n      units: \"frequency\",\n      value: options.frequency\n    });\n    _this.detune = new Signal({\n      context: _this.context,\n      units: \"cents\",\n      value: options.detune\n    });\n    _this._spread = options.spread;\n    _this._type = options.type;\n    _this._phase = options.phase;\n    _this._partials = options.partials;\n    _this._partialCount = options.partialCount; // set the count initially\n\n    _this.count = options.count;\n    readOnly(_this, [\"frequency\", \"detune\"]);\n    return _this;\n  }\n\n  FatOscillator.getDefaults = function () {\n    return Object.assign(Oscillator.getDefaults(), {\n      count: 3,\n      spread: 20,\n      type: \"sawtooth\"\n    });\n  };\n  /**\n   * start the oscillator\n   */\n\n\n  FatOscillator.prototype._start = function (time) {\n    time = this.toSeconds(time);\n\n    this._forEach(function (osc) {\n      return osc.start(time);\n    });\n  };\n  /**\n   * stop the oscillator\n   */\n\n\n  FatOscillator.prototype._stop = function (time) {\n    time = this.toSeconds(time);\n\n    this._forEach(function (osc) {\n      return osc.stop(time);\n    });\n  };\n\n  FatOscillator.prototype._restart = function (time) {\n    this._forEach(function (osc) {\n      return osc.restart(time);\n    });\n  };\n  /**\n   * Iterate over all of the oscillators\n   */\n\n\n  FatOscillator.prototype._forEach = function (iterator) {\n    for (var i = 0; i < this._oscillators.length; i++) {\n      iterator(this._oscillators[i], i);\n    }\n  };\n\n  Object.defineProperty(FatOscillator.prototype, \"type\", {\n    /**\n     * The type of the oscillator\n     */\n    get: function () {\n      return this._type;\n    },\n    set: function (type) {\n      this._type = type;\n\n      this._forEach(function (osc) {\n        return osc.type = type;\n      });\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(FatOscillator.prototype, \"spread\", {\n    /**\n     * The detune spread between the oscillators. If \"count\" is\n     * set to 3 oscillators and the \"spread\" is set to 40,\n     * the three oscillators would be detuned like this: [-20, 0, 20]\n     * for a total detune spread of 40 cents.\n     * @example\n     * import { FatOscillator } from \"tone\";\n     * const fatOsc = new FatOscillator().toDestination().start();\n     * fatOsc.spread = 70;\n     */\n    get: function () {\n      return this._spread;\n    },\n    set: function (spread) {\n      this._spread = spread;\n\n      if (this._oscillators.length > 1) {\n        var start_1 = -spread / 2;\n        var step_1 = spread / (this._oscillators.length - 1);\n\n        this._forEach(function (osc, i) {\n          return osc.detune.value = start_1 + step_1 * i;\n        });\n      }\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(FatOscillator.prototype, \"count\", {\n    /**\n     * The number of detuned oscillators. Must be an integer greater than 1.\n     * @example\n     * import { FatOscillator } from \"tone\";\n     * const fatOsc = new FatOscillator(\"C#3\", \"sawtooth\").toDestination().start();\n     * // use 4 sawtooth oscillators\n     * fatOsc.count = 4;\n     */\n    get: function () {\n      return this._oscillators.length;\n    },\n    set: function (count) {\n      var _this = this;\n\n      assertRange(count, 1);\n\n      if (this._oscillators.length !== count) {\n        // dispose the previous oscillators\n        this._forEach(function (osc) {\n          return osc.dispose();\n        });\n\n        this._oscillators = [];\n\n        for (var i = 0; i < count; i++) {\n          var osc = new Oscillator({\n            context: this.context,\n            volume: -6 - count * 1.1,\n            type: this._type,\n            phase: this._phase + i / count * 360,\n            partialCount: this._partialCount,\n            onstop: i === 0 ? function () {\n              return _this.onstop(_this);\n            } : noOp\n          });\n\n          if (this.type === \"custom\") {\n            osc.partials = this._partials;\n          }\n\n          this.frequency.connect(osc.frequency);\n          this.detune.connect(osc.detune);\n          osc.detune.overridden = false;\n          osc.connect(this.output);\n          this._oscillators[i] = osc;\n        } // set the spread\n\n\n        this.spread = this._spread;\n\n        if (this.state === \"started\") {\n          this._forEach(function (osc) {\n            return osc.start();\n          });\n        }\n      }\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(FatOscillator.prototype, \"phase\", {\n    get: function () {\n      return this._phase;\n    },\n    set: function (phase) {\n      this._phase = phase;\n\n      this._forEach(function (osc) {\n        return osc.phase = phase;\n      });\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(FatOscillator.prototype, \"baseType\", {\n    get: function () {\n      return this._oscillators[0].baseType;\n    },\n    set: function (baseType) {\n      this._forEach(function (osc) {\n        return osc.baseType = baseType;\n      });\n\n      this._type = this._oscillators[0].type;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(FatOscillator.prototype, \"partials\", {\n    get: function () {\n      return this._oscillators[0].partials;\n    },\n    set: function (partials) {\n      this._partials = partials;\n      this._partialCount = this._partials.length;\n\n      if (partials.length) {\n        this._type = \"custom\";\n\n        this._forEach(function (osc) {\n          return osc.partials = partials;\n        });\n      }\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(FatOscillator.prototype, \"partialCount\", {\n    get: function () {\n      return this._oscillators[0].partialCount;\n    },\n    set: function (partialCount) {\n      this._partialCount = partialCount;\n\n      this._forEach(function (osc) {\n        return osc.partialCount = partialCount;\n      });\n\n      this._type = this._oscillators[0].type;\n    },\n    enumerable: true,\n    configurable: true\n  });\n\n  FatOscillator.prototype.asArray = function (length) {\n    if (length === void 0) {\n      length = 1024;\n    }\n\n    return tslib_1.__awaiter(this, void 0, void 0, function () {\n      return tslib_1.__generator(this, function (_a) {\n        return [2\n        /*return*/\n        , generateWaveform(this, length)];\n      });\n    });\n  };\n  /**\n   * Clean up.\n   */\n\n\n  FatOscillator.prototype.dispose = function () {\n    _super.prototype.dispose.call(this);\n\n    this.frequency.dispose();\n    this.detune.dispose();\n\n    this._forEach(function (osc) {\n      return osc.dispose();\n    });\n\n    return this;\n  };\n\n  return FatOscillator;\n}(Source);\n\nexport { FatOscillator };","map":{"version":3,"sources":["../../../../Tone/source/oscillator/FatOscillator.ts"],"names":[],"mappings":"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","sourceRoot":"","sourcesContent":["import * as tslib_1 from \"tslib\";\nimport { optionsFromArguments } from \"../../core/util/Defaults\";\nimport { noOp, readOnly } from \"../../core/util/Interface\";\nimport { Signal } from \"../../signal/Signal\";\nimport { Source } from \"../Source\";\nimport { Oscillator } from \"./Oscillator\";\nimport { generateWaveform } from \"./OscillatorInterface\";\nimport { assertRange } from \"../../core/util/Debug\";\n/**\n * FatOscillator is an array of oscillators with detune spread between the oscillators\n * @example\n * import { FatOscillator } from \"tone\";\n * const fatOsc = new FatOscillator(\"Ab3\", \"sawtooth\", 40).toDestination().start();\n * @category Source\n */\nvar FatOscillator = /** @class */ (function (_super) {\n    tslib_1.__extends(FatOscillator, _super);\n    function FatOscillator() {\n        var _this = _super.call(this, optionsFromArguments(FatOscillator.getDefaults(), arguments, [\"frequency\", \"type\", \"spread\"])) || this;\n        _this.name = \"FatOscillator\";\n        /**\n         * The array of oscillators\n         */\n        _this._oscillators = [];\n        var options = optionsFromArguments(FatOscillator.getDefaults(), arguments, [\"frequency\", \"type\", \"spread\"]);\n        _this.frequency = new Signal({\n            context: _this.context,\n            units: \"frequency\",\n            value: options.frequency,\n        });\n        _this.detune = new Signal({\n            context: _this.context,\n            units: \"cents\",\n            value: options.detune,\n        });\n        _this._spread = options.spread;\n        _this._type = options.type;\n        _this._phase = options.phase;\n        _this._partials = options.partials;\n        _this._partialCount = options.partialCount;\n        // set the count initially\n        _this.count = options.count;\n        readOnly(_this, [\"frequency\", \"detune\"]);\n        return _this;\n    }\n    FatOscillator.getDefaults = function () {\n        return Object.assign(Oscillator.getDefaults(), {\n            count: 3,\n            spread: 20,\n            type: \"sawtooth\",\n        });\n    };\n    /**\n     * start the oscillator\n     */\n    FatOscillator.prototype._start = function (time) {\n        time = this.toSeconds(time);\n        this._forEach(function (osc) { return osc.start(time); });\n    };\n    /**\n     * stop the oscillator\n     */\n    FatOscillator.prototype._stop = function (time) {\n        time = this.toSeconds(time);\n        this._forEach(function (osc) { return osc.stop(time); });\n    };\n    FatOscillator.prototype._restart = function (time) {\n        this._forEach(function (osc) { return osc.restart(time); });\n    };\n    /**\n     * Iterate over all of the oscillators\n     */\n    FatOscillator.prototype._forEach = function (iterator) {\n        for (var i = 0; i < this._oscillators.length; i++) {\n            iterator(this._oscillators[i], i);\n        }\n    };\n    Object.defineProperty(FatOscillator.prototype, \"type\", {\n        /**\n         * The type of the oscillator\n         */\n        get: function () {\n            return this._type;\n        },\n        set: function (type) {\n            this._type = type;\n            this._forEach(function (osc) { return osc.type = type; });\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(FatOscillator.prototype, \"spread\", {\n        /**\n         * The detune spread between the oscillators. If \"count\" is\n         * set to 3 oscillators and the \"spread\" is set to 40,\n         * the three oscillators would be detuned like this: [-20, 0, 20]\n         * for a total detune spread of 40 cents.\n         * @example\n         * import { FatOscillator } from \"tone\";\n         * const fatOsc = new FatOscillator().toDestination().start();\n         * fatOsc.spread = 70;\n         */\n        get: function () {\n            return this._spread;\n        },\n        set: function (spread) {\n            this._spread = spread;\n            if (this._oscillators.length > 1) {\n                var start_1 = -spread / 2;\n                var step_1 = spread / (this._oscillators.length - 1);\n                this._forEach(function (osc, i) { return osc.detune.value = start_1 + step_1 * i; });\n            }\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(FatOscillator.prototype, \"count\", {\n        /**\n         * The number of detuned oscillators. Must be an integer greater than 1.\n         * @example\n         * import { FatOscillator } from \"tone\";\n         * const fatOsc = new FatOscillator(\"C#3\", \"sawtooth\").toDestination().start();\n         * // use 4 sawtooth oscillators\n         * fatOsc.count = 4;\n         */\n        get: function () {\n            return this._oscillators.length;\n        },\n        set: function (count) {\n            var _this = this;\n            assertRange(count, 1);\n            if (this._oscillators.length !== count) {\n                // dispose the previous oscillators\n                this._forEach(function (osc) { return osc.dispose(); });\n                this._oscillators = [];\n                for (var i = 0; i < count; i++) {\n                    var osc = new Oscillator({\n                        context: this.context,\n                        volume: -6 - count * 1.1,\n                        type: this._type,\n                        phase: this._phase + (i / count) * 360,\n                        partialCount: this._partialCount,\n                        onstop: i === 0 ? function () { return _this.onstop(_this); } : noOp,\n                    });\n                    if (this.type === \"custom\") {\n                        osc.partials = this._partials;\n                    }\n                    this.frequency.connect(osc.frequency);\n                    this.detune.connect(osc.detune);\n                    osc.detune.overridden = false;\n                    osc.connect(this.output);\n                    this._oscillators[i] = osc;\n                }\n                // set the spread\n                this.spread = this._spread;\n                if (this.state === \"started\") {\n                    this._forEach(function (osc) { return osc.start(); });\n                }\n            }\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(FatOscillator.prototype, \"phase\", {\n        get: function () {\n            return this._phase;\n        },\n        set: function (phase) {\n            this._phase = phase;\n            this._forEach(function (osc) { return osc.phase = phase; });\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(FatOscillator.prototype, \"baseType\", {\n        get: function () {\n            return this._oscillators[0].baseType;\n        },\n        set: function (baseType) {\n            this._forEach(function (osc) { return osc.baseType = baseType; });\n            this._type = this._oscillators[0].type;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(FatOscillator.prototype, \"partials\", {\n        get: function () {\n            return this._oscillators[0].partials;\n        },\n        set: function (partials) {\n            this._partials = partials;\n            this._partialCount = this._partials.length;\n            if (partials.length) {\n                this._type = \"custom\";\n                this._forEach(function (osc) { return osc.partials = partials; });\n            }\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(FatOscillator.prototype, \"partialCount\", {\n        get: function () {\n            return this._oscillators[0].partialCount;\n        },\n        set: function (partialCount) {\n            this._partialCount = partialCount;\n            this._forEach(function (osc) { return osc.partialCount = partialCount; });\n            this._type = this._oscillators[0].type;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    FatOscillator.prototype.asArray = function (length) {\n        if (length === void 0) { length = 1024; }\n        return tslib_1.__awaiter(this, void 0, void 0, function () {\n            return tslib_1.__generator(this, function (_a) {\n                return [2 /*return*/, generateWaveform(this, length)];\n            });\n        });\n    };\n    /**\n     * Clean up.\n     */\n    FatOscillator.prototype.dispose = function () {\n        _super.prototype.dispose.call(this);\n        this.frequency.dispose();\n        this.detune.dispose();\n        this._forEach(function (osc) { return osc.dispose(); });\n        return this;\n    };\n    return FatOscillator;\n}(Source));\nexport { FatOscillator };\n//# sourceMappingURL=FatOscillator.js.map"]},"metadata":{},"sourceType":"module"}