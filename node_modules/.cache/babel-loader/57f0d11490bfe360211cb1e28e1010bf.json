{"ast":null,"code":"import * as tslib_1 from \"tslib\";\nimport { readOnly } from \"../../core/util/Interface\";\nimport { ToneAudioNode } from \"../../core/context/ToneAudioNode\";\nimport { optionsFromArguments } from \"../../core/util/Defaults\";\nimport { Panner } from \"./Panner\";\nimport { Volume } from \"./Volume\";\n/**\n * PanVol is a Tone.Panner and Tone.Volume in one.\n * @example\n * import { Oscillator, PanVol } from \"tone\";\n * // pan the incoming signal left and drop the volume\n * const panVol = new PanVol(-0.25, -12).toDestination();\n * const osc = new Oscillator().connect(panVol).start();\n * @category Component\n */\n\nvar PanVol =\n/** @class */\nfunction (_super) {\n  tslib_1.__extends(PanVol, _super);\n\n  function PanVol() {\n    var _this = _super.call(this, optionsFromArguments(PanVol.getDefaults(), arguments, [\"pan\", \"volume\"])) || this;\n\n    _this.name = \"PanVol\";\n    var options = optionsFromArguments(PanVol.getDefaults(), arguments, [\"pan\", \"volume\"]);\n    _this._panner = _this.input = new Panner({\n      context: _this.context,\n      pan: options.pan\n    });\n    _this.pan = _this._panner.pan;\n    _this._volume = _this.output = new Volume({\n      context: _this.context,\n      volume: options.volume\n    });\n    _this.volume = _this._volume.volume; // connections\n\n    _this._panner.connect(_this._volume);\n\n    _this.mute = options.mute;\n    readOnly(_this, [\"pan\", \"volume\"]);\n    return _this;\n  }\n\n  PanVol.getDefaults = function () {\n    return Object.assign(ToneAudioNode.getDefaults(), {\n      mute: false,\n      pan: 0,\n      volume: 0\n    });\n  };\n\n  Object.defineProperty(PanVol.prototype, \"mute\", {\n    /**\n     * Mute/unmute the volume\n     */\n    get: function () {\n      return this._volume.mute;\n    },\n    set: function (mute) {\n      this._volume.mute = mute;\n    },\n    enumerable: true,\n    configurable: true\n  });\n\n  PanVol.prototype.dispose = function () {\n    _super.prototype.dispose.call(this);\n\n    this._panner.dispose();\n\n    this.pan.dispose();\n\n    this._volume.dispose();\n\n    this.volume.dispose();\n    return this;\n  };\n\n  return PanVol;\n}(ToneAudioNode);\n\nexport { PanVol };","map":{"version":3,"sources":["../../../../Tone/component/channel/PanVol.ts"],"names":[],"mappings":";AAAA,SAAS,QAAT,QAAyB,2BAAzB;AAEA,SAAgC,aAAhC,QAA2E,kCAA3E;AAEA,SAAS,oBAAT,QAAqC,0BAArC;AACA,SAAS,MAAT,QAAuB,UAAvB;AACA,SAAS,MAAT,QAAuB,UAAvB;AAQA;;;;;;;;;;AASA,IAAA,MAAA;AAAA;AAAA,UAAA,MAAA,EAAA;AAA4B,EAAA,OAAA,CAAA,SAAA,CAAA,MAAA,EAAA,MAAA;;AAiC3B,WAAA,MAAA,GAAA;AAAA,QAAA,KAAA,GAEC,MAAA,CAAA,IAAA,CAAA,IAAA,EAAM,oBAAoB,CAAC,MAAM,CAAC,WAAP,EAAD,EAAuB,SAAvB,EAAkC,CAAC,KAAD,EAAQ,QAAR,CAAlC,CAA1B,KAA+E,IAFhF;;AA/BS,IAAA,KAAA,CAAA,IAAA,GAAe,QAAf;AAkCR,QAAM,OAAO,GAAG,oBAAoB,CAAC,MAAM,CAAC,WAAP,EAAD,EAAuB,SAAvB,EAAkC,CAAC,KAAD,EAAQ,QAAR,CAAlC,CAApC;AAEA,IAAA,KAAI,CAAC,OAAL,GAAe,KAAI,CAAC,KAAL,GAAa,IAAI,MAAJ,CAAW;AACtC,MAAA,OAAO,EAAE,KAAI,CAAC,OADwB;AAEtC,MAAA,GAAG,EAAE,OAAO,CAAC;AAFyB,KAAX,CAA5B;AAIA,IAAA,KAAI,CAAC,GAAL,GAAW,KAAI,CAAC,OAAL,CAAa,GAAxB;AACA,IAAA,KAAI,CAAC,OAAL,GAAe,KAAI,CAAC,MAAL,GAAc,IAAI,MAAJ,CAAW;AACvC,MAAA,OAAO,EAAE,KAAI,CAAC,OADyB;AAEvC,MAAA,MAAM,EAAE,OAAO,CAAC;AAFuB,KAAX,CAA7B;AAIA,IAAA,KAAI,CAAC,MAAL,GAAc,KAAI,CAAC,OAAL,CAAa,MAA3B,CAdD,CAgBC;;AACA,IAAA,KAAI,CAAC,OAAL,CAAa,OAAb,CAAqB,KAAI,CAAC,OAA1B;;AACA,IAAA,KAAI,CAAC,IAAL,GAAY,OAAO,CAAC,IAApB;AAEA,IAAA,QAAQ,CAAC,KAAD,EAAO,CAAC,KAAD,EAAQ,QAAR,CAAP,CAAR;;AACA;;AAEM,EAAA,MAAA,CAAA,WAAA,GAAP,YAAA;AACC,WAAO,MAAM,CAAC,MAAP,CAAc,aAAa,CAAC,WAAd,EAAd,EAA2C;AACjD,MAAA,IAAI,EAAE,KAD2C;AAEjD,MAAA,GAAG,EAAE,CAF4C;AAGjD,MAAA,MAAM,EAAE;AAHyC,KAA3C,CAAP;AAKA,GANM;;AAWP,EAAA,MAAA,CAAA,cAAA,CAAI,MAAA,CAAA,SAAJ,EAAI,MAAJ,EAAQ;AAHR;;;SAGA,YAAA;AACC,aAAO,KAAK,OAAL,CAAa,IAApB;AACA,KAFO;SAGR,UAAS,IAAT,EAAa;AACZ,WAAK,OAAL,CAAa,IAAb,GAAoB,IAApB;AACA,KALO;oBAAA;;AAAA,GAAR;;AAOA,EAAA,MAAA,CAAA,SAAA,CAAA,OAAA,GAAA,YAAA;AACC,IAAA,MAAA,CAAA,SAAA,CAAM,OAAN,CAAa,IAAb,CAAa,IAAb;;AACA,SAAK,OAAL,CAAa,OAAb;;AACA,SAAK,GAAL,CAAS,OAAT;;AACA,SAAK,OAAL,CAAa,OAAb;;AACA,SAAK,MAAL,CAAY,OAAZ;AACA,WAAO,IAAP;AACA,GAPD;;AAQD,SAAA,MAAA;AAAC,CAlFD,CAA4B,aAA5B,CAAA","sourceRoot":"","sourcesContent":["import * as tslib_1 from \"tslib\";\nimport { readOnly } from \"../../core/util/Interface\";\nimport { ToneAudioNode } from \"../../core/context/ToneAudioNode\";\nimport { optionsFromArguments } from \"../../core/util/Defaults\";\nimport { Panner } from \"./Panner\";\nimport { Volume } from \"./Volume\";\n/**\n * PanVol is a Tone.Panner and Tone.Volume in one.\n * @example\n * import { Oscillator, PanVol } from \"tone\";\n * // pan the incoming signal left and drop the volume\n * const panVol = new PanVol(-0.25, -12).toDestination();\n * const osc = new Oscillator().connect(panVol).start();\n * @category Component\n */\nvar PanVol = /** @class */ (function (_super) {\n    tslib_1.__extends(PanVol, _super);\n    function PanVol() {\n        var _this = _super.call(this, optionsFromArguments(PanVol.getDefaults(), arguments, [\"pan\", \"volume\"])) || this;\n        _this.name = \"PanVol\";\n        var options = optionsFromArguments(PanVol.getDefaults(), arguments, [\"pan\", \"volume\"]);\n        _this._panner = _this.input = new Panner({\n            context: _this.context,\n            pan: options.pan,\n        });\n        _this.pan = _this._panner.pan;\n        _this._volume = _this.output = new Volume({\n            context: _this.context,\n            volume: options.volume,\n        });\n        _this.volume = _this._volume.volume;\n        // connections\n        _this._panner.connect(_this._volume);\n        _this.mute = options.mute;\n        readOnly(_this, [\"pan\", \"volume\"]);\n        return _this;\n    }\n    PanVol.getDefaults = function () {\n        return Object.assign(ToneAudioNode.getDefaults(), {\n            mute: false,\n            pan: 0,\n            volume: 0,\n        });\n    };\n    Object.defineProperty(PanVol.prototype, \"mute\", {\n        /**\n         * Mute/unmute the volume\n         */\n        get: function () {\n            return this._volume.mute;\n        },\n        set: function (mute) {\n            this._volume.mute = mute;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    PanVol.prototype.dispose = function () {\n        _super.prototype.dispose.call(this);\n        this._panner.dispose();\n        this.pan.dispose();\n        this._volume.dispose();\n        this.volume.dispose();\n        return this;\n    };\n    return PanVol;\n}(ToneAudioNode));\nexport { PanVol };\n//# sourceMappingURL=PanVol.js.map"]},"metadata":{},"sourceType":"module"}