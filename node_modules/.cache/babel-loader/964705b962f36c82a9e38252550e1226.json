{"ast":null,"code":"import * as tslib_1 from \"tslib\";\nimport { SignalOperator } from \"./SignalOperator\";\nimport { WaveShaper } from \"./WaveShaper\";\n/**\n * Return the absolute value of an incoming signal.\n *\n * @example\n * import { Abs, Signal } from \"tone\";\n * const signal = new Signal(-1);\n * const abs = new Abs();\n * signal.connect(abs);\n * // the output of abs is 1.\n * @category Signal\n */\n\nvar Abs =\n/** @class */\nfunction (_super) {\n  tslib_1.__extends(Abs, _super);\n\n  function Abs() {\n    var _this = _super !== null && _super.apply(this, arguments) || this;\n\n    _this.name = \"Abs\";\n    /**\n     * The node which converts the audio ranges\n     */\n\n    _this._abs = new WaveShaper({\n      context: _this.context,\n      mapping: function (val) {\n        if (Math.abs(val) < 0.001) {\n          return 0;\n        } else {\n          return Math.abs(val);\n        }\n      }\n    });\n    /**\n     * The AudioRange input [-1, 1]\n     */\n\n    _this.input = _this._abs;\n    /**\n     * The output range [0, 1]\n     */\n\n    _this.output = _this._abs;\n    return _this;\n  }\n  /**\n   * clean up\n   */\n\n\n  Abs.prototype.dispose = function () {\n    _super.prototype.dispose.call(this);\n\n    this._abs.dispose();\n\n    return this;\n  };\n\n  return Abs;\n}(SignalOperator);\n\nexport { Abs };","map":{"version":3,"sources":["../../../Tone/signal/Abs.ts"],"names":[],"mappings":";AACA,SAAS,cAAT,QAA+B,kBAA/B;AACA,SAAS,UAAT,QAA2B,cAA3B;AAEA;;;;;;;;;;;;AAWA,IAAA,GAAA;AAAA;AAAA,UAAA,MAAA,EAAA;AAAyB,EAAA,OAAA,CAAA,SAAA,CAAA,GAAA,EAAA,MAAA;;AAAzB,WAAA,GAAA,GAAA;AAAA,QAAA,KAAA,GAAA,MAAA,KAAA,IAAA,IAAA,MAAA,CAAA,KAAA,CAAA,IAAA,EAAA,SAAA,CAAA,IAAA,IAAA;;AAEU,IAAA,KAAA,CAAA,IAAA,GAAe,KAAf;AAET;;;;AAGQ,IAAA,KAAA,CAAA,IAAA,GAAO,IAAI,UAAJ,CAAe;AAC7B,MAAA,OAAO,EAAE,KAAI,CAAC,OADe;AAE7B,MAAA,OAAO,EAAE,UAAA,GAAA,EAAG;AACX,YAAI,IAAI,CAAC,GAAL,CAAS,GAAT,IAAgB,KAApB,EAA2B;AAC1B,iBAAO,CAAP;AACA,SAFD,MAEO;AACN,iBAAO,IAAI,CAAC,GAAL,CAAS,GAAT,CAAP;AACA;AACD;AAR4B,KAAf,CAAP;AAWR;;;;AAGA,IAAA,KAAA,CAAA,KAAA,GAAQ,KAAI,CAAC,IAAb;AAEA;;;;AAGA,IAAA,KAAA,CAAA,MAAA,GAAS,KAAI,CAAC,IAAd;;AAUA;AARA;;;;;AAGA,EAAA,GAAA,CAAA,SAAA,CAAA,OAAA,GAAA,YAAA;AACC,IAAA,MAAA,CAAA,SAAA,CAAM,OAAN,CAAa,IAAb,CAAa,IAAb;;AACA,SAAK,IAAL,CAAU,OAAV;;AACA,WAAO,IAAP;AACA,GAJD;;AAKD,SAAA,GAAA;AAAC,CApCD,CAAyB,cAAzB,CAAA","sourceRoot":"","sourcesContent":["import * as tslib_1 from \"tslib\";\nimport { SignalOperator } from \"./SignalOperator\";\nimport { WaveShaper } from \"./WaveShaper\";\n/**\n * Return the absolute value of an incoming signal.\n *\n * @example\n * import { Abs, Signal } from \"tone\";\n * const signal = new Signal(-1);\n * const abs = new Abs();\n * signal.connect(abs);\n * // the output of abs is 1.\n * @category Signal\n */\nvar Abs = /** @class */ (function (_super) {\n    tslib_1.__extends(Abs, _super);\n    function Abs() {\n        var _this = _super !== null && _super.apply(this, arguments) || this;\n        _this.name = \"Abs\";\n        /**\n         * The node which converts the audio ranges\n         */\n        _this._abs = new WaveShaper({\n            context: _this.context,\n            mapping: function (val) {\n                if (Math.abs(val) < 0.001) {\n                    return 0;\n                }\n                else {\n                    return Math.abs(val);\n                }\n            },\n        });\n        /**\n         * The AudioRange input [-1, 1]\n         */\n        _this.input = _this._abs;\n        /**\n         * The output range [0, 1]\n         */\n        _this.output = _this._abs;\n        return _this;\n    }\n    /**\n     * clean up\n     */\n    Abs.prototype.dispose = function () {\n        _super.prototype.dispose.call(this);\n        this._abs.dispose();\n        return this;\n    };\n    return Abs;\n}(SignalOperator));\nexport { Abs };\n//# sourceMappingURL=Abs.js.map"]},"metadata":{},"sourceType":"module"}