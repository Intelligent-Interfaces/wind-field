{"ast":null,"code":"/*! Source code licensed under Apache License 2.0. Copyright Â© 2017-current William Ngan and contributors. (https://github.com/williamngan/pts) */\nimport { Const } from \"./Util\";\nimport { Curve } from \"./Op\";\nimport { Pt, Group } from \"./Pt\";\nimport { Vec, Mat } from \"./LinearAlgebra\";\nexport class Num {\n  static equals(a, b, threshold = 0.00001) {\n    return Math.abs(a - b) < threshold;\n  }\n\n  static lerp(a, b, t) {\n    return (1 - t) * a + t * b;\n  }\n\n  static clamp(val, min, max) {\n    return Math.max(min, Math.min(max, val));\n  }\n\n  static boundValue(val, min, max) {\n    let len = Math.abs(max - min);\n    let a = val % len;\n    if (a > max) a -= len;else if (a < min) a += len;\n    return a;\n  }\n\n  static within(p, a, b) {\n    return p >= Math.min(a, b) && p <= Math.max(a, b);\n  }\n\n  static randomRange(a, b = 0) {\n    let r = a > b ? a - b : b - a;\n    return a + Math.random() * r;\n  }\n\n  static normalizeValue(n, a, b) {\n    let min = Math.min(a, b);\n    let max = Math.max(a, b);\n    return (n - min) / (max - min);\n  }\n\n  static sum(pts) {\n    let c = new Pt(pts[0]);\n\n    for (let i = 1, len = pts.length; i < len; i++) {\n      Vec.add(c, pts[i]);\n    }\n\n    return c;\n  }\n\n  static average(pts) {\n    return Num.sum(pts).divide(pts.length);\n  }\n\n  static cycle(t, method = Shaping.sineInOut) {\n    return method(t > 0.5 ? 2 - t * 2 : t * 2);\n  }\n\n  static mapToRange(n, currA, currB, targetA, targetB) {\n    if (currA == currB) throw new Error(\"[currMin, currMax] must define a range that is not zero\");\n    let min = Math.min(targetA, targetB);\n    let max = Math.max(targetA, targetB);\n    return Num.normalizeValue(n, currA, currB) * (max - min) + min;\n  }\n\n}\nexport class Geom {\n  static boundAngle(angle) {\n    return Num.boundValue(angle, 0, 360);\n  }\n\n  static boundRadian(radian) {\n    return Num.boundValue(radian, 0, Const.two_pi);\n  }\n\n  static toRadian(angle) {\n    return angle * Const.deg_to_rad;\n  }\n\n  static toDegree(radian) {\n    return radian * Const.rad_to_deg;\n  }\n\n  static boundingBox(pts) {\n    let minPt = pts.reduce((a, p) => a.$min(p));\n    let maxPt = pts.reduce((a, p) => a.$max(p));\n    return new Group(minPt, maxPt);\n  }\n\n  static centroid(pts) {\n    return Num.average(pts);\n  }\n\n  static anchor(pts, ptOrIndex = 0, direction = \"to\") {\n    let method = direction == \"to\" ? \"subtract\" : \"add\";\n\n    for (let i = 0, len = pts.length; i < len; i++) {\n      if (typeof ptOrIndex == \"number\") {\n        if (ptOrIndex !== i) pts[i][method](pts[ptOrIndex]);\n      } else {\n        pts[i][method](ptOrIndex);\n      }\n    }\n  }\n\n  static interpolate(a, b, t = 0.5) {\n    let len = Math.min(a.length, b.length);\n    let d = Pt.make(len);\n\n    for (let i = 0; i < len; i++) {\n      d[i] = a[i] * (1 - t) + b[i] * t;\n    }\n\n    return d;\n  }\n\n  static perpendicular(pt, axis = Const.xy) {\n    let y = axis[1];\n    let x = axis[0];\n    let p = new Pt(pt);\n    let pa = new Pt(p);\n    pa[x] = -p[y];\n    pa[y] = p[x];\n    let pb = new Pt(p);\n    pb[x] = p[y];\n    pb[y] = -p[x];\n    return new Group(pa, pb);\n  }\n\n  static isPerpendicular(p1, p2) {\n    return new Pt(p1).dot(p2) === 0;\n  }\n\n  static withinBound(pt, boundPt1, boundPt2) {\n    for (let i = 0, len = Math.min(pt.length, boundPt1.length, boundPt2.length); i < len; i++) {\n      if (!Num.within(pt[i], boundPt1[i], boundPt2[i])) return false;\n    }\n\n    return true;\n  }\n\n  static sortEdges(pts) {\n    let bounds = Geom.boundingBox(pts);\n    let center = bounds[1].add(bounds[0]).divide(2);\n\n    let fn = (a, b) => {\n      if (a.length < 2 || b.length < 2) throw new Error(\"Pt dimension cannot be less than 2\");\n      let da = a.$subtract(center);\n      let db = b.$subtract(center);\n      if (da[0] >= 0 && db[0] < 0) return 1;\n      if (da[0] < 0 && db[0] >= 0) return -1;\n\n      if (da[0] == 0 && db[0] == 0) {\n        if (da[1] >= 0 || db[1] >= 0) return da[1] > db[1] ? 1 : -1;\n        return db[1] > da[1] ? 1 : -1;\n      }\n\n      let det = da.$cross2D(db);\n      if (det < 0) return 1;\n      if (det > 0) return -1;\n      return da[0] * da[0] + da[1] * da[1] > db[0] * db[0] + db[1] * db[1] ? 1 : -1;\n    };\n\n    return pts.sort(fn);\n  }\n\n  static scale(ps, scale, anchor) {\n    let pts = !Array.isArray(ps) ? [ps] : ps;\n    let scs = typeof scale == \"number\" ? Pt.make(pts[0].length, scale) : scale;\n    if (!anchor) anchor = Pt.make(pts[0].length, 0);\n\n    for (let i = 0, len = pts.length; i < len; i++) {\n      let p = pts[i];\n\n      for (let k = 0, lenP = p.length; k < lenP; k++) {\n        p[k] = anchor && anchor[k] ? anchor[k] + (p[k] - anchor[k]) * scs[k] : p[k] * scs[k];\n      }\n    }\n\n    return Geom;\n  }\n\n  static rotate2D(ps, angle, anchor, axis) {\n    let pts = !Array.isArray(ps) ? [ps] : ps;\n    let fn = anchor ? Mat.rotateAt2DMatrix : Mat.rotate2DMatrix;\n    if (!anchor) anchor = Pt.make(pts[0].length, 0);\n    let cos = Math.cos(angle);\n    let sin = Math.sin(angle);\n\n    for (let i = 0, len = pts.length; i < len; i++) {\n      let p = axis ? pts[i].$take(axis) : pts[i];\n      p.to(Mat.transform2D(p, fn(cos, sin, anchor)));\n    }\n\n    return Geom;\n  }\n\n  static shear2D(ps, scale, anchor, axis) {\n    let pts = !Array.isArray(ps) ? [ps] : ps;\n    let s = typeof scale == \"number\" ? [scale, scale] : scale;\n    if (!anchor) anchor = Pt.make(pts[0].length, 0);\n    let fn = anchor ? Mat.shearAt2DMatrix : Mat.shear2DMatrix;\n    let tanx = Math.tan(s[0]);\n    let tany = Math.tan(s[1]);\n\n    for (let i = 0, len = pts.length; i < len; i++) {\n      let p = axis ? pts[i].$take(axis) : pts[i];\n      p.to(Mat.transform2D(p, fn(tanx, tany, anchor)));\n    }\n\n    return Geom;\n  }\n\n  static reflect2D(ps, line, axis) {\n    let pts = !Array.isArray(ps) ? [ps] : ps;\n    let mat = Mat.reflectAt2DMatrix(line[0], line[1]);\n\n    for (let i = 0, len = pts.length; i < len; i++) {\n      let p = axis ? pts[i].$take(axis) : pts[i];\n      p.to(Mat.transform2D(p, mat));\n    }\n\n    return Geom;\n  }\n\n  static cosTable() {\n    let cos = new Float64Array(360);\n\n    for (let i = 0; i < 360; i++) cos[i] = Math.cos(i * Math.PI / 180);\n\n    let find = rad => cos[Math.floor(Geom.boundAngle(Geom.toDegree(rad)))];\n\n    return {\n      table: cos,\n      cos: find\n    };\n  }\n\n  static sinTable() {\n    let sin = new Float64Array(360);\n\n    for (let i = 0; i < 360; i++) sin[i] = Math.sin(i * Math.PI / 180);\n\n    let find = rad => sin[Math.floor(Geom.boundAngle(Geom.toDegree(rad)))];\n\n    return {\n      table: sin,\n      sin: find\n    };\n  }\n\n}\nexport class Shaping {\n  static linear(t, c = 1) {\n    return c * t;\n  }\n\n  static quadraticIn(t, c = 1) {\n    return c * t * t;\n  }\n\n  static quadraticOut(t, c = 1) {\n    return -c * t * (t - 2);\n  }\n\n  static quadraticInOut(t, c = 1) {\n    let dt = t * 2;\n    return t < 0.5 ? c / 2 * t * t * 4 : -c / 2 * ((dt - 1) * (dt - 3) - 1);\n  }\n\n  static cubicIn(t, c = 1) {\n    return c * t * t * t;\n  }\n\n  static cubicOut(t, c = 1) {\n    let dt = t - 1;\n    return c * (dt * dt * dt + 1);\n  }\n\n  static cubicInOut(t, c = 1) {\n    let dt = t * 2;\n    return t < 0.5 ? c / 2 * dt * dt * dt : c / 2 * ((dt - 2) * (dt - 2) * (dt - 2) + 2);\n  }\n\n  static exponentialIn(t, c = 1, p = 0.25) {\n    return c * Math.pow(t, 1 / p);\n  }\n\n  static exponentialOut(t, c = 1, p = 0.25) {\n    return c * Math.pow(t, p);\n  }\n\n  static sineIn(t, c = 1) {\n    return -c * Math.cos(t * Const.half_pi) + c;\n  }\n\n  static sineOut(t, c = 1) {\n    return c * Math.sin(t * Const.half_pi);\n  }\n\n  static sineInOut(t, c = 1) {\n    return -c / 2 * (Math.cos(Math.PI * t) - 1);\n  }\n\n  static cosineApprox(t, c = 1) {\n    let t2 = t * t;\n    let t4 = t2 * t2;\n    let t6 = t4 * t2;\n    return c * (4 * t6 / 9 - 17 * t4 / 9 + 22 * t2 / 9);\n  }\n\n  static circularIn(t, c = 1) {\n    return -c * (Math.sqrt(1 - t * t) - 1);\n  }\n\n  static circularOut(t, c = 1) {\n    let dt = t - 1;\n    return c * Math.sqrt(1 - dt * dt);\n  }\n\n  static circularInOut(t, c = 1) {\n    let dt = t * 2;\n    return t < 0.5 ? -c / 2 * (Math.sqrt(1 - dt * dt) - 1) : c / 2 * (Math.sqrt(1 - (dt - 2) * (dt - 2)) + 1);\n  }\n\n  static elasticIn(t, c = 1, p = 0.7) {\n    let dt = t - 1;\n    let s = p / Const.two_pi * 1.5707963267948966;\n    return c * (-Math.pow(2, 10 * dt) * Math.sin((dt - s) * Const.two_pi / p));\n  }\n\n  static elasticOut(t, c = 1, p = 0.7) {\n    let s = p / Const.two_pi * 1.5707963267948966;\n    return c * (Math.pow(2, -10 * t) * Math.sin((t - s) * Const.two_pi / p)) + c;\n  }\n\n  static elasticInOut(t, c = 1, p = 0.6) {\n    let dt = t * 2;\n    let s = p / Const.two_pi * 1.5707963267948966;\n\n    if (t < 0.5) {\n      dt -= 1;\n      return c * (-0.5 * (Math.pow(2, 10 * dt) * Math.sin((dt - s) * Const.two_pi / p)));\n    } else {\n      dt -= 1;\n      return c * (0.5 * (Math.pow(2, -10 * dt) * Math.sin((dt - s) * Const.two_pi / p))) + c;\n    }\n  }\n\n  static bounceIn(t, c = 1) {\n    return c - Shaping.bounceOut(1 - t, c);\n  }\n\n  static bounceOut(t, c = 1) {\n    if (t < 1 / 2.75) {\n      return c * (7.5625 * t * t);\n    } else if (t < 2 / 2.75) {\n      t -= 1.5 / 2.75;\n      return c * (7.5625 * t * t + 0.75);\n    } else if (t < 2.5 / 2.75) {\n      t -= 2.25 / 2.75;\n      return c * (7.5625 * t * t + 0.9375);\n    } else {\n      t -= 2.625 / 2.75;\n      return c * (7.5625 * t * t + 0.984375);\n    }\n  }\n\n  static bounceInOut(t, c = 1) {\n    return t < 0.5 ? Shaping.bounceIn(t * 2, c) / 2 : Shaping.bounceOut(t * 2 - 1, c) / 2 + c / 2;\n  }\n\n  static sigmoid(t, c = 1, p = 10) {\n    let d = p * (t - 0.5);\n    return c / (1 + Math.exp(-d));\n  }\n\n  static logSigmoid(t, c = 1, p = 0.7) {\n    p = Math.max(Const.epsilon, Math.min(1 - Const.epsilon, p));\n    p = 1 / (1 - p);\n    let A = 1 / (1 + Math.exp((t - 0.5) * p * -2));\n    let B = 1 / (1 + Math.exp(p));\n    let C = 1 / (1 + Math.exp(-p));\n    return c * (A - B) / (C - B);\n  }\n\n  static seat(t, c = 1, p = 0.5) {\n    if (t < 0.5) {\n      return c * Math.pow(2 * t, 1 - p) / 2;\n    } else {\n      return c * (1 - Math.pow(2 * (1 - t), 1 - p) / 2);\n    }\n  }\n\n  static quadraticBezier(t, c = 1, p = [0.05, 0.95]) {\n    let a = typeof p != \"number\" ? p[0] : p;\n    let b = typeof p != \"number\" ? p[1] : 0.5;\n    let om2a = 1 - 2 * a;\n\n    if (om2a === 0) {\n      om2a = Const.epsilon;\n    }\n\n    let d = (Math.sqrt(a * a + om2a * t) - a) / om2a;\n    return c * ((1 - 2 * b) * (d * d) + 2 * b * d);\n  }\n\n  static cubicBezier(t, c = 1, p1 = [0.1, 0.7], p2 = [0.9, 0.2]) {\n    let curve = new Group(new Pt(0, 0), new Pt(p1), new Pt(p2), new Pt(1, 1));\n    return c * Curve.bezierStep(new Pt(t * t * t, t * t, t, 1), Curve.controlPoints(curve)).y;\n  }\n\n  static quadraticTarget(t, c = 1, p1 = [0.2, 0.35]) {\n    let a = Math.min(1 - Const.epsilon, Math.max(Const.epsilon, p1[0]));\n    let b = Math.min(1, Math.max(0, p1[1]));\n    let A = (1 - b) / (1 - a) - b / a;\n    let B = (A * (a * a) - b) / a;\n    let y = A * (t * t) - B * t;\n    return c * Math.min(1, Math.max(0, y));\n  }\n\n  static cliff(t, c = 1, p = 0.5) {\n    return t > p ? c : 0;\n  }\n\n  static step(fn, steps, t, c, ...args) {\n    let s = 1 / steps;\n    let tt = Math.floor(t / s) * s;\n    return fn(tt, c, ...args);\n  }\n\n}\nexport class Range {\n  constructor(g) {\n    this._dims = 0;\n    this._source = Group.fromPtArray(g);\n    this.calc();\n  }\n\n  get max() {\n    return this._max.clone();\n  }\n\n  get min() {\n    return this._min.clone();\n  }\n\n  get magnitude() {\n    return this._mag.clone();\n  }\n\n  calc() {\n    if (!this._source) return;\n    let dims = this._source[0].length;\n    this._dims = dims;\n    let max = new Pt(dims);\n    let min = new Pt(dims);\n    let mag = new Pt(dims);\n\n    for (let i = 0; i < dims; i++) {\n      max[i] = Const.min;\n      min[i] = Const.max;\n      mag[i] = 0;\n\n      let s = this._source.zipSlice(i);\n\n      for (let k = 0, len = s.length; k < len; k++) {\n        max[i] = Math.max(max[i], s[k]);\n        min[i] = Math.min(min[i], s[k]);\n        mag[i] = max[i] - min[i];\n      }\n    }\n\n    this._max = max;\n    this._min = min;\n    this._mag = mag;\n    return this;\n  }\n\n  mapTo(min, max, exclude) {\n    let target = new Group();\n\n    for (let i = 0, len = this._source.length; i < len; i++) {\n      let g = this._source[i];\n      let n = new Pt(this._dims);\n\n      for (let k = 0; k < this._dims; k++) {\n        n[k] = exclude && exclude[k] ? g[k] : Num.mapToRange(g[k], this._min[k], this._max[k], min, max);\n      }\n\n      target.push(n);\n    }\n\n    return target;\n  }\n\n  append(g, update = true) {\n    if (g[0].length !== this._dims) throw new Error(`Dimensions don't match. ${this._dims} dimensions in Range and ${g[0].length} provided in parameter. `);\n    this._source = this._source.concat(g);\n    if (update) this.calc();\n    return this;\n  }\n\n  ticks(count) {\n    let g = new Group();\n\n    for (let i = 0; i <= count; i++) {\n      let p = new Pt(this._dims);\n\n      for (let k = 0, len = this._max.length; k < len; k++) {\n        p[k] = Num.lerp(this._min[k], this._max[k], i / count);\n      }\n\n      g.push(p);\n    }\n\n    return g;\n  }\n\n}","map":{"version":3,"sources":["/Users/erickoduniyi/Desktop/affective_chaos_control/Emulators/wind-field/node_modules/pts/dist/es2015/Num.js"],"names":["Const","Curve","Pt","Group","Vec","Mat","Num","equals","a","b","threshold","Math","abs","lerp","t","clamp","val","min","max","boundValue","len","within","p","randomRange","r","random","normalizeValue","n","sum","pts","c","i","length","add","average","divide","cycle","method","Shaping","sineInOut","mapToRange","currA","currB","targetA","targetB","Error","Geom","boundAngle","angle","boundRadian","radian","two_pi","toRadian","deg_to_rad","toDegree","rad_to_deg","boundingBox","minPt","reduce","$min","maxPt","$max","centroid","anchor","ptOrIndex","direction","interpolate","d","make","perpendicular","pt","axis","xy","y","x","pa","pb","isPerpendicular","p1","p2","dot","withinBound","boundPt1","boundPt2","sortEdges","bounds","center","fn","da","$subtract","db","det","$cross2D","sort","scale","ps","Array","isArray","scs","k","lenP","rotate2D","rotateAt2DMatrix","rotate2DMatrix","cos","sin","$take","to","transform2D","shear2D","s","shearAt2DMatrix","shear2DMatrix","tanx","tan","tany","reflect2D","line","mat","reflectAt2DMatrix","cosTable","Float64Array","PI","find","rad","floor","table","sinTable","linear","quadraticIn","quadraticOut","quadraticInOut","dt","cubicIn","cubicOut","cubicInOut","exponentialIn","pow","exponentialOut","sineIn","half_pi","sineOut","cosineApprox","t2","t4","t6","circularIn","sqrt","circularOut","circularInOut","elasticIn","elasticOut","elasticInOut","bounceIn","bounceOut","bounceInOut","sigmoid","exp","logSigmoid","epsilon","A","B","C","seat","quadraticBezier","om2a","cubicBezier","curve","bezierStep","controlPoints","quadraticTarget","cliff","step","steps","args","tt","Range","constructor","g","_dims","_source","fromPtArray","calc","_max","clone","_min","magnitude","_mag","dims","mag","zipSlice","mapTo","exclude","target","push","append","update","concat","ticks","count"],"mappings":"AAAA;AACA,SAASA,KAAT,QAAsB,QAAtB;AACA,SAASC,KAAT,QAAsB,MAAtB;AACA,SAASC,EAAT,EAAaC,KAAb,QAA0B,MAA1B;AACA,SAASC,GAAT,EAAcC,GAAd,QAAyB,iBAAzB;AACA,OAAO,MAAMC,GAAN,CAAU;AACb,SAAOC,MAAP,CAAcC,CAAd,EAAiBC,CAAjB,EAAoBC,SAAS,GAAG,OAAhC,EAAyC;AACrC,WAAOC,IAAI,CAACC,GAAL,CAASJ,CAAC,GAAGC,CAAb,IAAkBC,SAAzB;AACH;;AACD,SAAOG,IAAP,CAAYL,CAAZ,EAAeC,CAAf,EAAkBK,CAAlB,EAAqB;AACjB,WAAO,CAAC,IAAIA,CAAL,IAAUN,CAAV,GAAcM,CAAC,GAAGL,CAAzB;AACH;;AACD,SAAOM,KAAP,CAAaC,GAAb,EAAkBC,GAAlB,EAAuBC,GAAvB,EAA4B;AACxB,WAAOP,IAAI,CAACO,GAAL,CAASD,GAAT,EAAcN,IAAI,CAACM,GAAL,CAASC,GAAT,EAAcF,GAAd,CAAd,CAAP;AACH;;AACD,SAAOG,UAAP,CAAkBH,GAAlB,EAAuBC,GAAvB,EAA4BC,GAA5B,EAAiC;AAC7B,QAAIE,GAAG,GAAGT,IAAI,CAACC,GAAL,CAASM,GAAG,GAAGD,GAAf,CAAV;AACA,QAAIT,CAAC,GAAGQ,GAAG,GAAGI,GAAd;AACA,QAAIZ,CAAC,GAAGU,GAAR,EACIV,CAAC,IAAIY,GAAL,CADJ,KAEK,IAAIZ,CAAC,GAAGS,GAAR,EACDT,CAAC,IAAIY,GAAL;AACJ,WAAOZ,CAAP;AACH;;AACD,SAAOa,MAAP,CAAcC,CAAd,EAAiBd,CAAjB,EAAoBC,CAApB,EAAuB;AACnB,WAAOa,CAAC,IAAIX,IAAI,CAACM,GAAL,CAAST,CAAT,EAAYC,CAAZ,CAAL,IAAuBa,CAAC,IAAIX,IAAI,CAACO,GAAL,CAASV,CAAT,EAAYC,CAAZ,CAAnC;AACH;;AACD,SAAOc,WAAP,CAAmBf,CAAnB,EAAsBC,CAAC,GAAG,CAA1B,EAA6B;AACzB,QAAIe,CAAC,GAAIhB,CAAC,GAAGC,CAAL,GAAWD,CAAC,GAAGC,CAAf,GAAqBA,CAAC,GAAGD,CAAjC;AACA,WAAOA,CAAC,GAAGG,IAAI,CAACc,MAAL,KAAgBD,CAA3B;AACH;;AACD,SAAOE,cAAP,CAAsBC,CAAtB,EAAyBnB,CAAzB,EAA4BC,CAA5B,EAA+B;AAC3B,QAAIQ,GAAG,GAAGN,IAAI,CAACM,GAAL,CAAST,CAAT,EAAYC,CAAZ,CAAV;AACA,QAAIS,GAAG,GAAGP,IAAI,CAACO,GAAL,CAASV,CAAT,EAAYC,CAAZ,CAAV;AACA,WAAO,CAACkB,CAAC,GAAGV,GAAL,KAAaC,GAAG,GAAGD,GAAnB,CAAP;AACH;;AACD,SAAOW,GAAP,CAAWC,GAAX,EAAgB;AACZ,QAAIC,CAAC,GAAG,IAAI5B,EAAJ,CAAO2B,GAAG,CAAC,CAAD,CAAV,CAAR;;AACA,SAAK,IAAIE,CAAC,GAAG,CAAR,EAAWX,GAAG,GAAGS,GAAG,CAACG,MAA1B,EAAkCD,CAAC,GAAGX,GAAtC,EAA2CW,CAAC,EAA5C,EAAgD;AAC5C3B,MAAAA,GAAG,CAAC6B,GAAJ,CAAQH,CAAR,EAAWD,GAAG,CAACE,CAAD,CAAd;AACH;;AACD,WAAOD,CAAP;AACH;;AACD,SAAOI,OAAP,CAAeL,GAAf,EAAoB;AAChB,WAAOvB,GAAG,CAACsB,GAAJ,CAAQC,GAAR,EAAaM,MAAb,CAAoBN,GAAG,CAACG,MAAxB,CAAP;AACH;;AACD,SAAOI,KAAP,CAAatB,CAAb,EAAgBuB,MAAM,GAAGC,OAAO,CAACC,SAAjC,EAA4C;AACxC,WAAOF,MAAM,CAACvB,CAAC,GAAG,GAAJ,GAAU,IAAIA,CAAC,GAAG,CAAlB,GAAsBA,CAAC,GAAG,CAA3B,CAAb;AACH;;AACD,SAAO0B,UAAP,CAAkBb,CAAlB,EAAqBc,KAArB,EAA4BC,KAA5B,EAAmCC,OAAnC,EAA4CC,OAA5C,EAAqD;AACjD,QAAIH,KAAK,IAAIC,KAAb,EACI,MAAM,IAAIG,KAAJ,CAAU,yDAAV,CAAN;AACJ,QAAI5B,GAAG,GAAGN,IAAI,CAACM,GAAL,CAAS0B,OAAT,EAAkBC,OAAlB,CAAV;AACA,QAAI1B,GAAG,GAAGP,IAAI,CAACO,GAAL,CAASyB,OAAT,EAAkBC,OAAlB,CAAV;AACA,WAAOtC,GAAG,CAACoB,cAAJ,CAAmBC,CAAnB,EAAsBc,KAAtB,EAA6BC,KAA7B,KAAuCxB,GAAG,GAAGD,GAA7C,IAAoDA,GAA3D;AACH;;AAlDY;AAoDjB,OAAO,MAAM6B,IAAN,CAAW;AACd,SAAOC,UAAP,CAAkBC,KAAlB,EAAyB;AACrB,WAAO1C,GAAG,CAACa,UAAJ,CAAe6B,KAAf,EAAsB,CAAtB,EAAyB,GAAzB,CAAP;AACH;;AACD,SAAOC,WAAP,CAAmBC,MAAnB,EAA2B;AACvB,WAAO5C,GAAG,CAACa,UAAJ,CAAe+B,MAAf,EAAuB,CAAvB,EAA0BlD,KAAK,CAACmD,MAAhC,CAAP;AACH;;AACD,SAAOC,QAAP,CAAgBJ,KAAhB,EAAuB;AACnB,WAAOA,KAAK,GAAGhD,KAAK,CAACqD,UAArB;AACH;;AACD,SAAOC,QAAP,CAAgBJ,MAAhB,EAAwB;AACpB,WAAOA,MAAM,GAAGlD,KAAK,CAACuD,UAAtB;AACH;;AACD,SAAOC,WAAP,CAAmB3B,GAAnB,EAAwB;AACpB,QAAI4B,KAAK,GAAG5B,GAAG,CAAC6B,MAAJ,CAAW,CAAClD,CAAD,EAAIc,CAAJ,KAAUd,CAAC,CAACmD,IAAF,CAAOrC,CAAP,CAArB,CAAZ;AACA,QAAIsC,KAAK,GAAG/B,GAAG,CAAC6B,MAAJ,CAAW,CAAClD,CAAD,EAAIc,CAAJ,KAAUd,CAAC,CAACqD,IAAF,CAAOvC,CAAP,CAArB,CAAZ;AACA,WAAO,IAAInB,KAAJ,CAAUsD,KAAV,EAAiBG,KAAjB,CAAP;AACH;;AACD,SAAOE,QAAP,CAAgBjC,GAAhB,EAAqB;AACjB,WAAOvB,GAAG,CAAC4B,OAAJ,CAAYL,GAAZ,CAAP;AACH;;AACD,SAAOkC,MAAP,CAAclC,GAAd,EAAmBmC,SAAS,GAAG,CAA/B,EAAkCC,SAAS,GAAG,IAA9C,EAAoD;AAChD,QAAI5B,MAAM,GAAI4B,SAAS,IAAI,IAAd,GAAsB,UAAtB,GAAmC,KAAhD;;AACA,SAAK,IAAIlC,CAAC,GAAG,CAAR,EAAWX,GAAG,GAAGS,GAAG,CAACG,MAA1B,EAAkCD,CAAC,GAAGX,GAAtC,EAA2CW,CAAC,EAA5C,EAAgD;AAC5C,UAAI,OAAOiC,SAAP,IAAoB,QAAxB,EAAkC;AAC9B,YAAIA,SAAS,KAAKjC,CAAlB,EACIF,GAAG,CAACE,CAAD,CAAH,CAAOM,MAAP,EAAeR,GAAG,CAACmC,SAAD,CAAlB;AACP,OAHD,MAIK;AACDnC,QAAAA,GAAG,CAACE,CAAD,CAAH,CAAOM,MAAP,EAAe2B,SAAf;AACH;AACJ;AACJ;;AACD,SAAOE,WAAP,CAAmB1D,CAAnB,EAAsBC,CAAtB,EAAyBK,CAAC,GAAG,GAA7B,EAAkC;AAC9B,QAAIM,GAAG,GAAGT,IAAI,CAACM,GAAL,CAAST,CAAC,CAACwB,MAAX,EAAmBvB,CAAC,CAACuB,MAArB,CAAV;AACA,QAAImC,CAAC,GAAGjE,EAAE,CAACkE,IAAH,CAAQhD,GAAR,CAAR;;AACA,SAAK,IAAIW,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGX,GAApB,EAAyBW,CAAC,EAA1B,EAA8B;AAC1BoC,MAAAA,CAAC,CAACpC,CAAD,CAAD,GAAOvB,CAAC,CAACuB,CAAD,CAAD,IAAQ,IAAIjB,CAAZ,IAAiBL,CAAC,CAACsB,CAAD,CAAD,GAAOjB,CAA/B;AACH;;AACD,WAAOqD,CAAP;AACH;;AACD,SAAOE,aAAP,CAAqBC,EAArB,EAAyBC,IAAI,GAAGvE,KAAK,CAACwE,EAAtC,EAA0C;AACtC,QAAIC,CAAC,GAAGF,IAAI,CAAC,CAAD,CAAZ;AACA,QAAIG,CAAC,GAAGH,IAAI,CAAC,CAAD,CAAZ;AACA,QAAIjD,CAAC,GAAG,IAAIpB,EAAJ,CAAOoE,EAAP,CAAR;AACA,QAAIK,EAAE,GAAG,IAAIzE,EAAJ,CAAOoB,CAAP,CAAT;AACAqD,IAAAA,EAAE,CAACD,CAAD,CAAF,GAAQ,CAACpD,CAAC,CAACmD,CAAD,CAAV;AACAE,IAAAA,EAAE,CAACF,CAAD,CAAF,GAAQnD,CAAC,CAACoD,CAAD,CAAT;AACA,QAAIE,EAAE,GAAG,IAAI1E,EAAJ,CAAOoB,CAAP,CAAT;AACAsD,IAAAA,EAAE,CAACF,CAAD,CAAF,GAAQpD,CAAC,CAACmD,CAAD,CAAT;AACAG,IAAAA,EAAE,CAACH,CAAD,CAAF,GAAQ,CAACnD,CAAC,CAACoD,CAAD,CAAV;AACA,WAAO,IAAIvE,KAAJ,CAAUwE,EAAV,EAAcC,EAAd,CAAP;AACH;;AACD,SAAOC,eAAP,CAAuBC,EAAvB,EAA2BC,EAA3B,EAA+B;AAC3B,WAAO,IAAI7E,EAAJ,CAAO4E,EAAP,EAAWE,GAAX,CAAeD,EAAf,MAAuB,CAA9B;AACH;;AACD,SAAOE,WAAP,CAAmBX,EAAnB,EAAuBY,QAAvB,EAAiCC,QAAjC,EAA2C;AACvC,SAAK,IAAIpD,CAAC,GAAG,CAAR,EAAWX,GAAG,GAAGT,IAAI,CAACM,GAAL,CAASqD,EAAE,CAACtC,MAAZ,EAAoBkD,QAAQ,CAAClD,MAA7B,EAAqCmD,QAAQ,CAACnD,MAA9C,CAAtB,EAA6ED,CAAC,GAAGX,GAAjF,EAAsFW,CAAC,EAAvF,EAA2F;AACvF,UAAI,CAACzB,GAAG,CAACe,MAAJ,CAAWiD,EAAE,CAACvC,CAAD,CAAb,EAAkBmD,QAAQ,CAACnD,CAAD,CAA1B,EAA+BoD,QAAQ,CAACpD,CAAD,CAAvC,CAAL,EACI,OAAO,KAAP;AACP;;AACD,WAAO,IAAP;AACH;;AACD,SAAOqD,SAAP,CAAiBvD,GAAjB,EAAsB;AAClB,QAAIwD,MAAM,GAAGvC,IAAI,CAACU,WAAL,CAAiB3B,GAAjB,CAAb;AACA,QAAIyD,MAAM,GAAGD,MAAM,CAAC,CAAD,CAAN,CAAUpD,GAAV,CAAcoD,MAAM,CAAC,CAAD,CAApB,EAAyBlD,MAAzB,CAAgC,CAAhC,CAAb;;AACA,QAAIoD,EAAE,GAAG,CAAC/E,CAAD,EAAIC,CAAJ,KAAU;AACf,UAAID,CAAC,CAACwB,MAAF,GAAW,CAAX,IAAgBvB,CAAC,CAACuB,MAAF,GAAW,CAA/B,EACI,MAAM,IAAIa,KAAJ,CAAU,oCAAV,CAAN;AACJ,UAAI2C,EAAE,GAAGhF,CAAC,CAACiF,SAAF,CAAYH,MAAZ,CAAT;AACA,UAAII,EAAE,GAAGjF,CAAC,CAACgF,SAAF,CAAYH,MAAZ,CAAT;AACA,UAAIE,EAAE,CAAC,CAAD,CAAF,IAAS,CAAT,IAAcE,EAAE,CAAC,CAAD,CAAF,GAAQ,CAA1B,EACI,OAAO,CAAP;AACJ,UAAIF,EAAE,CAAC,CAAD,CAAF,GAAQ,CAAR,IAAaE,EAAE,CAAC,CAAD,CAAF,IAAS,CAA1B,EACI,OAAO,CAAC,CAAR;;AACJ,UAAIF,EAAE,CAAC,CAAD,CAAF,IAAS,CAAT,IAAcE,EAAE,CAAC,CAAD,CAAF,IAAS,CAA3B,EAA8B;AAC1B,YAAIF,EAAE,CAAC,CAAD,CAAF,IAAS,CAAT,IAAcE,EAAE,CAAC,CAAD,CAAF,IAAS,CAA3B,EACI,OAAQF,EAAE,CAAC,CAAD,CAAF,GAAQE,EAAE,CAAC,CAAD,CAAX,GAAkB,CAAlB,GAAsB,CAAC,CAA9B;AACJ,eAAQA,EAAE,CAAC,CAAD,CAAF,GAAQF,EAAE,CAAC,CAAD,CAAX,GAAkB,CAAlB,GAAsB,CAAC,CAA9B;AACH;;AACD,UAAIG,GAAG,GAAGH,EAAE,CAACI,QAAH,CAAYF,EAAZ,CAAV;AACA,UAAIC,GAAG,GAAG,CAAV,EACI,OAAO,CAAP;AACJ,UAAIA,GAAG,GAAG,CAAV,EACI,OAAO,CAAC,CAAR;AACJ,aAAQH,EAAE,CAAC,CAAD,CAAF,GAAQA,EAAE,CAAC,CAAD,CAAV,GAAgBA,EAAE,CAAC,CAAD,CAAF,GAAQA,EAAE,CAAC,CAAD,CAA1B,GAAgCE,EAAE,CAAC,CAAD,CAAF,GAAQA,EAAE,CAAC,CAAD,CAAV,GAAgBA,EAAE,CAAC,CAAD,CAAF,GAAQA,EAAE,CAAC,CAAD,CAA3D,GAAkE,CAAlE,GAAsE,CAAC,CAA9E;AACH,KApBD;;AAqBA,WAAO7D,GAAG,CAACgE,IAAJ,CAASN,EAAT,CAAP;AACH;;AACD,SAAOO,KAAP,CAAaC,EAAb,EAAiBD,KAAjB,EAAwB/B,MAAxB,EAAgC;AAC5B,QAAIlC,GAAG,GAAI,CAACmE,KAAK,CAACC,OAAN,CAAcF,EAAd,CAAF,GAAuB,CAACA,EAAD,CAAvB,GAA8BA,EAAxC;AACA,QAAIG,GAAG,GAAI,OAAOJ,KAAP,IAAgB,QAAjB,GAA6B5F,EAAE,CAACkE,IAAH,CAAQvC,GAAG,CAAC,CAAD,CAAH,CAAOG,MAAf,EAAuB8D,KAAvB,CAA7B,GAA6DA,KAAvE;AACA,QAAI,CAAC/B,MAAL,EACIA,MAAM,GAAG7D,EAAE,CAACkE,IAAH,CAAQvC,GAAG,CAAC,CAAD,CAAH,CAAOG,MAAf,EAAuB,CAAvB,CAAT;;AACJ,SAAK,IAAID,CAAC,GAAG,CAAR,EAAWX,GAAG,GAAGS,GAAG,CAACG,MAA1B,EAAkCD,CAAC,GAAGX,GAAtC,EAA2CW,CAAC,EAA5C,EAAgD;AAC5C,UAAIT,CAAC,GAAGO,GAAG,CAACE,CAAD,CAAX;;AACA,WAAK,IAAIoE,CAAC,GAAG,CAAR,EAAWC,IAAI,GAAG9E,CAAC,CAACU,MAAzB,EAAiCmE,CAAC,GAAGC,IAArC,EAA2CD,CAAC,EAA5C,EAAgD;AAC5C7E,QAAAA,CAAC,CAAC6E,CAAD,CAAD,GAAQpC,MAAM,IAAIA,MAAM,CAACoC,CAAD,CAAjB,GAAwBpC,MAAM,CAACoC,CAAD,CAAN,GAAY,CAAC7E,CAAC,CAAC6E,CAAD,CAAD,GAAOpC,MAAM,CAACoC,CAAD,CAAd,IAAqBD,GAAG,CAACC,CAAD,CAA5D,GAAkE7E,CAAC,CAAC6E,CAAD,CAAD,GAAOD,GAAG,CAACC,CAAD,CAAnF;AACH;AACJ;;AACD,WAAOrD,IAAP;AACH;;AACD,SAAOuD,QAAP,CAAgBN,EAAhB,EAAoB/C,KAApB,EAA2Be,MAA3B,EAAmCQ,IAAnC,EAAyC;AACrC,QAAI1C,GAAG,GAAI,CAACmE,KAAK,CAACC,OAAN,CAAcF,EAAd,CAAF,GAAuB,CAACA,EAAD,CAAvB,GAA8BA,EAAxC;AACA,QAAIR,EAAE,GAAIxB,MAAD,GAAW1D,GAAG,CAACiG,gBAAf,GAAkCjG,GAAG,CAACkG,cAA/C;AACA,QAAI,CAACxC,MAAL,EACIA,MAAM,GAAG7D,EAAE,CAACkE,IAAH,CAAQvC,GAAG,CAAC,CAAD,CAAH,CAAOG,MAAf,EAAuB,CAAvB,CAAT;AACJ,QAAIwE,GAAG,GAAG7F,IAAI,CAAC6F,GAAL,CAASxD,KAAT,CAAV;AACA,QAAIyD,GAAG,GAAG9F,IAAI,CAAC8F,GAAL,CAASzD,KAAT,CAAV;;AACA,SAAK,IAAIjB,CAAC,GAAG,CAAR,EAAWX,GAAG,GAAGS,GAAG,CAACG,MAA1B,EAAkCD,CAAC,GAAGX,GAAtC,EAA2CW,CAAC,EAA5C,EAAgD;AAC5C,UAAIT,CAAC,GAAIiD,IAAD,GAAS1C,GAAG,CAACE,CAAD,CAAH,CAAO2E,KAAP,CAAanC,IAAb,CAAT,GAA8B1C,GAAG,CAACE,CAAD,CAAzC;AACAT,MAAAA,CAAC,CAACqF,EAAF,CAAKtG,GAAG,CAACuG,WAAJ,CAAgBtF,CAAhB,EAAmBiE,EAAE,CAACiB,GAAD,EAAMC,GAAN,EAAW1C,MAAX,CAArB,CAAL;AACH;;AACD,WAAOjB,IAAP;AACH;;AACD,SAAO+D,OAAP,CAAed,EAAf,EAAmBD,KAAnB,EAA0B/B,MAA1B,EAAkCQ,IAAlC,EAAwC;AACpC,QAAI1C,GAAG,GAAI,CAACmE,KAAK,CAACC,OAAN,CAAcF,EAAd,CAAF,GAAuB,CAACA,EAAD,CAAvB,GAA8BA,EAAxC;AACA,QAAIe,CAAC,GAAI,OAAOhB,KAAP,IAAgB,QAAjB,GAA6B,CAACA,KAAD,EAAQA,KAAR,CAA7B,GAA8CA,KAAtD;AACA,QAAI,CAAC/B,MAAL,EACIA,MAAM,GAAG7D,EAAE,CAACkE,IAAH,CAAQvC,GAAG,CAAC,CAAD,CAAH,CAAOG,MAAf,EAAuB,CAAvB,CAAT;AACJ,QAAIuD,EAAE,GAAIxB,MAAD,GAAW1D,GAAG,CAAC0G,eAAf,GAAiC1G,GAAG,CAAC2G,aAA9C;AACA,QAAIC,IAAI,GAAGtG,IAAI,CAACuG,GAAL,CAASJ,CAAC,CAAC,CAAD,CAAV,CAAX;AACA,QAAIK,IAAI,GAAGxG,IAAI,CAACuG,GAAL,CAASJ,CAAC,CAAC,CAAD,CAAV,CAAX;;AACA,SAAK,IAAI/E,CAAC,GAAG,CAAR,EAAWX,GAAG,GAAGS,GAAG,CAACG,MAA1B,EAAkCD,CAAC,GAAGX,GAAtC,EAA2CW,CAAC,EAA5C,EAAgD;AAC5C,UAAIT,CAAC,GAAIiD,IAAD,GAAS1C,GAAG,CAACE,CAAD,CAAH,CAAO2E,KAAP,CAAanC,IAAb,CAAT,GAA8B1C,GAAG,CAACE,CAAD,CAAzC;AACAT,MAAAA,CAAC,CAACqF,EAAF,CAAKtG,GAAG,CAACuG,WAAJ,CAAgBtF,CAAhB,EAAmBiE,EAAE,CAAC0B,IAAD,EAAOE,IAAP,EAAapD,MAAb,CAArB,CAAL;AACH;;AACD,WAAOjB,IAAP;AACH;;AACD,SAAOsE,SAAP,CAAiBrB,EAAjB,EAAqBsB,IAArB,EAA2B9C,IAA3B,EAAiC;AAC7B,QAAI1C,GAAG,GAAI,CAACmE,KAAK,CAACC,OAAN,CAAcF,EAAd,CAAF,GAAuB,CAACA,EAAD,CAAvB,GAA8BA,EAAxC;AACA,QAAIuB,GAAG,GAAGjH,GAAG,CAACkH,iBAAJ,CAAsBF,IAAI,CAAC,CAAD,CAA1B,EAA+BA,IAAI,CAAC,CAAD,CAAnC,CAAV;;AACA,SAAK,IAAItF,CAAC,GAAG,CAAR,EAAWX,GAAG,GAAGS,GAAG,CAACG,MAA1B,EAAkCD,CAAC,GAAGX,GAAtC,EAA2CW,CAAC,EAA5C,EAAgD;AAC5C,UAAIT,CAAC,GAAIiD,IAAD,GAAS1C,GAAG,CAACE,CAAD,CAAH,CAAO2E,KAAP,CAAanC,IAAb,CAAT,GAA8B1C,GAAG,CAACE,CAAD,CAAzC;AACAT,MAAAA,CAAC,CAACqF,EAAF,CAAKtG,GAAG,CAACuG,WAAJ,CAAgBtF,CAAhB,EAAmBgG,GAAnB,CAAL;AACH;;AACD,WAAOxE,IAAP;AACH;;AACD,SAAO0E,QAAP,GAAkB;AACd,QAAIhB,GAAG,GAAG,IAAIiB,YAAJ,CAAiB,GAAjB,CAAV;;AACA,SAAK,IAAI1F,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAG,GAApB,EAAyBA,CAAC,EAA1B,EACIyE,GAAG,CAACzE,CAAD,CAAH,GAASpB,IAAI,CAAC6F,GAAL,CAASzE,CAAC,GAAGpB,IAAI,CAAC+G,EAAT,GAAc,GAAvB,CAAT;;AACJ,QAAIC,IAAI,GAAIC,GAAD,IAASpB,GAAG,CAAC7F,IAAI,CAACkH,KAAL,CAAW/E,IAAI,CAACC,UAAL,CAAgBD,IAAI,CAACQ,QAAL,CAAcsE,GAAd,CAAhB,CAAX,CAAD,CAAvB;;AACA,WAAO;AAAEE,MAAAA,KAAK,EAAEtB,GAAT;AAAcA,MAAAA,GAAG,EAAEmB;AAAnB,KAAP;AACH;;AACD,SAAOI,QAAP,GAAkB;AACd,QAAItB,GAAG,GAAG,IAAIgB,YAAJ,CAAiB,GAAjB,CAAV;;AACA,SAAK,IAAI1F,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAG,GAApB,EAAyBA,CAAC,EAA1B,EACI0E,GAAG,CAAC1E,CAAD,CAAH,GAASpB,IAAI,CAAC8F,GAAL,CAAS1E,CAAC,GAAGpB,IAAI,CAAC+G,EAAT,GAAc,GAAvB,CAAT;;AACJ,QAAIC,IAAI,GAAIC,GAAD,IAASnB,GAAG,CAAC9F,IAAI,CAACkH,KAAL,CAAW/E,IAAI,CAACC,UAAL,CAAgBD,IAAI,CAACQ,QAAL,CAAcsE,GAAd,CAAhB,CAAX,CAAD,CAAvB;;AACA,WAAO;AAAEE,MAAAA,KAAK,EAAErB,GAAT;AAAcA,MAAAA,GAAG,EAAEkB;AAAnB,KAAP;AACH;;AAvJa;AAyJlB,OAAO,MAAMrF,OAAN,CAAc;AACjB,SAAO0F,MAAP,CAAclH,CAAd,EAAiBgB,CAAC,GAAG,CAArB,EAAwB;AACpB,WAAOA,CAAC,GAAGhB,CAAX;AACH;;AACD,SAAOmH,WAAP,CAAmBnH,CAAnB,EAAsBgB,CAAC,GAAG,CAA1B,EAA6B;AACzB,WAAOA,CAAC,GAAGhB,CAAJ,GAAQA,CAAf;AACH;;AACD,SAAOoH,YAAP,CAAoBpH,CAApB,EAAuBgB,CAAC,GAAG,CAA3B,EAA8B;AAC1B,WAAO,CAACA,CAAD,GAAKhB,CAAL,IAAUA,CAAC,GAAG,CAAd,CAAP;AACH;;AACD,SAAOqH,cAAP,CAAsBrH,CAAtB,EAAyBgB,CAAC,GAAG,CAA7B,EAAgC;AAC5B,QAAIsG,EAAE,GAAGtH,CAAC,GAAG,CAAb;AACA,WAAQA,CAAC,GAAG,GAAL,GAAYgB,CAAC,GAAG,CAAJ,GAAQhB,CAAR,GAAYA,CAAZ,GAAgB,CAA5B,GAAgC,CAACgB,CAAD,GAAK,CAAL,IAAU,CAACsG,EAAE,GAAG,CAAN,KAAYA,EAAE,GAAG,CAAjB,IAAsB,CAAhC,CAAvC;AACH;;AACD,SAAOC,OAAP,CAAevH,CAAf,EAAkBgB,CAAC,GAAG,CAAtB,EAAyB;AACrB,WAAOA,CAAC,GAAGhB,CAAJ,GAAQA,CAAR,GAAYA,CAAnB;AACH;;AACD,SAAOwH,QAAP,CAAgBxH,CAAhB,EAAmBgB,CAAC,GAAG,CAAvB,EAA0B;AACtB,QAAIsG,EAAE,GAAGtH,CAAC,GAAG,CAAb;AACA,WAAOgB,CAAC,IAAIsG,EAAE,GAAGA,EAAL,GAAUA,EAAV,GAAe,CAAnB,CAAR;AACH;;AACD,SAAOG,UAAP,CAAkBzH,CAAlB,EAAqBgB,CAAC,GAAG,CAAzB,EAA4B;AACxB,QAAIsG,EAAE,GAAGtH,CAAC,GAAG,CAAb;AACA,WAAQA,CAAC,GAAG,GAAL,GAAYgB,CAAC,GAAG,CAAJ,GAAQsG,EAAR,GAAaA,EAAb,GAAkBA,EAA9B,GAAmCtG,CAAC,GAAG,CAAJ,IAAS,CAACsG,EAAE,GAAG,CAAN,KAAYA,EAAE,GAAG,CAAjB,KAAuBA,EAAE,GAAG,CAA5B,IAAiC,CAA1C,CAA1C;AACH;;AACD,SAAOI,aAAP,CAAqB1H,CAArB,EAAwBgB,CAAC,GAAG,CAA5B,EAA+BR,CAAC,GAAG,IAAnC,EAAyC;AACrC,WAAOQ,CAAC,GAAGnB,IAAI,CAAC8H,GAAL,CAAS3H,CAAT,EAAY,IAAIQ,CAAhB,CAAX;AACH;;AACD,SAAOoH,cAAP,CAAsB5H,CAAtB,EAAyBgB,CAAC,GAAG,CAA7B,EAAgCR,CAAC,GAAG,IAApC,EAA0C;AACtC,WAAOQ,CAAC,GAAGnB,IAAI,CAAC8H,GAAL,CAAS3H,CAAT,EAAYQ,CAAZ,CAAX;AACH;;AACD,SAAOqH,MAAP,CAAc7H,CAAd,EAAiBgB,CAAC,GAAG,CAArB,EAAwB;AACpB,WAAO,CAACA,CAAD,GAAKnB,IAAI,CAAC6F,GAAL,CAAS1F,CAAC,GAAGd,KAAK,CAAC4I,OAAnB,CAAL,GAAmC9G,CAA1C;AACH;;AACD,SAAO+G,OAAP,CAAe/H,CAAf,EAAkBgB,CAAC,GAAG,CAAtB,EAAyB;AACrB,WAAOA,CAAC,GAAGnB,IAAI,CAAC8F,GAAL,CAAS3F,CAAC,GAAGd,KAAK,CAAC4I,OAAnB,CAAX;AACH;;AACD,SAAOrG,SAAP,CAAiBzB,CAAjB,EAAoBgB,CAAC,GAAG,CAAxB,EAA2B;AACvB,WAAO,CAACA,CAAD,GAAK,CAAL,IAAUnB,IAAI,CAAC6F,GAAL,CAAS7F,IAAI,CAAC+G,EAAL,GAAU5G,CAAnB,IAAwB,CAAlC,CAAP;AACH;;AACD,SAAOgI,YAAP,CAAoBhI,CAApB,EAAuBgB,CAAC,GAAG,CAA3B,EAA8B;AAC1B,QAAIiH,EAAE,GAAGjI,CAAC,GAAGA,CAAb;AACA,QAAIkI,EAAE,GAAGD,EAAE,GAAGA,EAAd;AACA,QAAIE,EAAE,GAAGD,EAAE,GAAGD,EAAd;AACA,WAAOjH,CAAC,IAAI,IAAImH,EAAJ,GAAS,CAAT,GAAa,KAAKD,EAAL,GAAU,CAAvB,GAA2B,KAAKD,EAAL,GAAU,CAAzC,CAAR;AACH;;AACD,SAAOG,UAAP,CAAkBpI,CAAlB,EAAqBgB,CAAC,GAAG,CAAzB,EAA4B;AACxB,WAAO,CAACA,CAAD,IAAMnB,IAAI,CAACwI,IAAL,CAAU,IAAIrI,CAAC,GAAGA,CAAlB,IAAuB,CAA7B,CAAP;AACH;;AACD,SAAOsI,WAAP,CAAmBtI,CAAnB,EAAsBgB,CAAC,GAAG,CAA1B,EAA6B;AACzB,QAAIsG,EAAE,GAAGtH,CAAC,GAAG,CAAb;AACA,WAAOgB,CAAC,GAAGnB,IAAI,CAACwI,IAAL,CAAU,IAAIf,EAAE,GAAGA,EAAnB,CAAX;AACH;;AACD,SAAOiB,aAAP,CAAqBvI,CAArB,EAAwBgB,CAAC,GAAG,CAA5B,EAA+B;AAC3B,QAAIsG,EAAE,GAAGtH,CAAC,GAAG,CAAb;AACA,WAAQA,CAAC,GAAG,GAAL,GAAY,CAACgB,CAAD,GAAK,CAAL,IAAUnB,IAAI,CAACwI,IAAL,CAAU,IAAIf,EAAE,GAAGA,EAAnB,IAAyB,CAAnC,CAAZ,GAAoDtG,CAAC,GAAG,CAAJ,IAASnB,IAAI,CAACwI,IAAL,CAAU,IAAI,CAACf,EAAE,GAAG,CAAN,KAAYA,EAAE,GAAG,CAAjB,CAAd,IAAqC,CAA9C,CAA3D;AACH;;AACD,SAAOkB,SAAP,CAAiBxI,CAAjB,EAAoBgB,CAAC,GAAG,CAAxB,EAA2BR,CAAC,GAAG,GAA/B,EAAoC;AAChC,QAAI8G,EAAE,GAAGtH,CAAC,GAAG,CAAb;AACA,QAAIgG,CAAC,GAAIxF,CAAC,GAAGtB,KAAK,CAACmD,MAAX,GAAqB,kBAA7B;AACA,WAAOrB,CAAC,IAAI,CAACnB,IAAI,CAAC8H,GAAL,CAAS,CAAT,EAAY,KAAKL,EAAjB,CAAD,GAAwBzH,IAAI,CAAC8F,GAAL,CAAS,CAAC2B,EAAE,GAAGtB,CAAN,IAAW9G,KAAK,CAACmD,MAAjB,GAA0B7B,CAAnC,CAA5B,CAAR;AACH;;AACD,SAAOiI,UAAP,CAAkBzI,CAAlB,EAAqBgB,CAAC,GAAG,CAAzB,EAA4BR,CAAC,GAAG,GAAhC,EAAqC;AACjC,QAAIwF,CAAC,GAAIxF,CAAC,GAAGtB,KAAK,CAACmD,MAAX,GAAqB,kBAA7B;AACA,WAAOrB,CAAC,IAAInB,IAAI,CAAC8H,GAAL,CAAS,CAAT,EAAY,CAAC,EAAD,GAAM3H,CAAlB,IAAuBH,IAAI,CAAC8F,GAAL,CAAS,CAAC3F,CAAC,GAAGgG,CAAL,IAAU9G,KAAK,CAACmD,MAAhB,GAAyB7B,CAAlC,CAA3B,CAAD,GAAoEQ,CAA3E;AACH;;AACD,SAAO0H,YAAP,CAAoB1I,CAApB,EAAuBgB,CAAC,GAAG,CAA3B,EAA8BR,CAAC,GAAG,GAAlC,EAAuC;AACnC,QAAI8G,EAAE,GAAGtH,CAAC,GAAG,CAAb;AACA,QAAIgG,CAAC,GAAIxF,CAAC,GAAGtB,KAAK,CAACmD,MAAX,GAAqB,kBAA7B;;AACA,QAAIrC,CAAC,GAAG,GAAR,EAAa;AACTsH,MAAAA,EAAE,IAAI,CAAN;AACA,aAAOtG,CAAC,IAAI,CAAC,GAAD,IAAQnB,IAAI,CAAC8H,GAAL,CAAS,CAAT,EAAY,KAAKL,EAAjB,IAAuBzH,IAAI,CAAC8F,GAAL,CAAS,CAAC2B,EAAE,GAAGtB,CAAN,IAAW9G,KAAK,CAACmD,MAAjB,GAA0B7B,CAAnC,CAA/B,CAAJ,CAAR;AACH,KAHD,MAIK;AACD8G,MAAAA,EAAE,IAAI,CAAN;AACA,aAAOtG,CAAC,IAAI,OAAOnB,IAAI,CAAC8H,GAAL,CAAS,CAAT,EAAY,CAAC,EAAD,GAAML,EAAlB,IAAwBzH,IAAI,CAAC8F,GAAL,CAAS,CAAC2B,EAAE,GAAGtB,CAAN,IAAW9G,KAAK,CAACmD,MAAjB,GAA0B7B,CAAnC,CAA/B,CAAJ,CAAD,GAA8EQ,CAArF;AACH;AACJ;;AACD,SAAO2H,QAAP,CAAgB3I,CAAhB,EAAmBgB,CAAC,GAAG,CAAvB,EAA0B;AACtB,WAAOA,CAAC,GAAGQ,OAAO,CAACoH,SAAR,CAAmB,IAAI5I,CAAvB,EAA2BgB,CAA3B,CAAX;AACH;;AACD,SAAO4H,SAAP,CAAiB5I,CAAjB,EAAoBgB,CAAC,GAAG,CAAxB,EAA2B;AACvB,QAAIhB,CAAC,GAAI,IAAI,IAAb,EAAoB;AAChB,aAAOgB,CAAC,IAAI,SAAShB,CAAT,GAAaA,CAAjB,CAAR;AACH,KAFD,MAGK,IAAIA,CAAC,GAAI,IAAI,IAAb,EAAoB;AACrBA,MAAAA,CAAC,IAAI,MAAM,IAAX;AACA,aAAOgB,CAAC,IAAI,SAAShB,CAAT,GAAaA,CAAb,GAAiB,IAArB,CAAR;AACH,KAHI,MAIA,IAAIA,CAAC,GAAI,MAAM,IAAf,EAAsB;AACvBA,MAAAA,CAAC,IAAI,OAAO,IAAZ;AACA,aAAOgB,CAAC,IAAI,SAAShB,CAAT,GAAaA,CAAb,GAAiB,MAArB,CAAR;AACH,KAHI,MAIA;AACDA,MAAAA,CAAC,IAAI,QAAQ,IAAb;AACA,aAAOgB,CAAC,IAAI,SAAShB,CAAT,GAAaA,CAAb,GAAiB,QAArB,CAAR;AACH;AACJ;;AACD,SAAO6I,WAAP,CAAmB7I,CAAnB,EAAsBgB,CAAC,GAAG,CAA1B,EAA6B;AACzB,WAAQhB,CAAC,GAAG,GAAL,GAAYwB,OAAO,CAACmH,QAAR,CAAiB3I,CAAC,GAAG,CAArB,EAAwBgB,CAAxB,IAA6B,CAAzC,GAA6CQ,OAAO,CAACoH,SAAR,CAAkB5I,CAAC,GAAG,CAAJ,GAAQ,CAA1B,EAA6BgB,CAA7B,IAAkC,CAAlC,GAAsCA,CAAC,GAAG,CAA9F;AACH;;AACD,SAAO8H,OAAP,CAAe9I,CAAf,EAAkBgB,CAAC,GAAG,CAAtB,EAAyBR,CAAC,GAAG,EAA7B,EAAiC;AAC7B,QAAI6C,CAAC,GAAG7C,CAAC,IAAIR,CAAC,GAAG,GAAR,CAAT;AACA,WAAOgB,CAAC,IAAI,IAAInB,IAAI,CAACkJ,GAAL,CAAS,CAAC1F,CAAV,CAAR,CAAR;AACH;;AACD,SAAO2F,UAAP,CAAkBhJ,CAAlB,EAAqBgB,CAAC,GAAG,CAAzB,EAA4BR,CAAC,GAAG,GAAhC,EAAqC;AACjCA,IAAAA,CAAC,GAAGX,IAAI,CAACO,GAAL,CAASlB,KAAK,CAAC+J,OAAf,EAAwBpJ,IAAI,CAACM,GAAL,CAAS,IAAIjB,KAAK,CAAC+J,OAAnB,EAA4BzI,CAA5B,CAAxB,CAAJ;AACAA,IAAAA,CAAC,GAAG,KAAK,IAAIA,CAAT,CAAJ;AACA,QAAI0I,CAAC,GAAG,KAAK,IAAIrJ,IAAI,CAACkJ,GAAL,CAAU,CAAC/I,CAAC,GAAG,GAAL,IAAYQ,CAAZ,GAAgB,CAAC,CAA3B,CAAT,CAAR;AACA,QAAI2I,CAAC,GAAG,KAAK,IAAItJ,IAAI,CAACkJ,GAAL,CAASvI,CAAT,CAAT,CAAR;AACA,QAAI4I,CAAC,GAAG,KAAK,IAAIvJ,IAAI,CAACkJ,GAAL,CAAS,CAACvI,CAAV,CAAT,CAAR;AACA,WAAOQ,CAAC,IAAIkI,CAAC,GAAGC,CAAR,CAAD,IAAeC,CAAC,GAAGD,CAAnB,CAAP;AACH;;AACD,SAAOE,IAAP,CAAYrJ,CAAZ,EAAegB,CAAC,GAAG,CAAnB,EAAsBR,CAAC,GAAG,GAA1B,EAA+B;AAC3B,QAAKR,CAAC,GAAG,GAAT,EAAe;AACX,aAAOgB,CAAC,GAAInB,IAAI,CAAC8H,GAAL,CAAS,IAAI3H,CAAb,EAAgB,IAAIQ,CAApB,CAAL,GAA+B,CAAtC;AACH,KAFD,MAGK;AACD,aAAOQ,CAAC,IAAI,IAAKnB,IAAI,CAAC8H,GAAL,CAAS,KAAK,IAAI3H,CAAT,CAAT,EAAsB,IAAIQ,CAA1B,CAAD,GAAiC,CAAzC,CAAR;AACH;AACJ;;AACD,SAAO8I,eAAP,CAAuBtJ,CAAvB,EAA0BgB,CAAC,GAAG,CAA9B,EAAiCR,CAAC,GAAG,CAAC,IAAD,EAAO,IAAP,CAArC,EAAmD;AAC/C,QAAId,CAAC,GAAI,OAAOc,CAAP,IAAY,QAAb,GAAyBA,CAAC,CAAC,CAAD,CAA1B,GAAgCA,CAAxC;AACA,QAAIb,CAAC,GAAI,OAAOa,CAAP,IAAY,QAAb,GAAyBA,CAAC,CAAC,CAAD,CAA1B,GAAgC,GAAxC;AACA,QAAI+I,IAAI,GAAG,IAAI,IAAI7J,CAAnB;;AACA,QAAI6J,IAAI,KAAK,CAAb,EAAgB;AACZA,MAAAA,IAAI,GAAGrK,KAAK,CAAC+J,OAAb;AACH;;AACD,QAAI5F,CAAC,GAAG,CAACxD,IAAI,CAACwI,IAAL,CAAU3I,CAAC,GAAGA,CAAJ,GAAQ6J,IAAI,GAAGvJ,CAAzB,IAA8BN,CAA/B,IAAoC6J,IAA5C;AACA,WAAOvI,CAAC,IAAI,CAAC,IAAI,IAAIrB,CAAT,KAAe0D,CAAC,GAAGA,CAAnB,IAAyB,IAAI1D,CAAL,GAAU0D,CAAtC,CAAR;AACH;;AACD,SAAOmG,WAAP,CAAmBxJ,CAAnB,EAAsBgB,CAAC,GAAG,CAA1B,EAA6BgD,EAAE,GAAG,CAAC,GAAD,EAAM,GAAN,CAAlC,EAA8CC,EAAE,GAAG,CAAC,GAAD,EAAM,GAAN,CAAnD,EAA+D;AAC3D,QAAIwF,KAAK,GAAG,IAAIpK,KAAJ,CAAU,IAAID,EAAJ,CAAO,CAAP,EAAU,CAAV,CAAV,EAAwB,IAAIA,EAAJ,CAAO4E,EAAP,CAAxB,EAAoC,IAAI5E,EAAJ,CAAO6E,EAAP,CAApC,EAAgD,IAAI7E,EAAJ,CAAO,CAAP,EAAU,CAAV,CAAhD,CAAZ;AACA,WAAO4B,CAAC,GAAG7B,KAAK,CAACuK,UAAN,CAAiB,IAAItK,EAAJ,CAAOY,CAAC,GAAGA,CAAJ,GAAQA,CAAf,EAAkBA,CAAC,GAAGA,CAAtB,EAAyBA,CAAzB,EAA4B,CAA5B,CAAjB,EAAiDb,KAAK,CAACwK,aAAN,CAAoBF,KAApB,CAAjD,EAA6E9F,CAAxF;AACH;;AACD,SAAOiG,eAAP,CAAuB5J,CAAvB,EAA0BgB,CAAC,GAAG,CAA9B,EAAiCgD,EAAE,GAAG,CAAC,GAAD,EAAM,IAAN,CAAtC,EAAmD;AAC/C,QAAItE,CAAC,GAAGG,IAAI,CAACM,GAAL,CAAS,IAAIjB,KAAK,CAAC+J,OAAnB,EAA4BpJ,IAAI,CAACO,GAAL,CAASlB,KAAK,CAAC+J,OAAf,EAAwBjF,EAAE,CAAC,CAAD,CAA1B,CAA5B,CAAR;AACA,QAAIrE,CAAC,GAAGE,IAAI,CAACM,GAAL,CAAS,CAAT,EAAYN,IAAI,CAACO,GAAL,CAAS,CAAT,EAAY4D,EAAE,CAAC,CAAD,CAAd,CAAZ,CAAR;AACA,QAAIkF,CAAC,GAAG,CAAC,IAAIvJ,CAAL,KAAW,IAAID,CAAf,IAAqBC,CAAC,GAAGD,CAAjC;AACA,QAAIyJ,CAAC,GAAG,CAACD,CAAC,IAAIxJ,CAAC,GAAGA,CAAR,CAAD,GAAcC,CAAf,IAAoBD,CAA5B;AACA,QAAIiE,CAAC,GAAGuF,CAAC,IAAIlJ,CAAC,GAAGA,CAAR,CAAD,GAAcmJ,CAAC,GAAGnJ,CAA1B;AACA,WAAOgB,CAAC,GAAGnB,IAAI,CAACM,GAAL,CAAS,CAAT,EAAYN,IAAI,CAACO,GAAL,CAAS,CAAT,EAAYuD,CAAZ,CAAZ,CAAX;AACH;;AACD,SAAOkG,KAAP,CAAa7J,CAAb,EAAgBgB,CAAC,GAAG,CAApB,EAAuBR,CAAC,GAAG,GAA3B,EAAgC;AAC5B,WAAQR,CAAC,GAAGQ,CAAL,GAAUQ,CAAV,GAAc,CAArB;AACH;;AACD,SAAO8I,IAAP,CAAYrF,EAAZ,EAAgBsF,KAAhB,EAAuB/J,CAAvB,EAA0BgB,CAA1B,EAA6B,GAAGgJ,IAAhC,EAAsC;AAClC,QAAIhE,CAAC,GAAG,IAAI+D,KAAZ;AACA,QAAIE,EAAE,GAAGpK,IAAI,CAACkH,KAAL,CAAW/G,CAAC,GAAGgG,CAAf,IAAoBA,CAA7B;AACA,WAAOvB,EAAE,CAACwF,EAAD,EAAKjJ,CAAL,EAAQ,GAAGgJ,IAAX,CAAT;AACH;;AAtJgB;AAwJrB,OAAO,MAAME,KAAN,CAAY;AACfC,EAAAA,WAAW,CAACC,CAAD,EAAI;AACX,SAAKC,KAAL,GAAa,CAAb;AACA,SAAKC,OAAL,GAAejL,KAAK,CAACkL,WAAN,CAAkBH,CAAlB,CAAf;AACA,SAAKI,IAAL;AACH;;AACD,MAAIpK,GAAJ,GAAU;AAAE,WAAO,KAAKqK,IAAL,CAAUC,KAAV,EAAP;AAA2B;;AACvC,MAAIvK,GAAJ,GAAU;AAAE,WAAO,KAAKwK,IAAL,CAAUD,KAAV,EAAP;AAA2B;;AACvC,MAAIE,SAAJ,GAAgB;AAAE,WAAO,KAAKC,IAAL,CAAUH,KAAV,EAAP;AAA2B;;AAC7CF,EAAAA,IAAI,GAAG;AACH,QAAI,CAAC,KAAKF,OAAV,EACI;AACJ,QAAIQ,IAAI,GAAG,KAAKR,OAAL,CAAa,CAAb,EAAgBpJ,MAA3B;AACA,SAAKmJ,KAAL,GAAaS,IAAb;AACA,QAAI1K,GAAG,GAAG,IAAIhB,EAAJ,CAAO0L,IAAP,CAAV;AACA,QAAI3K,GAAG,GAAG,IAAIf,EAAJ,CAAO0L,IAAP,CAAV;AACA,QAAIC,GAAG,GAAG,IAAI3L,EAAJ,CAAO0L,IAAP,CAAV;;AACA,SAAK,IAAI7J,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAG6J,IAApB,EAA0B7J,CAAC,EAA3B,EAA+B;AAC3Bb,MAAAA,GAAG,CAACa,CAAD,CAAH,GAAS/B,KAAK,CAACiB,GAAf;AACAA,MAAAA,GAAG,CAACc,CAAD,CAAH,GAAS/B,KAAK,CAACkB,GAAf;AACA2K,MAAAA,GAAG,CAAC9J,CAAD,CAAH,GAAS,CAAT;;AACA,UAAI+E,CAAC,GAAG,KAAKsE,OAAL,CAAaU,QAAb,CAAsB/J,CAAtB,CAAR;;AACA,WAAK,IAAIoE,CAAC,GAAG,CAAR,EAAW/E,GAAG,GAAG0F,CAAC,CAAC9E,MAAxB,EAAgCmE,CAAC,GAAG/E,GAApC,EAAyC+E,CAAC,EAA1C,EAA8C;AAC1CjF,QAAAA,GAAG,CAACa,CAAD,CAAH,GAASpB,IAAI,CAACO,GAAL,CAASA,GAAG,CAACa,CAAD,CAAZ,EAAiB+E,CAAC,CAACX,CAAD,CAAlB,CAAT;AACAlF,QAAAA,GAAG,CAACc,CAAD,CAAH,GAASpB,IAAI,CAACM,GAAL,CAASA,GAAG,CAACc,CAAD,CAAZ,EAAiB+E,CAAC,CAACX,CAAD,CAAlB,CAAT;AACA0F,QAAAA,GAAG,CAAC9J,CAAD,CAAH,GAASb,GAAG,CAACa,CAAD,CAAH,GAASd,GAAG,CAACc,CAAD,CAArB;AACH;AACJ;;AACD,SAAKwJ,IAAL,GAAYrK,GAAZ;AACA,SAAKuK,IAAL,GAAYxK,GAAZ;AACA,SAAK0K,IAAL,GAAYE,GAAZ;AACA,WAAO,IAAP;AACH;;AACDE,EAAAA,KAAK,CAAC9K,GAAD,EAAMC,GAAN,EAAW8K,OAAX,EAAoB;AACrB,QAAIC,MAAM,GAAG,IAAI9L,KAAJ,EAAb;;AACA,SAAK,IAAI4B,CAAC,GAAG,CAAR,EAAWX,GAAG,GAAG,KAAKgK,OAAL,CAAapJ,MAAnC,EAA2CD,CAAC,GAAGX,GAA/C,EAAoDW,CAAC,EAArD,EAAyD;AACrD,UAAImJ,CAAC,GAAG,KAAKE,OAAL,CAAarJ,CAAb,CAAR;AACA,UAAIJ,CAAC,GAAG,IAAIzB,EAAJ,CAAO,KAAKiL,KAAZ,CAAR;;AACA,WAAK,IAAIhF,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAG,KAAKgF,KAAzB,EAAgChF,CAAC,EAAjC,EAAqC;AACjCxE,QAAAA,CAAC,CAACwE,CAAD,CAAD,GAAQ6F,OAAO,IAAIA,OAAO,CAAC7F,CAAD,CAAnB,GAA0B+E,CAAC,CAAC/E,CAAD,CAA3B,GAAiC7F,GAAG,CAACkC,UAAJ,CAAe0I,CAAC,CAAC/E,CAAD,CAAhB,EAAqB,KAAKsF,IAAL,CAAUtF,CAAV,CAArB,EAAmC,KAAKoF,IAAL,CAAUpF,CAAV,CAAnC,EAAiDlF,GAAjD,EAAsDC,GAAtD,CAAxC;AACH;;AACD+K,MAAAA,MAAM,CAACC,IAAP,CAAYvK,CAAZ;AACH;;AACD,WAAOsK,MAAP;AACH;;AACDE,EAAAA,MAAM,CAACjB,CAAD,EAAIkB,MAAM,GAAG,IAAb,EAAmB;AACrB,QAAIlB,CAAC,CAAC,CAAD,CAAD,CAAKlJ,MAAL,KAAgB,KAAKmJ,KAAzB,EACI,MAAM,IAAItI,KAAJ,CAAW,2BAA0B,KAAKsI,KAAM,4BAA2BD,CAAC,CAAC,CAAD,CAAD,CAAKlJ,MAAO,0BAAvF,CAAN;AACJ,SAAKoJ,OAAL,GAAe,KAAKA,OAAL,CAAaiB,MAAb,CAAoBnB,CAApB,CAAf;AACA,QAAIkB,MAAJ,EACI,KAAKd,IAAL;AACJ,WAAO,IAAP;AACH;;AACDgB,EAAAA,KAAK,CAACC,KAAD,EAAQ;AACT,QAAIrB,CAAC,GAAG,IAAI/K,KAAJ,EAAR;;AACA,SAAK,IAAI4B,CAAC,GAAG,CAAb,EAAgBA,CAAC,IAAIwK,KAArB,EAA4BxK,CAAC,EAA7B,EAAiC;AAC7B,UAAIT,CAAC,GAAG,IAAIpB,EAAJ,CAAO,KAAKiL,KAAZ,CAAR;;AACA,WAAK,IAAIhF,CAAC,GAAG,CAAR,EAAW/E,GAAG,GAAG,KAAKmK,IAAL,CAAUvJ,MAAhC,EAAwCmE,CAAC,GAAG/E,GAA5C,EAAiD+E,CAAC,EAAlD,EAAsD;AAClD7E,QAAAA,CAAC,CAAC6E,CAAD,CAAD,GAAO7F,GAAG,CAACO,IAAJ,CAAS,KAAK4K,IAAL,CAAUtF,CAAV,CAAT,EAAuB,KAAKoF,IAAL,CAAUpF,CAAV,CAAvB,EAAqCpE,CAAC,GAAGwK,KAAzC,CAAP;AACH;;AACDrB,MAAAA,CAAC,CAACgB,IAAF,CAAO5K,CAAP;AACH;;AACD,WAAO4J,CAAP;AACH;;AA/Dc","sourcesContent":["/*! Source code licensed under Apache License 2.0. Copyright Â© 2017-current William Ngan and contributors. (https://github.com/williamngan/pts) */\nimport { Const } from \"./Util\";\nimport { Curve } from \"./Op\";\nimport { Pt, Group } from \"./Pt\";\nimport { Vec, Mat } from \"./LinearAlgebra\";\nexport class Num {\n    static equals(a, b, threshold = 0.00001) {\n        return Math.abs(a - b) < threshold;\n    }\n    static lerp(a, b, t) {\n        return (1 - t) * a + t * b;\n    }\n    static clamp(val, min, max) {\n        return Math.max(min, Math.min(max, val));\n    }\n    static boundValue(val, min, max) {\n        let len = Math.abs(max - min);\n        let a = val % len;\n        if (a > max)\n            a -= len;\n        else if (a < min)\n            a += len;\n        return a;\n    }\n    static within(p, a, b) {\n        return p >= Math.min(a, b) && p <= Math.max(a, b);\n    }\n    static randomRange(a, b = 0) {\n        let r = (a > b) ? (a - b) : (b - a);\n        return a + Math.random() * r;\n    }\n    static normalizeValue(n, a, b) {\n        let min = Math.min(a, b);\n        let max = Math.max(a, b);\n        return (n - min) / (max - min);\n    }\n    static sum(pts) {\n        let c = new Pt(pts[0]);\n        for (let i = 1, len = pts.length; i < len; i++) {\n            Vec.add(c, pts[i]);\n        }\n        return c;\n    }\n    static average(pts) {\n        return Num.sum(pts).divide(pts.length);\n    }\n    static cycle(t, method = Shaping.sineInOut) {\n        return method(t > 0.5 ? 2 - t * 2 : t * 2);\n    }\n    static mapToRange(n, currA, currB, targetA, targetB) {\n        if (currA == currB)\n            throw new Error(\"[currMin, currMax] must define a range that is not zero\");\n        let min = Math.min(targetA, targetB);\n        let max = Math.max(targetA, targetB);\n        return Num.normalizeValue(n, currA, currB) * (max - min) + min;\n    }\n}\nexport class Geom {\n    static boundAngle(angle) {\n        return Num.boundValue(angle, 0, 360);\n    }\n    static boundRadian(radian) {\n        return Num.boundValue(radian, 0, Const.two_pi);\n    }\n    static toRadian(angle) {\n        return angle * Const.deg_to_rad;\n    }\n    static toDegree(radian) {\n        return radian * Const.rad_to_deg;\n    }\n    static boundingBox(pts) {\n        let minPt = pts.reduce((a, p) => a.$min(p));\n        let maxPt = pts.reduce((a, p) => a.$max(p));\n        return new Group(minPt, maxPt);\n    }\n    static centroid(pts) {\n        return Num.average(pts);\n    }\n    static anchor(pts, ptOrIndex = 0, direction = \"to\") {\n        let method = (direction == \"to\") ? \"subtract\" : \"add\";\n        for (let i = 0, len = pts.length; i < len; i++) {\n            if (typeof ptOrIndex == \"number\") {\n                if (ptOrIndex !== i)\n                    pts[i][method](pts[ptOrIndex]);\n            }\n            else {\n                pts[i][method](ptOrIndex);\n            }\n        }\n    }\n    static interpolate(a, b, t = 0.5) {\n        let len = Math.min(a.length, b.length);\n        let d = Pt.make(len);\n        for (let i = 0; i < len; i++) {\n            d[i] = a[i] * (1 - t) + b[i] * t;\n        }\n        return d;\n    }\n    static perpendicular(pt, axis = Const.xy) {\n        let y = axis[1];\n        let x = axis[0];\n        let p = new Pt(pt);\n        let pa = new Pt(p);\n        pa[x] = -p[y];\n        pa[y] = p[x];\n        let pb = new Pt(p);\n        pb[x] = p[y];\n        pb[y] = -p[x];\n        return new Group(pa, pb);\n    }\n    static isPerpendicular(p1, p2) {\n        return new Pt(p1).dot(p2) === 0;\n    }\n    static withinBound(pt, boundPt1, boundPt2) {\n        for (let i = 0, len = Math.min(pt.length, boundPt1.length, boundPt2.length); i < len; i++) {\n            if (!Num.within(pt[i], boundPt1[i], boundPt2[i]))\n                return false;\n        }\n        return true;\n    }\n    static sortEdges(pts) {\n        let bounds = Geom.boundingBox(pts);\n        let center = bounds[1].add(bounds[0]).divide(2);\n        let fn = (a, b) => {\n            if (a.length < 2 || b.length < 2)\n                throw new Error(\"Pt dimension cannot be less than 2\");\n            let da = a.$subtract(center);\n            let db = b.$subtract(center);\n            if (da[0] >= 0 && db[0] < 0)\n                return 1;\n            if (da[0] < 0 && db[0] >= 0)\n                return -1;\n            if (da[0] == 0 && db[0] == 0) {\n                if (da[1] >= 0 || db[1] >= 0)\n                    return (da[1] > db[1]) ? 1 : -1;\n                return (db[1] > da[1]) ? 1 : -1;\n            }\n            let det = da.$cross2D(db);\n            if (det < 0)\n                return 1;\n            if (det > 0)\n                return -1;\n            return (da[0] * da[0] + da[1] * da[1] > db[0] * db[0] + db[1] * db[1]) ? 1 : -1;\n        };\n        return pts.sort(fn);\n    }\n    static scale(ps, scale, anchor) {\n        let pts = (!Array.isArray(ps)) ? [ps] : ps;\n        let scs = (typeof scale == \"number\") ? Pt.make(pts[0].length, scale) : scale;\n        if (!anchor)\n            anchor = Pt.make(pts[0].length, 0);\n        for (let i = 0, len = pts.length; i < len; i++) {\n            let p = pts[i];\n            for (let k = 0, lenP = p.length; k < lenP; k++) {\n                p[k] = (anchor && anchor[k]) ? anchor[k] + (p[k] - anchor[k]) * scs[k] : p[k] * scs[k];\n            }\n        }\n        return Geom;\n    }\n    static rotate2D(ps, angle, anchor, axis) {\n        let pts = (!Array.isArray(ps)) ? [ps] : ps;\n        let fn = (anchor) ? Mat.rotateAt2DMatrix : Mat.rotate2DMatrix;\n        if (!anchor)\n            anchor = Pt.make(pts[0].length, 0);\n        let cos = Math.cos(angle);\n        let sin = Math.sin(angle);\n        for (let i = 0, len = pts.length; i < len; i++) {\n            let p = (axis) ? pts[i].$take(axis) : pts[i];\n            p.to(Mat.transform2D(p, fn(cos, sin, anchor)));\n        }\n        return Geom;\n    }\n    static shear2D(ps, scale, anchor, axis) {\n        let pts = (!Array.isArray(ps)) ? [ps] : ps;\n        let s = (typeof scale == \"number\") ? [scale, scale] : scale;\n        if (!anchor)\n            anchor = Pt.make(pts[0].length, 0);\n        let fn = (anchor) ? Mat.shearAt2DMatrix : Mat.shear2DMatrix;\n        let tanx = Math.tan(s[0]);\n        let tany = Math.tan(s[1]);\n        for (let i = 0, len = pts.length; i < len; i++) {\n            let p = (axis) ? pts[i].$take(axis) : pts[i];\n            p.to(Mat.transform2D(p, fn(tanx, tany, anchor)));\n        }\n        return Geom;\n    }\n    static reflect2D(ps, line, axis) {\n        let pts = (!Array.isArray(ps)) ? [ps] : ps;\n        let mat = Mat.reflectAt2DMatrix(line[0], line[1]);\n        for (let i = 0, len = pts.length; i < len; i++) {\n            let p = (axis) ? pts[i].$take(axis) : pts[i];\n            p.to(Mat.transform2D(p, mat));\n        }\n        return Geom;\n    }\n    static cosTable() {\n        let cos = new Float64Array(360);\n        for (let i = 0; i < 360; i++)\n            cos[i] = Math.cos(i * Math.PI / 180);\n        let find = (rad) => cos[Math.floor(Geom.boundAngle(Geom.toDegree(rad)))];\n        return { table: cos, cos: find };\n    }\n    static sinTable() {\n        let sin = new Float64Array(360);\n        for (let i = 0; i < 360; i++)\n            sin[i] = Math.sin(i * Math.PI / 180);\n        let find = (rad) => sin[Math.floor(Geom.boundAngle(Geom.toDegree(rad)))];\n        return { table: sin, sin: find };\n    }\n}\nexport class Shaping {\n    static linear(t, c = 1) {\n        return c * t;\n    }\n    static quadraticIn(t, c = 1) {\n        return c * t * t;\n    }\n    static quadraticOut(t, c = 1) {\n        return -c * t * (t - 2);\n    }\n    static quadraticInOut(t, c = 1) {\n        let dt = t * 2;\n        return (t < 0.5) ? c / 2 * t * t * 4 : -c / 2 * ((dt - 1) * (dt - 3) - 1);\n    }\n    static cubicIn(t, c = 1) {\n        return c * t * t * t;\n    }\n    static cubicOut(t, c = 1) {\n        let dt = t - 1;\n        return c * (dt * dt * dt + 1);\n    }\n    static cubicInOut(t, c = 1) {\n        let dt = t * 2;\n        return (t < 0.5) ? c / 2 * dt * dt * dt : c / 2 * ((dt - 2) * (dt - 2) * (dt - 2) + 2);\n    }\n    static exponentialIn(t, c = 1, p = 0.25) {\n        return c * Math.pow(t, 1 / p);\n    }\n    static exponentialOut(t, c = 1, p = 0.25) {\n        return c * Math.pow(t, p);\n    }\n    static sineIn(t, c = 1) {\n        return -c * Math.cos(t * Const.half_pi) + c;\n    }\n    static sineOut(t, c = 1) {\n        return c * Math.sin(t * Const.half_pi);\n    }\n    static sineInOut(t, c = 1) {\n        return -c / 2 * (Math.cos(Math.PI * t) - 1);\n    }\n    static cosineApprox(t, c = 1) {\n        let t2 = t * t;\n        let t4 = t2 * t2;\n        let t6 = t4 * t2;\n        return c * (4 * t6 / 9 - 17 * t4 / 9 + 22 * t2 / 9);\n    }\n    static circularIn(t, c = 1) {\n        return -c * (Math.sqrt(1 - t * t) - 1);\n    }\n    static circularOut(t, c = 1) {\n        let dt = t - 1;\n        return c * Math.sqrt(1 - dt * dt);\n    }\n    static circularInOut(t, c = 1) {\n        let dt = t * 2;\n        return (t < 0.5) ? -c / 2 * (Math.sqrt(1 - dt * dt) - 1) : c / 2 * (Math.sqrt(1 - (dt - 2) * (dt - 2)) + 1);\n    }\n    static elasticIn(t, c = 1, p = 0.7) {\n        let dt = t - 1;\n        let s = (p / Const.two_pi) * 1.5707963267948966;\n        return c * (-Math.pow(2, 10 * dt) * Math.sin((dt - s) * Const.two_pi / p));\n    }\n    static elasticOut(t, c = 1, p = 0.7) {\n        let s = (p / Const.two_pi) * 1.5707963267948966;\n        return c * (Math.pow(2, -10 * t) * Math.sin((t - s) * Const.two_pi / p)) + c;\n    }\n    static elasticInOut(t, c = 1, p = 0.6) {\n        let dt = t * 2;\n        let s = (p / Const.two_pi) * 1.5707963267948966;\n        if (t < 0.5) {\n            dt -= 1;\n            return c * (-0.5 * (Math.pow(2, 10 * dt) * Math.sin((dt - s) * Const.two_pi / p)));\n        }\n        else {\n            dt -= 1;\n            return c * (0.5 * (Math.pow(2, -10 * dt) * Math.sin((dt - s) * Const.two_pi / p))) + c;\n        }\n    }\n    static bounceIn(t, c = 1) {\n        return c - Shaping.bounceOut((1 - t), c);\n    }\n    static bounceOut(t, c = 1) {\n        if (t < (1 / 2.75)) {\n            return c * (7.5625 * t * t);\n        }\n        else if (t < (2 / 2.75)) {\n            t -= 1.5 / 2.75;\n            return c * (7.5625 * t * t + 0.75);\n        }\n        else if (t < (2.5 / 2.75)) {\n            t -= 2.25 / 2.75;\n            return c * (7.5625 * t * t + 0.9375);\n        }\n        else {\n            t -= 2.625 / 2.75;\n            return c * (7.5625 * t * t + 0.984375);\n        }\n    }\n    static bounceInOut(t, c = 1) {\n        return (t < 0.5) ? Shaping.bounceIn(t * 2, c) / 2 : Shaping.bounceOut(t * 2 - 1, c) / 2 + c / 2;\n    }\n    static sigmoid(t, c = 1, p = 10) {\n        let d = p * (t - 0.5);\n        return c / (1 + Math.exp(-d));\n    }\n    static logSigmoid(t, c = 1, p = 0.7) {\n        p = Math.max(Const.epsilon, Math.min(1 - Const.epsilon, p));\n        p = 1 / (1 - p);\n        let A = 1 / (1 + Math.exp(((t - 0.5) * p * -2)));\n        let B = 1 / (1 + Math.exp(p));\n        let C = 1 / (1 + Math.exp(-p));\n        return c * (A - B) / (C - B);\n    }\n    static seat(t, c = 1, p = 0.5) {\n        if ((t < 0.5)) {\n            return c * (Math.pow(2 * t, 1 - p)) / 2;\n        }\n        else {\n            return c * (1 - (Math.pow(2 * (1 - t), 1 - p)) / 2);\n        }\n    }\n    static quadraticBezier(t, c = 1, p = [0.05, 0.95]) {\n        let a = (typeof p != \"number\") ? p[0] : p;\n        let b = (typeof p != \"number\") ? p[1] : 0.5;\n        let om2a = 1 - 2 * a;\n        if (om2a === 0) {\n            om2a = Const.epsilon;\n        }\n        let d = (Math.sqrt(a * a + om2a * t) - a) / om2a;\n        return c * ((1 - 2 * b) * (d * d) + (2 * b) * d);\n    }\n    static cubicBezier(t, c = 1, p1 = [0.1, 0.7], p2 = [0.9, 0.2]) {\n        let curve = new Group(new Pt(0, 0), new Pt(p1), new Pt(p2), new Pt(1, 1));\n        return c * Curve.bezierStep(new Pt(t * t * t, t * t, t, 1), Curve.controlPoints(curve)).y;\n    }\n    static quadraticTarget(t, c = 1, p1 = [0.2, 0.35]) {\n        let a = Math.min(1 - Const.epsilon, Math.max(Const.epsilon, p1[0]));\n        let b = Math.min(1, Math.max(0, p1[1]));\n        let A = (1 - b) / (1 - a) - (b / a);\n        let B = (A * (a * a) - b) / a;\n        let y = A * (t * t) - B * t;\n        return c * Math.min(1, Math.max(0, y));\n    }\n    static cliff(t, c = 1, p = 0.5) {\n        return (t > p) ? c : 0;\n    }\n    static step(fn, steps, t, c, ...args) {\n        let s = 1 / steps;\n        let tt = Math.floor(t / s) * s;\n        return fn(tt, c, ...args);\n    }\n}\nexport class Range {\n    constructor(g) {\n        this._dims = 0;\n        this._source = Group.fromPtArray(g);\n        this.calc();\n    }\n    get max() { return this._max.clone(); }\n    get min() { return this._min.clone(); }\n    get magnitude() { return this._mag.clone(); }\n    calc() {\n        if (!this._source)\n            return;\n        let dims = this._source[0].length;\n        this._dims = dims;\n        let max = new Pt(dims);\n        let min = new Pt(dims);\n        let mag = new Pt(dims);\n        for (let i = 0; i < dims; i++) {\n            max[i] = Const.min;\n            min[i] = Const.max;\n            mag[i] = 0;\n            let s = this._source.zipSlice(i);\n            for (let k = 0, len = s.length; k < len; k++) {\n                max[i] = Math.max(max[i], s[k]);\n                min[i] = Math.min(min[i], s[k]);\n                mag[i] = max[i] - min[i];\n            }\n        }\n        this._max = max;\n        this._min = min;\n        this._mag = mag;\n        return this;\n    }\n    mapTo(min, max, exclude) {\n        let target = new Group();\n        for (let i = 0, len = this._source.length; i < len; i++) {\n            let g = this._source[i];\n            let n = new Pt(this._dims);\n            for (let k = 0; k < this._dims; k++) {\n                n[k] = (exclude && exclude[k]) ? g[k] : Num.mapToRange(g[k], this._min[k], this._max[k], min, max);\n            }\n            target.push(n);\n        }\n        return target;\n    }\n    append(g, update = true) {\n        if (g[0].length !== this._dims)\n            throw new Error(`Dimensions don't match. ${this._dims} dimensions in Range and ${g[0].length} provided in parameter. `);\n        this._source = this._source.concat(g);\n        if (update)\n            this.calc();\n        return this;\n    }\n    ticks(count) {\n        let g = new Group();\n        for (let i = 0; i <= count; i++) {\n            let p = new Pt(this._dims);\n            for (let k = 0, len = this._max.length; k < len; k++) {\n                p[k] = Num.lerp(this._min[k], this._max[k], i / count);\n            }\n            g.push(p);\n        }\n        return g;\n    }\n}\n//# sourceMappingURL=Num.js.map"]},"metadata":{},"sourceType":"module"}