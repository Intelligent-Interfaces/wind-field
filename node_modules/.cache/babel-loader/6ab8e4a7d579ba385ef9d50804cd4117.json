{"ast":null,"code":"import * as tslib_1 from \"tslib\";\nimport { Gain } from \"../../core/context/Gain\";\nimport { Param } from \"../../core/context/Param\";\nimport { ToneAudioNode } from \"../../core/context/ToneAudioNode\";\nimport { optionsFromArguments } from \"../../core/util/Defaults\";\nimport { readOnly } from \"../../core/util/Interface\";\nimport { AudioToGain } from \"../../signal/AudioToGain\";\nimport { Scale } from \"../../signal/Scale\";\nimport { connectSignal, Signal } from \"../../signal/Signal\";\nimport { Zero } from \"../../signal/Zero\";\nimport { Oscillator } from \"./Oscillator\";\n/**\n * LFO stands for low frequency oscillator. LFO produces an output signal\n * which can be attached to an AudioParam or Tone.Signal\n * in order to modulate that parameter with an oscillator. The LFO can\n * also be synced to the transport to start/stop and change when the tempo changes.\n *\n * @example\n * import { Filter, LFO, Noise } from \"tone\";\n * const filter = new Filter().toDestination();\n * const noise = new Noise().connect(filter).start();\n * const lfo = new LFO(\"4n\", 400, 4000).start();\n * // have it control the filters cutoff\n * lfo.connect(filter.frequency);\n * @category Source\n */\n\nvar LFO =\n/** @class */\nfunction (_super) {\n  tslib_1.__extends(LFO, _super);\n\n  function LFO() {\n    var _this = _super.call(this, optionsFromArguments(LFO.getDefaults(), arguments, [\"frequency\", \"min\", \"max\"])) || this;\n\n    _this.name = \"LFO\";\n    /**\n     * The value that the LFO outputs when it's stopped\n     */\n\n    _this._stoppedValue = 0;\n    /**\n     * A private placeholder for the units\n     */\n\n    _this._units = \"number\";\n    /**\n     * If the input value is converted using the [[units]]\n     */\n\n    _this.convert = true;\n    /**\n     * Private methods borrowed from Param\n     */\n    // @ts-ignore\n\n    _this._fromType = Param.prototype._fromType; // @ts-ignore\n\n    _this._toType = Param.prototype._toType; // @ts-ignore\n\n    _this._is = Param.prototype._is; // @ts-ignore\n\n    _this._clampValue = Param.prototype._clampValue;\n    var options = optionsFromArguments(LFO.getDefaults(), arguments, [\"frequency\", \"min\", \"max\"]); // @ts-ignore\n\n    _this._oscillator = new Oscillator({\n      context: _this.context,\n      frequency: options.frequency,\n      type: options.type\n    });\n    _this.frequency = _this._oscillator.frequency;\n    _this._amplitudeGain = new Gain({\n      context: _this.context,\n      gain: options.amplitude,\n      units: \"normalRange\"\n    });\n    _this.amplitude = _this._amplitudeGain.gain;\n    _this._stoppedSignal = new Signal({\n      context: _this.context,\n      units: \"audioRange\",\n      value: 0\n    });\n    _this._zeros = new Zero({\n      context: _this.context\n    });\n    _this._a2g = new AudioToGain({\n      context: _this.context\n    });\n    _this._scaler = _this.output = new Scale({\n      context: _this.context,\n      max: options.max,\n      min: options.min\n    });\n    _this.min = options.min;\n    _this.max = options.max;\n    _this.units = options.units; // connect it up\n\n    _this._oscillator.chain(_this._a2g, _this._amplitudeGain, _this._scaler);\n\n    _this._zeros.connect(_this._a2g);\n\n    _this._stoppedSignal.connect(_this._a2g);\n\n    readOnly(_this, [\"amplitude\", \"frequency\"]);\n    _this.phase = options.phase;\n    return _this;\n  }\n\n  LFO.getDefaults = function () {\n    return Object.assign(ToneAudioNode.getDefaults(), {\n      amplitude: 1,\n      frequency: \"4n\",\n      max: 1,\n      min: 0,\n      phase: 0,\n      type: \"sine\",\n      units: \"number\"\n    });\n  };\n  /**\n   * Start the LFO.\n   * @param time The time the LFO will start\n   */\n\n\n  LFO.prototype.start = function (time) {\n    time = this.toSeconds(time);\n\n    this._stoppedSignal.setValueAtTime(0, time);\n\n    this._oscillator.start(time);\n\n    return this;\n  };\n  /**\n   * Stop the LFO.\n   * @param  time The time the LFO will stop\n   */\n\n\n  LFO.prototype.stop = function (time) {\n    time = this.toSeconds(time);\n\n    this._stoppedSignal.setValueAtTime(this._stoppedValue, time);\n\n    this._oscillator.stop(time);\n\n    return this;\n  };\n  /**\n   * Sync the start/stop/pause to the transport\n   * and the frequency to the bpm of the transport\n   * @example\n   * import { LFO } from \"tone\";\n   * const lfo = new LFO(\"8n\");\n   * lfo.sync().start(0);\n   * // the rate of the LFO will always be an eighth note, even as the tempo changes\n   */\n\n\n  LFO.prototype.sync = function () {\n    this._oscillator.sync();\n\n    this._oscillator.syncFrequency();\n\n    return this;\n  };\n  /**\n   * unsync the LFO from transport control\n   */\n\n\n  LFO.prototype.unsync = function () {\n    this._oscillator.unsync();\n\n    this._oscillator.unsyncFrequency();\n\n    return this;\n  };\n\n  Object.defineProperty(LFO.prototype, \"min\", {\n    /**\n     * The minimum output of the LFO.\n     */\n    get: function () {\n      return this._toType(this._scaler.min);\n    },\n    set: function (min) {\n      min = this._fromType(min);\n      this._scaler.min = min;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(LFO.prototype, \"max\", {\n    /**\n     * The maximum output of the LFO.\n     */\n    get: function () {\n      return this._toType(this._scaler.max);\n    },\n    set: function (max) {\n      max = this._fromType(max);\n      this._scaler.max = max;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(LFO.prototype, \"type\", {\n    /**\n     * The type of the oscillator: See [[Oscillator.type]]\n     */\n    get: function () {\n      return this._oscillator.type;\n    },\n    set: function (type) {\n      this._oscillator.type = type;\n      this._stoppedValue = this._oscillator.getInitialValue();\n      this._stoppedSignal.value = this._stoppedValue;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(LFO.prototype, \"phase\", {\n    /**\n     * The phase of the LFO.\n     */\n    get: function () {\n      return this._oscillator.phase;\n    },\n    set: function (phase) {\n      this._oscillator.phase = phase;\n      this._stoppedValue = this._oscillator.getInitialValue();\n      this._stoppedSignal.value = this._stoppedValue;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(LFO.prototype, \"units\", {\n    /**\n     * The output units of the LFO.\n     */\n    get: function () {\n      return this._units;\n    },\n    set: function (val) {\n      var currentMin = this.min;\n      var currentMax = this.max; // convert the min and the max\n\n      this._units = val;\n      this.min = currentMin;\n      this.max = currentMax;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(LFO.prototype, \"state\", {\n    /**\n     * Returns the playback state of the source, either \"started\" or \"stopped\".\n     */\n    get: function () {\n      return this._oscillator.state;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  /**\n   * @param node the destination to connect to\n   * @param outputNum the optional output number\n   * @param inputNum the input number\n   */\n\n  LFO.prototype.connect = function (node, outputNum, inputNum) {\n    if (node instanceof Param || node instanceof Signal) {\n      this.convert = node.convert;\n      this.units = node.units;\n    }\n\n    connectSignal(this, node, outputNum, inputNum);\n    return this;\n  };\n\n  LFO.prototype.dispose = function () {\n    _super.prototype.dispose.call(this);\n\n    this._oscillator.dispose();\n\n    this._stoppedSignal.dispose();\n\n    this._zeros.dispose();\n\n    this._scaler.dispose();\n\n    this._a2g.dispose();\n\n    this._amplitudeGain.dispose();\n\n    this.amplitude.dispose();\n    return this;\n  };\n\n  return LFO;\n}(ToneAudioNode);\n\nexport { LFO };","map":{"version":3,"sources":["../../../../Tone/source/oscillator/LFO.ts"],"names":[],"mappings":"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","sourceRoot":"","sourcesContent":["import * as tslib_1 from \"tslib\";\nimport { Gain } from \"../../core/context/Gain\";\nimport { Param } from \"../../core/context/Param\";\nimport { ToneAudioNode } from \"../../core/context/ToneAudioNode\";\nimport { optionsFromArguments } from \"../../core/util/Defaults\";\nimport { readOnly } from \"../../core/util/Interface\";\nimport { AudioToGain } from \"../../signal/AudioToGain\";\nimport { Scale } from \"../../signal/Scale\";\nimport { connectSignal, Signal } from \"../../signal/Signal\";\nimport { Zero } from \"../../signal/Zero\";\nimport { Oscillator } from \"./Oscillator\";\n/**\n * LFO stands for low frequency oscillator. LFO produces an output signal\n * which can be attached to an AudioParam or Tone.Signal\n * in order to modulate that parameter with an oscillator. The LFO can\n * also be synced to the transport to start/stop and change when the tempo changes.\n *\n * @example\n * import { Filter, LFO, Noise } from \"tone\";\n * const filter = new Filter().toDestination();\n * const noise = new Noise().connect(filter).start();\n * const lfo = new LFO(\"4n\", 400, 4000).start();\n * // have it control the filters cutoff\n * lfo.connect(filter.frequency);\n * @category Source\n */\nvar LFO = /** @class */ (function (_super) {\n    tslib_1.__extends(LFO, _super);\n    function LFO() {\n        var _this = _super.call(this, optionsFromArguments(LFO.getDefaults(), arguments, [\"frequency\", \"min\", \"max\"])) || this;\n        _this.name = \"LFO\";\n        /**\n         * The value that the LFO outputs when it's stopped\n         */\n        _this._stoppedValue = 0;\n        /**\n         * A private placeholder for the units\n         */\n        _this._units = \"number\";\n        /**\n         * If the input value is converted using the [[units]]\n         */\n        _this.convert = true;\n        /**\n         * Private methods borrowed from Param\n         */\n        // @ts-ignore\n        _this._fromType = Param.prototype._fromType;\n        // @ts-ignore\n        _this._toType = Param.prototype._toType;\n        // @ts-ignore\n        _this._is = Param.prototype._is;\n        // @ts-ignore\n        _this._clampValue = Param.prototype._clampValue;\n        var options = optionsFromArguments(LFO.getDefaults(), arguments, [\"frequency\", \"min\", \"max\"]);\n        // @ts-ignore\n        _this._oscillator = new Oscillator({\n            context: _this.context,\n            frequency: options.frequency,\n            type: options.type,\n        });\n        _this.frequency = _this._oscillator.frequency;\n        _this._amplitudeGain = new Gain({\n            context: _this.context,\n            gain: options.amplitude,\n            units: \"normalRange\",\n        });\n        _this.amplitude = _this._amplitudeGain.gain;\n        _this._stoppedSignal = new Signal({\n            context: _this.context,\n            units: \"audioRange\",\n            value: 0,\n        });\n        _this._zeros = new Zero({ context: _this.context });\n        _this._a2g = new AudioToGain({ context: _this.context });\n        _this._scaler = _this.output = new Scale({\n            context: _this.context,\n            max: options.max,\n            min: options.min,\n        });\n        _this.min = options.min;\n        _this.max = options.max;\n        _this.units = options.units;\n        // connect it up\n        _this._oscillator.chain(_this._a2g, _this._amplitudeGain, _this._scaler);\n        _this._zeros.connect(_this._a2g);\n        _this._stoppedSignal.connect(_this._a2g);\n        readOnly(_this, [\"amplitude\", \"frequency\"]);\n        _this.phase = options.phase;\n        return _this;\n    }\n    LFO.getDefaults = function () {\n        return Object.assign(ToneAudioNode.getDefaults(), {\n            amplitude: 1,\n            frequency: \"4n\",\n            max: 1,\n            min: 0,\n            phase: 0,\n            type: \"sine\",\n            units: \"number\",\n        });\n    };\n    /**\n     * Start the LFO.\n     * @param time The time the LFO will start\n     */\n    LFO.prototype.start = function (time) {\n        time = this.toSeconds(time);\n        this._stoppedSignal.setValueAtTime(0, time);\n        this._oscillator.start(time);\n        return this;\n    };\n    /**\n     * Stop the LFO.\n     * @param  time The time the LFO will stop\n     */\n    LFO.prototype.stop = function (time) {\n        time = this.toSeconds(time);\n        this._stoppedSignal.setValueAtTime(this._stoppedValue, time);\n        this._oscillator.stop(time);\n        return this;\n    };\n    /**\n     * Sync the start/stop/pause to the transport\n     * and the frequency to the bpm of the transport\n     * @example\n     * import { LFO } from \"tone\";\n     * const lfo = new LFO(\"8n\");\n     * lfo.sync().start(0);\n     * // the rate of the LFO will always be an eighth note, even as the tempo changes\n     */\n    LFO.prototype.sync = function () {\n        this._oscillator.sync();\n        this._oscillator.syncFrequency();\n        return this;\n    };\n    /**\n     * unsync the LFO from transport control\n     */\n    LFO.prototype.unsync = function () {\n        this._oscillator.unsync();\n        this._oscillator.unsyncFrequency();\n        return this;\n    };\n    Object.defineProperty(LFO.prototype, \"min\", {\n        /**\n         * The minimum output of the LFO.\n         */\n        get: function () {\n            return this._toType(this._scaler.min);\n        },\n        set: function (min) {\n            min = this._fromType(min);\n            this._scaler.min = min;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(LFO.prototype, \"max\", {\n        /**\n         * The maximum output of the LFO.\n         */\n        get: function () {\n            return this._toType(this._scaler.max);\n        },\n        set: function (max) {\n            max = this._fromType(max);\n            this._scaler.max = max;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(LFO.prototype, \"type\", {\n        /**\n         * The type of the oscillator: See [[Oscillator.type]]\n         */\n        get: function () {\n            return this._oscillator.type;\n        },\n        set: function (type) {\n            this._oscillator.type = type;\n            this._stoppedValue = this._oscillator.getInitialValue();\n            this._stoppedSignal.value = this._stoppedValue;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(LFO.prototype, \"phase\", {\n        /**\n         * The phase of the LFO.\n         */\n        get: function () {\n            return this._oscillator.phase;\n        },\n        set: function (phase) {\n            this._oscillator.phase = phase;\n            this._stoppedValue = this._oscillator.getInitialValue();\n            this._stoppedSignal.value = this._stoppedValue;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(LFO.prototype, \"units\", {\n        /**\n         * The output units of the LFO.\n         */\n        get: function () {\n            return this._units;\n        },\n        set: function (val) {\n            var currentMin = this.min;\n            var currentMax = this.max;\n            // convert the min and the max\n            this._units = val;\n            this.min = currentMin;\n            this.max = currentMax;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(LFO.prototype, \"state\", {\n        /**\n         * Returns the playback state of the source, either \"started\" or \"stopped\".\n         */\n        get: function () {\n            return this._oscillator.state;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    /**\n     * @param node the destination to connect to\n     * @param outputNum the optional output number\n     * @param inputNum the input number\n     */\n    LFO.prototype.connect = function (node, outputNum, inputNum) {\n        if (node instanceof Param || node instanceof Signal) {\n            this.convert = node.convert;\n            this.units = node.units;\n        }\n        connectSignal(this, node, outputNum, inputNum);\n        return this;\n    };\n    LFO.prototype.dispose = function () {\n        _super.prototype.dispose.call(this);\n        this._oscillator.dispose();\n        this._stoppedSignal.dispose();\n        this._zeros.dispose();\n        this._scaler.dispose();\n        this._a2g.dispose();\n        this._amplitudeGain.dispose();\n        this.amplitude.dispose();\n        return this;\n    };\n    return LFO;\n}(ToneAudioNode));\nexport { LFO };\n//# sourceMappingURL=LFO.js.map"]},"metadata":{},"sourceType":"module"}