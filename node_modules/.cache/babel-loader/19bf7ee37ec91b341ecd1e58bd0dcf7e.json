{"ast":null,"code":"import * as tslib_1 from \"tslib\";\nimport { connect } from \"../core/context/ToneAudioNode\";\nimport { Param } from \"../core/context/Param\";\nimport { optionsFromArguments } from \"../core/util/Defaults\";\nimport { OneShotSource } from \"../source/OneShotSource\";\n/**\n * Wrapper around the native fire-and-forget ConstantSource.\n * Adds the ability to reschedule the stop method.\n * @category Signal\n */\n\nvar ToneConstantSource =\n/** @class */\nfunction (_super) {\n  tslib_1.__extends(ToneConstantSource, _super);\n\n  function ToneConstantSource() {\n    var _this = _super.call(this, optionsFromArguments(ToneConstantSource.getDefaults(), arguments, [\"offset\"])) || this;\n\n    _this.name = \"ToneConstantSource\";\n    /**\n     * The signal generator\n     */\n\n    _this._source = _this.context.createConstantSource();\n    var options = optionsFromArguments(ToneConstantSource.getDefaults(), arguments, [\"offset\"]);\n    connect(_this._source, _this._gainNode);\n    _this.offset = new Param({\n      context: _this.context,\n      convert: options.convert,\n      param: _this._source.offset,\n      units: options.units,\n      value: options.offset,\n      minValue: options.minValue,\n      maxValue: options.maxValue\n    });\n    return _this;\n  }\n\n  ToneConstantSource.getDefaults = function () {\n    return Object.assign(OneShotSource.getDefaults(), {\n      convert: true,\n      offset: 1,\n      units: \"number\"\n    });\n  };\n  /**\n   * Start the source node at the given time\n   * @param  time When to start the source\n   */\n\n\n  ToneConstantSource.prototype.start = function (time) {\n    var computedTime = this.toSeconds(time);\n    this.log(\"start\", computedTime);\n\n    this._startGain(computedTime);\n\n    this._source.start(computedTime);\n\n    return this;\n  };\n\n  ToneConstantSource.prototype._stopSource = function (time) {\n    this._source.stop(time);\n  };\n\n  ToneConstantSource.prototype.dispose = function () {\n    _super.prototype.dispose.call(this);\n\n    if (this.state === \"started\") {\n      this.stop();\n    }\n\n    this._source.disconnect();\n\n    this.offset.dispose();\n    return this;\n  };\n\n  return ToneConstantSource;\n}(OneShotSource);\n\nexport { ToneConstantSource };","map":{"version":3,"sources":["../../../Tone/signal/ToneConstantSource.ts"],"names":[],"mappings":";AAAA,SAAS,OAAT,QAAwB,+BAAxB;AACA,SAAS,KAAT,QAAsB,uBAAtB;AAEA,SAAS,oBAAT,QAAqC,uBAArC;AACA,SAAS,aAAT,QAAoD,yBAApD;AAUA;;;;;;AAKA,IAAA,kBAAA;AAAA;AAAA,UAAA,MAAA,EAAA;AAA8E,EAAA,OAAA,CAAA,SAAA,CAAA,kBAAA,EAAA,MAAA;;AAmB7E,WAAA,kBAAA,GAAA;AAAA,QAAA,KAAA,GAEC,MAAA,CAAA,IAAA,CAAA,IAAA,EAAM,oBAAoB,CAAC,kBAAkB,CAAC,WAAnB,EAAD,EAAmC,SAAnC,EAA8C,CAAC,QAAD,CAA9C,CAA1B,KAAoF,IAFrF;;AAjBS,IAAA,KAAA,CAAA,IAAA,GAAe,oBAAf;AAET;;;;AAGQ,IAAA,KAAA,CAAA,OAAA,GAAU,KAAI,CAAC,OAAL,CAAa,oBAAb,EAAV;AAeP,QAAM,OAAO,GAAG,oBAAoB,CAAC,kBAAkB,CAAC,WAAnB,EAAD,EAAmC,SAAnC,EAA8C,CAAC,QAAD,CAA9C,CAApC;AAEA,IAAA,OAAO,CAAC,KAAI,CAAC,OAAN,EAAe,KAAI,CAAC,SAApB,CAAP;AAEA,IAAA,KAAI,CAAC,MAAL,GAAc,IAAI,KAAJ,CAAU;AACvB,MAAA,OAAO,EAAE,KAAI,CAAC,OADS;AAEvB,MAAA,OAAO,EAAE,OAAO,CAAC,OAFM;AAGvB,MAAA,KAAK,EAAE,KAAI,CAAC,OAAL,CAAa,MAHG;AAIvB,MAAA,KAAK,EAAE,OAAO,CAAC,KAJQ;AAKvB,MAAA,KAAK,EAAE,OAAO,CAAC,MALQ;AAMvB,MAAA,QAAQ,EAAE,OAAO,CAAC,QANK;AAOvB,MAAA,QAAQ,EAAE,OAAO,CAAC;AAPK,KAAV,CAAd;;AASA;;AAEM,EAAA,kBAAA,CAAA,WAAA,GAAP,YAAA;AACC,WAAO,MAAM,CAAC,MAAP,CAAc,aAAa,CAAC,WAAd,EAAd,EAA2C;AACjD,MAAA,OAAO,EAAE,IADwC;AAEjD,MAAA,MAAM,EAAE,CAFyC;AAGjD,MAAA,KAAK,EAAE;AAH0C,KAA3C,CAAP;AAKA,GANM;AAQP;;;;;;AAIA,EAAA,kBAAA,CAAA,SAAA,CAAA,KAAA,GAAA,UAAM,IAAN,EAAiB;AAChB,QAAM,YAAY,GAAG,KAAK,SAAL,CAAe,IAAf,CAArB;AACA,SAAK,GAAL,CAAS,OAAT,EAAkB,YAAlB;;AACA,SAAK,UAAL,CAAgB,YAAhB;;AACA,SAAK,OAAL,CAAa,KAAb,CAAmB,YAAnB;;AACA,WAAO,IAAP;AACA,GAND;;AAQU,EAAA,kBAAA,CAAA,SAAA,CAAA,WAAA,GAAV,UAAsB,IAAtB,EAAoC;AACnC,SAAK,OAAL,CAAa,IAAb,CAAkB,IAAlB;AACA,GAFS;;AAIV,EAAA,kBAAA,CAAA,SAAA,CAAA,OAAA,GAAA,YAAA;AACC,IAAA,MAAA,CAAA,SAAA,CAAM,OAAN,CAAa,IAAb,CAAa,IAAb;;AACA,QAAI,KAAK,KAAL,KAAe,SAAnB,EAA8B;AAC7B,WAAK,IAAL;AACA;;AACD,SAAK,OAAL,CAAa,UAAb;;AACA,SAAK,MAAL,CAAY,OAAZ;AACA,WAAO,IAAP;AACA,GARD;;AASD,SAAA,kBAAA;AAAC,CAtED,CAA8E,aAA9E,CAAA","sourceRoot":"","sourcesContent":["import * as tslib_1 from \"tslib\";\nimport { connect } from \"../core/context/ToneAudioNode\";\nimport { Param } from \"../core/context/Param\";\nimport { optionsFromArguments } from \"../core/util/Defaults\";\nimport { OneShotSource } from \"../source/OneShotSource\";\n/**\n * Wrapper around the native fire-and-forget ConstantSource.\n * Adds the ability to reschedule the stop method.\n * @category Signal\n */\nvar ToneConstantSource = /** @class */ (function (_super) {\n    tslib_1.__extends(ToneConstantSource, _super);\n    function ToneConstantSource() {\n        var _this = _super.call(this, optionsFromArguments(ToneConstantSource.getDefaults(), arguments, [\"offset\"])) || this;\n        _this.name = \"ToneConstantSource\";\n        /**\n         * The signal generator\n         */\n        _this._source = _this.context.createConstantSource();\n        var options = optionsFromArguments(ToneConstantSource.getDefaults(), arguments, [\"offset\"]);\n        connect(_this._source, _this._gainNode);\n        _this.offset = new Param({\n            context: _this.context,\n            convert: options.convert,\n            param: _this._source.offset,\n            units: options.units,\n            value: options.offset,\n            minValue: options.minValue,\n            maxValue: options.maxValue,\n        });\n        return _this;\n    }\n    ToneConstantSource.getDefaults = function () {\n        return Object.assign(OneShotSource.getDefaults(), {\n            convert: true,\n            offset: 1,\n            units: \"number\",\n        });\n    };\n    /**\n     * Start the source node at the given time\n     * @param  time When to start the source\n     */\n    ToneConstantSource.prototype.start = function (time) {\n        var computedTime = this.toSeconds(time);\n        this.log(\"start\", computedTime);\n        this._startGain(computedTime);\n        this._source.start(computedTime);\n        return this;\n    };\n    ToneConstantSource.prototype._stopSource = function (time) {\n        this._source.stop(time);\n    };\n    ToneConstantSource.prototype.dispose = function () {\n        _super.prototype.dispose.call(this);\n        if (this.state === \"started\") {\n            this.stop();\n        }\n        this._source.disconnect();\n        this.offset.dispose();\n        return this;\n    };\n    return ToneConstantSource;\n}(OneShotSource));\nexport { ToneConstantSource };\n//# sourceMappingURL=ToneConstantSource.js.map"]},"metadata":{},"sourceType":"module"}