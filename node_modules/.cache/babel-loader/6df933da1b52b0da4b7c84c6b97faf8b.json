{"ast":null,"code":"import * as tslib_1 from \"tslib\";\nimport { ToneAudioNode } from \"../../core/context/ToneAudioNode\";\nimport { optionsFromArguments } from \"../../core/util/Defaults\";\nimport { Compressor } from \"./Compressor\";\nimport { readOnly } from \"../../core/util/Interface\";\n;\n/**\n * Limiter will limit the loudness of an incoming signal.\n * It is composed of a [[Compressor]] with a fast attack\n * and release and max ratio. Limiters are commonly used to safeguard against\n * signal clipping. Unlike a compressor, limiters do not provide\n * smooth gain reduction and almost completely prevent\n * additional gain above the threshold.\n *\n * @example\n * import { Limiter, Oscillator } from \"tone\";\n * const limiter = new Limiter(-20).toDestination();\n * const oscillator = new Oscillator().connect(limiter);\n * oscillator.start();\n */\n\nvar Limiter =\n/** @class */\nfunction (_super) {\n  tslib_1.__extends(Limiter, _super);\n\n  function Limiter() {\n    var _this = _super.call(this, Object.assign(optionsFromArguments(Limiter.getDefaults(), arguments, [\"threshold\"]))) || this;\n\n    _this.name = \"Limiter\";\n    var options = optionsFromArguments(Limiter.getDefaults(), arguments, [\"threshold\"]);\n    _this._compressor = _this.input = _this.output = new Compressor({\n      context: _this.context,\n      ratio: 20,\n      attack: 0,\n      release: 0,\n      threshold: options.threshold\n    });\n    _this.threshold = _this._compressor.threshold;\n    readOnly(_this, \"threshold\");\n    return _this;\n  }\n\n  Limiter.getDefaults = function () {\n    return Object.assign(ToneAudioNode.getDefaults(), {\n      threshold: -12\n    });\n  };\n\n  Object.defineProperty(Limiter.prototype, \"reduction\", {\n    /**\n     * A read-only decibel value for metering purposes, representing the current amount of gain\n     * reduction that the compressor is applying to the signal.\n     */\n    get: function () {\n      return this._compressor.reduction;\n    },\n    enumerable: true,\n    configurable: true\n  });\n\n  Limiter.prototype.dispose = function () {\n    _super.prototype.dispose.call(this);\n\n    this._compressor.dispose();\n\n    this.threshold.dispose();\n    return this;\n  };\n\n  return Limiter;\n}(ToneAudioNode);\n\nexport { Limiter };","map":{"version":3,"sources":["../../../../Tone/component/dynamics/Limiter.ts"],"names":[],"mappings":";AAAA,SAAgC,aAAhC,QAA2E,kCAA3E;AAEA,SAAS,oBAAT,QAAqC,0BAArC;AACA,SAAS,UAAT,QAA2B,cAA3B;AAEA,SAAS,QAAT,QAAyB,2BAAzB;AAIC;AAED;;;;;;;;;;;;;;;AAcA,IAAA,OAAA;AAAA;AAAA,UAAA,MAAA,EAAA;AAA6B,EAAA,OAAA,CAAA,SAAA,CAAA,OAAA,EAAA,MAAA;;AAmB5B,WAAA,OAAA,GAAA;AAAA,QAAA,KAAA,GACC,MAAA,CAAA,IAAA,CAAA,IAAA,EAAM,MAAM,CAAC,MAAP,CAAc,oBAAoB,CAAC,OAAO,CAAC,WAAR,EAAD,EAAwB,SAAxB,EAAmC,CAAC,WAAD,CAAnC,CAAlC,CAAN,KAA2F,IAD5F;;AAjBS,IAAA,KAAA,CAAA,IAAA,GAAe,SAAf;AAmBR,QAAM,OAAO,GAAG,oBAAoB,CAAC,OAAO,CAAC,WAAR,EAAD,EAAwB,SAAxB,EAAmC,CAAC,WAAD,CAAnC,CAApC;AAEA,IAAA,KAAI,CAAC,WAAL,GAAmB,KAAI,CAAC,KAAL,GAAa,KAAI,CAAC,MAAL,GAAc,IAAI,UAAJ,CAAe;AAC5D,MAAA,OAAO,EAAE,KAAI,CAAC,OAD8C;AAE5D,MAAA,KAAK,EAAE,EAFqD;AAG5D,MAAA,MAAM,EAAE,CAHoD;AAI5D,MAAA,OAAO,EAAE,CAJmD;AAK5D,MAAA,SAAS,EAAE,OAAO,CAAC;AALyC,KAAf,CAA9C;AAQA,IAAA,KAAI,CAAC,SAAL,GAAiB,KAAI,CAAC,WAAL,CAAiB,SAAlC;AACA,IAAA,QAAQ,CAAC,KAAD,EAAO,WAAP,CAAR;;AACA;;AAEM,EAAA,OAAA,CAAA,WAAA,GAAP,YAAA;AACC,WAAO,MAAM,CAAC,MAAP,CAAc,aAAa,CAAC,WAAd,EAAd,EAA2C;AACjD,MAAA,SAAS,EAAE,CAAC;AADqC,KAA3C,CAAP;AAGA,GAJM;;AAUP,EAAA,MAAA,CAAA,cAAA,CAAI,OAAA,CAAA,SAAJ,EAAI,WAAJ,EAAa;AAJb;;;;SAIA,YAAA;AACC,aAAO,KAAK,WAAL,CAAiB,SAAxB;AACA,KAFY;oBAAA;;AAAA,GAAb;;AAIA,EAAA,OAAA,CAAA,SAAA,CAAA,OAAA,GAAA,YAAA;AACC,IAAA,MAAA,CAAA,SAAA,CAAM,OAAN,CAAa,IAAb,CAAa,IAAb;;AACA,SAAK,WAAL,CAAiB,OAAjB;;AACA,SAAK,SAAL,CAAe,OAAf;AACA,WAAO,IAAP;AACA,GALD;;AAMD,SAAA,OAAA;AAAC,CAvDD,CAA6B,aAA7B,CAAA","sourceRoot":"","sourcesContent":["import * as tslib_1 from \"tslib\";\nimport { ToneAudioNode } from \"../../core/context/ToneAudioNode\";\nimport { optionsFromArguments } from \"../../core/util/Defaults\";\nimport { Compressor } from \"./Compressor\";\nimport { readOnly } from \"../../core/util/Interface\";\n;\n/**\n * Limiter will limit the loudness of an incoming signal.\n * It is composed of a [[Compressor]] with a fast attack\n * and release and max ratio. Limiters are commonly used to safeguard against\n * signal clipping. Unlike a compressor, limiters do not provide\n * smooth gain reduction and almost completely prevent\n * additional gain above the threshold.\n *\n * @example\n * import { Limiter, Oscillator } from \"tone\";\n * const limiter = new Limiter(-20).toDestination();\n * const oscillator = new Oscillator().connect(limiter);\n * oscillator.start();\n */\nvar Limiter = /** @class */ (function (_super) {\n    tslib_1.__extends(Limiter, _super);\n    function Limiter() {\n        var _this = _super.call(this, Object.assign(optionsFromArguments(Limiter.getDefaults(), arguments, [\"threshold\"]))) || this;\n        _this.name = \"Limiter\";\n        var options = optionsFromArguments(Limiter.getDefaults(), arguments, [\"threshold\"]);\n        _this._compressor = _this.input = _this.output = new Compressor({\n            context: _this.context,\n            ratio: 20,\n            attack: 0,\n            release: 0,\n            threshold: options.threshold\n        });\n        _this.threshold = _this._compressor.threshold;\n        readOnly(_this, \"threshold\");\n        return _this;\n    }\n    Limiter.getDefaults = function () {\n        return Object.assign(ToneAudioNode.getDefaults(), {\n            threshold: -12\n        });\n    };\n    Object.defineProperty(Limiter.prototype, \"reduction\", {\n        /**\n         * A read-only decibel value for metering purposes, representing the current amount of gain\n         * reduction that the compressor is applying to the signal.\n         */\n        get: function () {\n            return this._compressor.reduction;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Limiter.prototype.dispose = function () {\n        _super.prototype.dispose.call(this);\n        this._compressor.dispose();\n        this.threshold.dispose();\n        return this;\n    };\n    return Limiter;\n}(ToneAudioNode));\nexport { Limiter };\n//# sourceMappingURL=Limiter.js.map"]},"metadata":{},"sourceType":"module"}