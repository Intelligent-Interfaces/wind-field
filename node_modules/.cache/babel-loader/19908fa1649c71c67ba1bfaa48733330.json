{"ast":null,"code":"import * as tslib_1 from \"tslib\";\nimport { WaveShaper } from \"./WaveShaper\";\nimport { optionsFromArguments } from \"../core/util/Defaults\";\nimport { SignalOperator } from \"./SignalOperator\";\n/**\n * Pow applies an exponent to the incoming signal. The incoming signal must be AudioRange [-1, 1]\n *\n * @example\n * import { Pow, Signal } from \"tone\";\n * const pow = new Pow(2);\n * const sig = new Signal(0.5).connect(pow);\n * // output of pow is 0.25.\n * @category Signal\n */\n\nvar Pow =\n/** @class */\nfunction (_super) {\n  tslib_1.__extends(Pow, _super);\n\n  function Pow() {\n    var _this = _super.call(this, Object.assign(optionsFromArguments(Pow.getDefaults(), arguments, [\"value\"]))) || this;\n\n    _this.name = \"Pow\";\n    var options = optionsFromArguments(Pow.getDefaults(), arguments, [\"value\"]);\n    _this._exponentScaler = _this.input = _this.output = new WaveShaper({\n      context: _this.context,\n      mapping: _this._expFunc(options.value),\n      length: 8192\n    });\n    _this._exponent = options.value;\n    return _this;\n  }\n\n  Pow.getDefaults = function () {\n    return Object.assign(SignalOperator.getDefaults(), {\n      value: 1\n    });\n  };\n  /**\n   * the function which maps the waveshaper\n   * @param exponent exponent value\n   */\n\n\n  Pow.prototype._expFunc = function (exponent) {\n    return function (val) {\n      return Math.pow(Math.abs(val), exponent);\n    };\n  };\n\n  Object.defineProperty(Pow.prototype, \"value\", {\n    /**\n     * The value of the exponent.\n     */\n    get: function () {\n      return this._exponent;\n    },\n    set: function (exponent) {\n      this._exponent = exponent;\n\n      this._exponentScaler.setMap(this._expFunc(this._exponent));\n    },\n    enumerable: true,\n    configurable: true\n  });\n  /**\n   * Clean up.\n   */\n\n  Pow.prototype.dispose = function () {\n    _super.prototype.dispose.call(this);\n\n    this._exponentScaler.dispose();\n\n    return this;\n  };\n\n  return Pow;\n}(SignalOperator);\n\nexport { Pow };","map":{"version":3,"sources":["../../../Tone/signal/Pow.ts"],"names":[],"mappings":";AAAA,SAAS,UAAT,QAAgD,cAAhD;AACA,SAAS,oBAAT,QAAqC,uBAArC;AACA,SAAS,cAAT,QAA+B,kBAA/B;AAOA;;;;;;;;;;;AAUA,IAAA,GAAA;AAAA;AAAA,UAAA,MAAA,EAAA;AAAyB,EAAA,OAAA,CAAA,SAAA,CAAA,GAAA,EAAA,MAAA;;AAiBxB,WAAA,GAAA,GAAA;AAAA,QAAA,KAAA,GACC,MAAA,CAAA,IAAA,CAAA,IAAA,EAAM,MAAM,CAAC,MAAP,CAAc,oBAAoB,CAAC,GAAG,CAAC,WAAJ,EAAD,EAAoB,SAApB,EAA+B,CAAC,OAAD,CAA/B,CAAlC,CAAN,KAAmF,IADpF;;AAfS,IAAA,KAAA,CAAA,IAAA,GAAe,KAAf;AAiBR,QAAM,OAAO,GAAG,oBAAoB,CAAC,GAAG,CAAC,WAAJ,EAAD,EAAoB,SAApB,EAA+B,CAAC,OAAD,CAA/B,CAApC;AAEA,IAAA,KAAI,CAAC,eAAL,GAAuB,KAAI,CAAC,KAAL,GAAa,KAAI,CAAC,MAAL,GAAc,IAAI,UAAJ,CAAe;AAChE,MAAA,OAAO,EAAE,KAAI,CAAC,OADkD;AAEhE,MAAA,OAAO,EAAE,KAAI,CAAC,QAAL,CAAc,OAAO,CAAC,KAAtB,CAFuD;AAGhE,MAAA,MAAM,EAAE;AAHwD,KAAf,CAAlD;AAMA,IAAA,KAAI,CAAC,SAAL,GAAiB,OAAO,CAAC,KAAzB;;AACA;;AAEM,EAAA,GAAA,CAAA,WAAA,GAAP,YAAA;AACC,WAAO,MAAM,CAAC,MAAP,CAAc,cAAc,CAAC,WAAf,EAAd,EAA4C;AAClD,MAAA,KAAK,EAAE;AAD2C,KAA5C,CAAP;AAGA,GAJM;AAMP;;;;;;AAIQ,EAAA,GAAA,CAAA,SAAA,CAAA,QAAA,GAAR,UAAiB,QAAjB,EAAiC;AAChC,WAAO,UAAC,GAAD,EAAY;AAClB,aAAO,IAAI,CAAC,GAAL,CAAS,IAAI,CAAC,GAAL,CAAS,GAAT,CAAT,EAAwB,QAAxB,CAAP;AACA,KAFD;AAGA,GAJO;;AASR,EAAA,MAAA,CAAA,cAAA,CAAI,GAAA,CAAA,SAAJ,EAAI,OAAJ,EAAS;AAHT;;;SAGA,YAAA;AACC,aAAO,KAAK,SAAZ;AACA,KAFQ;SAGT,UAAU,QAAV,EAA0B;AACzB,WAAK,SAAL,GAAiB,QAAjB;;AACA,WAAK,eAAL,CAAqB,MAArB,CAA4B,KAAK,QAAL,CAAc,KAAK,SAAnB,CAA5B;AACA,KANQ;oBAAA;;AAAA,GAAT;AAQA;;;;AAGA,EAAA,GAAA,CAAA,SAAA,CAAA,OAAA,GAAA,YAAA;AACC,IAAA,MAAA,CAAA,SAAA,CAAM,OAAN,CAAa,IAAb,CAAa,IAAb;;AACA,SAAK,eAAL,CAAqB,OAArB;;AACA,WAAO,IAAP;AACA,GAJD;;AAKD,SAAA,GAAA;AAAC,CAjED,CAAyB,cAAzB,CAAA","sourceRoot":"","sourcesContent":["import * as tslib_1 from \"tslib\";\nimport { WaveShaper } from \"./WaveShaper\";\nimport { optionsFromArguments } from \"../core/util/Defaults\";\nimport { SignalOperator } from \"./SignalOperator\";\n/**\n * Pow applies an exponent to the incoming signal. The incoming signal must be AudioRange [-1, 1]\n *\n * @example\n * import { Pow, Signal } from \"tone\";\n * const pow = new Pow(2);\n * const sig = new Signal(0.5).connect(pow);\n * // output of pow is 0.25.\n * @category Signal\n */\nvar Pow = /** @class */ (function (_super) {\n    tslib_1.__extends(Pow, _super);\n    function Pow() {\n        var _this = _super.call(this, Object.assign(optionsFromArguments(Pow.getDefaults(), arguments, [\"value\"]))) || this;\n        _this.name = \"Pow\";\n        var options = optionsFromArguments(Pow.getDefaults(), arguments, [\"value\"]);\n        _this._exponentScaler = _this.input = _this.output = new WaveShaper({\n            context: _this.context,\n            mapping: _this._expFunc(options.value),\n            length: 8192,\n        });\n        _this._exponent = options.value;\n        return _this;\n    }\n    Pow.getDefaults = function () {\n        return Object.assign(SignalOperator.getDefaults(), {\n            value: 1,\n        });\n    };\n    /**\n     * the function which maps the waveshaper\n     * @param exponent exponent value\n     */\n    Pow.prototype._expFunc = function (exponent) {\n        return function (val) {\n            return Math.pow(Math.abs(val), exponent);\n        };\n    };\n    Object.defineProperty(Pow.prototype, \"value\", {\n        /**\n         * The value of the exponent.\n         */\n        get: function () {\n            return this._exponent;\n        },\n        set: function (exponent) {\n            this._exponent = exponent;\n            this._exponentScaler.setMap(this._expFunc(this._exponent));\n        },\n        enumerable: true,\n        configurable: true\n    });\n    /**\n     * Clean up.\n     */\n    Pow.prototype.dispose = function () {\n        _super.prototype.dispose.call(this);\n        this._exponentScaler.dispose();\n        return this;\n    };\n    return Pow;\n}(SignalOperator));\nexport { Pow };\n//# sourceMappingURL=Pow.js.map"]},"metadata":{},"sourceType":"module"}