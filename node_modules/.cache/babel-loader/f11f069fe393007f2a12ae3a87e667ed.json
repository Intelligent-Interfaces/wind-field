{"ast":null,"code":"import * as tslib_1 from \"tslib\";\nimport { optionsFromArguments } from \"../core/util/Defaults\";\nimport { Multiply } from \"../signal/Multiply\";\nimport { ModulationSynth } from \"./ModulationSynth\";\n/**\n * FMSynth is composed of two Tone.Synths where one Tone.Synth modulates\n * the frequency of a second Tone.Synth. A lot of spectral content\n * can be explored using the modulationIndex parameter. Read more about\n * frequency modulation synthesis on Sound On Sound: [Part 1](https://web.archive.org/web/20160403123704/http://www.soundonsound.com/sos/apr00/articles/synthsecrets.htm), [Part 2](https://web.archive.org/web/20160403115835/http://www.soundonsound.com/sos/may00/articles/synth.htm).\n *\n * @example\n * import { FMSynth } from \"tone\";\n * const fmSynth = new FMSynth().toDestination();\n * fmSynth.triggerAttackRelease(\"C5\", \"4n\");\n *\n * @category Instrument\n */\n\nvar FMSynth =\n/** @class */\nfunction (_super) {\n  tslib_1.__extends(FMSynth, _super);\n\n  function FMSynth() {\n    var _this = _super.call(this, optionsFromArguments(FMSynth.getDefaults(), arguments)) || this;\n\n    _this.name = \"FMSynth\";\n    var options = optionsFromArguments(FMSynth.getDefaults(), arguments);\n    _this.modulationIndex = new Multiply({\n      context: _this.context,\n      value: options.modulationIndex\n    }); // control the two voices frequency\n\n    _this.frequency.connect(_this._carrier.frequency);\n\n    _this.frequency.chain(_this.harmonicity, _this._modulator.frequency);\n\n    _this.frequency.chain(_this.modulationIndex, _this._modulationNode);\n\n    _this.detune.fan(_this._carrier.detune, _this._modulator.detune);\n\n    _this._modulator.connect(_this._modulationNode.gain);\n\n    _this._modulationNode.connect(_this._carrier.frequency);\n\n    _this._carrier.connect(_this.output);\n\n    return _this;\n  }\n\n  FMSynth.getDefaults = function () {\n    return Object.assign(ModulationSynth.getDefaults(), {\n      modulationIndex: 10\n    });\n  };\n\n  FMSynth.prototype.dispose = function () {\n    _super.prototype.dispose.call(this);\n\n    this.modulationIndex.dispose();\n    return this;\n  };\n\n  return FMSynth;\n}(ModulationSynth);\n\nexport { FMSynth };","map":{"version":3,"sources":["../../../Tone/instrument/FMSynth.ts"],"names":[],"mappings":";AACA,SAAS,oBAAT,QAAqC,uBAArC;AAEA,SAAS,QAAT,QAAyB,oBAAzB;AACA,SAAS,eAAT,QAAwD,mBAAxD;AAMA;;;;;;;;;;;;;;AAcA,IAAA,OAAA;AAAA;AAAA,UAAA,MAAA,EAAA;AAA6B,EAAA,OAAA,CAAA,SAAA,CAAA,OAAA,EAAA,MAAA;;AAW5B,WAAA,OAAA,GAAA;AAAA,QAAA,KAAA,GACC,MAAA,CAAA,IAAA,CAAA,IAAA,EAAM,oBAAoB,CAAC,OAAO,CAAC,WAAR,EAAD,EAAwB,SAAxB,CAA1B,KAA6D,IAD9D;;AAVS,IAAA,KAAA,CAAA,IAAA,GAAe,SAAf;AAYR,QAAM,OAAO,GAAG,oBAAoB,CAAC,OAAO,CAAC,WAAR,EAAD,EAAwB,SAAxB,CAApC;AAEA,IAAA,KAAI,CAAC,eAAL,GAAuB,IAAI,QAAJ,CAAa;AACnC,MAAA,OAAO,EAAE,KAAI,CAAC,OADqB;AAEnC,MAAA,KAAK,EAAE,OAAO,CAAC;AAFoB,KAAb,CAAvB,CAJD,CASC;;AACA,IAAA,KAAI,CAAC,SAAL,CAAe,OAAf,CAAuB,KAAI,CAAC,QAAL,CAAc,SAArC;;AACA,IAAA,KAAI,CAAC,SAAL,CAAe,KAAf,CAAqB,KAAI,CAAC,WAA1B,EAAuC,KAAI,CAAC,UAAL,CAAgB,SAAvD;;AACA,IAAA,KAAI,CAAC,SAAL,CAAe,KAAf,CAAqB,KAAI,CAAC,eAA1B,EAA2C,KAAI,CAAC,eAAhD;;AACA,IAAA,KAAI,CAAC,MAAL,CAAY,GAAZ,CAAgB,KAAI,CAAC,QAAL,CAAc,MAA9B,EAAsC,KAAI,CAAC,UAAL,CAAgB,MAAtD;;AACA,IAAA,KAAI,CAAC,UAAL,CAAgB,OAAhB,CAAwB,KAAI,CAAC,eAAL,CAAqB,IAA7C;;AACA,IAAA,KAAI,CAAC,eAAL,CAAqB,OAArB,CAA6B,KAAI,CAAC,QAAL,CAAc,SAA3C;;AACA,IAAA,KAAI,CAAC,QAAL,CAAc,OAAd,CAAsB,KAAI,CAAC,MAA3B;;;AACA;;AAEM,EAAA,OAAA,CAAA,WAAA,GAAP,YAAA;AACC,WAAO,MAAM,CAAC,MAAP,CAAc,eAAe,CAAC,WAAhB,EAAd,EAA6C;AACnD,MAAA,eAAe,EAAE;AADkC,KAA7C,CAAP;AAGA,GAJM;;AAMP,EAAA,OAAA,CAAA,SAAA,CAAA,OAAA,GAAA,YAAA;AACC,IAAA,MAAA,CAAA,SAAA,CAAM,OAAN,CAAa,IAAb,CAAa,IAAb;;AACA,SAAK,eAAL,CAAqB,OAArB;AACA,WAAO,IAAP;AACA,GAJD;;AAKD,SAAA,OAAA;AAAC,CAzCD,CAA6B,eAA7B,CAAA","sourceRoot":"","sourcesContent":["import * as tslib_1 from \"tslib\";\nimport { optionsFromArguments } from \"../core/util/Defaults\";\nimport { Multiply } from \"../signal/Multiply\";\nimport { ModulationSynth } from \"./ModulationSynth\";\n/**\n * FMSynth is composed of two Tone.Synths where one Tone.Synth modulates\n * the frequency of a second Tone.Synth. A lot of spectral content\n * can be explored using the modulationIndex parameter. Read more about\n * frequency modulation synthesis on Sound On Sound: [Part 1](https://web.archive.org/web/20160403123704/http://www.soundonsound.com/sos/apr00/articles/synthsecrets.htm), [Part 2](https://web.archive.org/web/20160403115835/http://www.soundonsound.com/sos/may00/articles/synth.htm).\n *\n * @example\n * import { FMSynth } from \"tone\";\n * const fmSynth = new FMSynth().toDestination();\n * fmSynth.triggerAttackRelease(\"C5\", \"4n\");\n *\n * @category Instrument\n */\nvar FMSynth = /** @class */ (function (_super) {\n    tslib_1.__extends(FMSynth, _super);\n    function FMSynth() {\n        var _this = _super.call(this, optionsFromArguments(FMSynth.getDefaults(), arguments)) || this;\n        _this.name = \"FMSynth\";\n        var options = optionsFromArguments(FMSynth.getDefaults(), arguments);\n        _this.modulationIndex = new Multiply({\n            context: _this.context,\n            value: options.modulationIndex,\n        });\n        // control the two voices frequency\n        _this.frequency.connect(_this._carrier.frequency);\n        _this.frequency.chain(_this.harmonicity, _this._modulator.frequency);\n        _this.frequency.chain(_this.modulationIndex, _this._modulationNode);\n        _this.detune.fan(_this._carrier.detune, _this._modulator.detune);\n        _this._modulator.connect(_this._modulationNode.gain);\n        _this._modulationNode.connect(_this._carrier.frequency);\n        _this._carrier.connect(_this.output);\n        return _this;\n    }\n    FMSynth.getDefaults = function () {\n        return Object.assign(ModulationSynth.getDefaults(), {\n            modulationIndex: 10,\n        });\n    };\n    FMSynth.prototype.dispose = function () {\n        _super.prototype.dispose.call(this);\n        this.modulationIndex.dispose();\n        return this;\n    };\n    return FMSynth;\n}(ModulationSynth));\nexport { FMSynth };\n//# sourceMappingURL=FMSynth.js.map"]},"metadata":{},"sourceType":"module"}