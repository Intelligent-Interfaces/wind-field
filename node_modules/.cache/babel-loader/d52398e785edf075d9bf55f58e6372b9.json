{"ast":null,"code":"import * as tslib_1 from \"tslib\";\nimport { Scale } from \"./Scale\";\nimport { optionsFromArguments } from \"../core/util/Defaults\";\nimport { Pow } from \"./Pow\";\n/**\n * Performs an exponential scaling on an input signal.\n * Scales a NormalRange value [0,1] exponentially\n * to the output range of outputMin to outputMax.\n * @example\n * import { ScaleExp, Signal } from \"tone\";\n * const scaleExp = new ScaleExp(0, 100, 2);\n * const signal = new Signal(0.5).connect(scaleExp);\n */\n\nvar ScaleExp =\n/** @class */\nfunction (_super) {\n  tslib_1.__extends(ScaleExp, _super);\n\n  function ScaleExp() {\n    var _this = _super.call(this, Object.assign(optionsFromArguments(ScaleExp.getDefaults(), arguments, [\"min\", \"max\", \"exponent\"]))) || this;\n\n    _this.name = \"ScaleExp\";\n    var options = optionsFromArguments(ScaleExp.getDefaults(), arguments, [\"min\", \"max\", \"exponent\"]);\n    _this.input = _this._exp = new Pow({\n      context: _this.context,\n      value: options.exponent\n    });\n\n    _this._exp.connect(_this._mult);\n\n    return _this;\n  }\n\n  ScaleExp.getDefaults = function () {\n    return Object.assign(Scale.getDefaults(), {\n      exponent: 1\n    });\n  };\n\n  Object.defineProperty(ScaleExp.prototype, \"exponent\", {\n    /**\n     * Instead of interpolating linearly between the [[min]] and\n     * [[max]] values, setting the exponent will interpolate between\n     * the two values with an exponential curve.\n     */\n    get: function () {\n      return this._exp.value;\n    },\n    set: function (exp) {\n      this._exp.value = exp;\n    },\n    enumerable: true,\n    configurable: true\n  });\n\n  ScaleExp.prototype.dispose = function () {\n    _super.prototype.dispose.call(this);\n\n    this._exp.dispose();\n\n    return this;\n  };\n\n  return ScaleExp;\n}(Scale);\n\nexport { ScaleExp };","map":{"version":3,"sources":["../../../Tone/signal/ScaleExp.ts"],"names":[],"mappings":";AAAA,SAAS,KAAT,QAAoC,SAApC;AAEA,SAAS,oBAAT,QAAqC,uBAArC;AACA,SAAS,GAAT,QAAoB,OAApB;AAMA;;;;;;;;;;AASA,IAAA,QAAA;AAAA;AAAA,UAAA,MAAA,EAAA;AAA8B,EAAA,OAAA,CAAA,SAAA,CAAA,QAAA,EAAA,MAAA;;AAgB7B,WAAA,QAAA,GAAA;AAAA,QAAA,KAAA,GACC,MAAA,CAAA,IAAA,CAAA,IAAA,EAAM,MAAM,CAAC,MAAP,CAAc,oBAAoB,CAAC,QAAQ,CAAC,WAAT,EAAD,EAAyB,SAAzB,EAAoC,CAAC,KAAD,EAAQ,KAAR,EAAe,UAAf,CAApC,CAAlC,CAAN,KAAyG,IAD1G;;AAdS,IAAA,KAAA,CAAA,IAAA,GAAe,UAAf;AAgBR,QAAM,OAAO,GAAG,oBAAoB,CAAC,QAAQ,CAAC,WAAT,EAAD,EAAyB,SAAzB,EAAoC,CAAC,KAAD,EAAQ,KAAR,EAAe,UAAf,CAApC,CAApC;AAEA,IAAA,KAAI,CAAC,KAAL,GAAa,KAAI,CAAC,IAAL,GAAY,IAAI,GAAJ,CAAQ;AAChC,MAAA,OAAO,EAAE,KAAI,CAAC,OADkB;AAEhC,MAAA,KAAK,EAAE,OAAO,CAAC;AAFiB,KAAR,CAAzB;;AAIA,IAAA,KAAI,CAAC,IAAL,CAAU,OAAV,CAAkB,KAAI,CAAC,KAAvB;;;AACA;;AAEM,EAAA,QAAA,CAAA,WAAA,GAAP,YAAA;AACC,WAAO,MAAM,CAAC,MAAP,CAAc,KAAK,CAAC,WAAN,EAAd,EAAmC;AACzC,MAAA,QAAQ,EAAE;AAD+B,KAAnC,CAAP;AAGA,GAJM;;AAWP,EAAA,MAAA,CAAA,cAAA,CAAI,QAAA,CAAA,SAAJ,EAAI,UAAJ,EAAY;AALZ;;;;;SAKA,YAAA;AACC,aAAO,KAAK,IAAL,CAAU,KAAjB;AACA,KAFW;SAGZ,UAAa,GAAb,EAAgB;AACf,WAAK,IAAL,CAAU,KAAV,GAAkB,GAAlB;AACA,KALW;oBAAA;;AAAA,GAAZ;;AAOA,EAAA,QAAA,CAAA,SAAA,CAAA,OAAA,GAAA,YAAA;AACC,IAAA,MAAA,CAAA,SAAA,CAAM,OAAN,CAAa,IAAb,CAAa,IAAb;;AACA,SAAK,IAAL,CAAU,OAAV;;AACA,WAAO,IAAP;AACA,GAJD;;AAKD,SAAA,QAAA;AAAC,CAlDD,CAA8B,KAA9B,CAAA","sourceRoot":"","sourcesContent":["import * as tslib_1 from \"tslib\";\nimport { Scale } from \"./Scale\";\nimport { optionsFromArguments } from \"../core/util/Defaults\";\nimport { Pow } from \"./Pow\";\n/**\n * Performs an exponential scaling on an input signal.\n * Scales a NormalRange value [0,1] exponentially\n * to the output range of outputMin to outputMax.\n * @example\n * import { ScaleExp, Signal } from \"tone\";\n * const scaleExp = new ScaleExp(0, 100, 2);\n * const signal = new Signal(0.5).connect(scaleExp);\n */\nvar ScaleExp = /** @class */ (function (_super) {\n    tslib_1.__extends(ScaleExp, _super);\n    function ScaleExp() {\n        var _this = _super.call(this, Object.assign(optionsFromArguments(ScaleExp.getDefaults(), arguments, [\"min\", \"max\", \"exponent\"]))) || this;\n        _this.name = \"ScaleExp\";\n        var options = optionsFromArguments(ScaleExp.getDefaults(), arguments, [\"min\", \"max\", \"exponent\"]);\n        _this.input = _this._exp = new Pow({\n            context: _this.context,\n            value: options.exponent,\n        });\n        _this._exp.connect(_this._mult);\n        return _this;\n    }\n    ScaleExp.getDefaults = function () {\n        return Object.assign(Scale.getDefaults(), {\n            exponent: 1,\n        });\n    };\n    Object.defineProperty(ScaleExp.prototype, \"exponent\", {\n        /**\n         * Instead of interpolating linearly between the [[min]] and\n         * [[max]] values, setting the exponent will interpolate between\n         * the two values with an exponential curve.\n         */\n        get: function () {\n            return this._exp.value;\n        },\n        set: function (exp) {\n            this._exp.value = exp;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    ScaleExp.prototype.dispose = function () {\n        _super.prototype.dispose.call(this);\n        this._exp.dispose();\n        return this;\n    };\n    return ScaleExp;\n}(Scale));\nexport { ScaleExp };\n//# sourceMappingURL=ScaleExp.js.map"]},"metadata":{},"sourceType":"module"}