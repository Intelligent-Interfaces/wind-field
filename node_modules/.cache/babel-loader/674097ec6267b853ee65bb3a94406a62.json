{"ast":null,"code":"import * as tslib_1 from \"tslib\";\nimport { Gain } from \"../../core/context/Gain\";\nimport { optionsFromArguments } from \"../../core/util/Defaults\";\nimport { readOnly } from \"../../core/util/Interface\";\nimport { AudioToGain } from \"../../signal/AudioToGain\";\nimport { Multiply } from \"../../signal/Multiply\";\nimport { Source } from \"../Source\";\nimport { Oscillator } from \"./Oscillator\";\nimport { generateWaveform } from \"./OscillatorInterface\";\n/**\n * An amplitude modulated oscillator node. It is implemented with\n * two oscillators, one which modulators the other's amplitude\n * through a gain node.\n * ```\n *    +-------------+       +----------+\n *    | Carrier Osc +>------> GainNode |\n *    +-------------+       |          +--->Output\n *                      +---> gain     |\n * +---------------+    |   +----------+\n * | Modulator Osc +>---+\n * +---------------+\n * ```\n *\n * @example\n * import { AMOscillator } from \"tone\";\n * // a sine oscillator amplitude-modulated by a square wave\n * const amOsc = new AMOscillator(\"Ab3\", \"sine\", \"square\").toDestination().start().stop(\"+5\");\n * // schedule a series of notes\n * amOsc.frequency.setValueAtTime(\"F3\", \"+0.25\");\n * amOsc.frequency.setValueAtTime(\"C4\", \"+0.5\");\n * amOsc.frequency.setValueAtTime(\"Bb3\", \"+1\");\n * // schedule harmonicity changes along with those notes\n * amOsc.harmonicity.setValueAtTime(0.5, \"+0.25\");\n * amOsc.harmonicity.setValueAtTime(1, \"+1\");\n * amOsc.harmonicity.linearRampTo(1.1, 2, \"+1\");\n * // fade it out all the way at the end\n * amOsc.volume.exponentialRampTo(-Infinity, 3, \"+2,\");\n * @category Source\n */\n\nvar AMOscillator =\n/** @class */\nfunction (_super) {\n  tslib_1.__extends(AMOscillator, _super);\n\n  function AMOscillator() {\n    var _this = _super.call(this, optionsFromArguments(AMOscillator.getDefaults(), arguments, [\"frequency\", \"type\", \"modulationType\"])) || this;\n\n    _this.name = \"AMOscillator\";\n    /**\n     * convert the -1,1 output to 0,1\n     */\n\n    _this._modulationScale = new AudioToGain({\n      context: _this.context\n    });\n    /**\n     * the node where the modulation happens\n     */\n\n    _this._modulationNode = new Gain({\n      context: _this.context\n    });\n    var options = optionsFromArguments(AMOscillator.getDefaults(), arguments, [\"frequency\", \"type\", \"modulationType\"]);\n    _this._carrier = new Oscillator({\n      context: _this.context,\n      detune: options.detune,\n      frequency: options.frequency,\n      onstop: function () {\n        return _this.onstop(_this);\n      },\n      phase: options.phase,\n      type: options.type\n    });\n    _this.frequency = _this._carrier.frequency, _this.detune = _this._carrier.detune;\n    _this._modulator = new Oscillator({\n      context: _this.context,\n      phase: options.phase,\n      type: options.modulationType\n    });\n    _this.harmonicity = new Multiply({\n      context: _this.context,\n      units: \"positive\",\n      value: options.harmonicity\n    }); // connections\n\n    _this.frequency.chain(_this.harmonicity, _this._modulator.frequency);\n\n    _this._modulator.chain(_this._modulationScale, _this._modulationNode.gain);\n\n    _this._carrier.chain(_this._modulationNode, _this.output);\n\n    readOnly(_this, [\"frequency\", \"detune\", \"harmonicity\"]);\n    return _this;\n  }\n\n  AMOscillator.getDefaults = function () {\n    return Object.assign(Oscillator.getDefaults(), {\n      harmonicity: 1,\n      modulationType: \"square\"\n    });\n  };\n  /**\n   * start the oscillator\n   */\n\n\n  AMOscillator.prototype._start = function (time) {\n    this._modulator.start(time);\n\n    this._carrier.start(time);\n  };\n  /**\n   * stop the oscillator\n   */\n\n\n  AMOscillator.prototype._stop = function (time) {\n    this._modulator.stop(time);\n\n    this._carrier.stop(time);\n  };\n\n  AMOscillator.prototype._restart = function (time) {\n    this._modulator.restart(time);\n\n    this._carrier.restart(time);\n  };\n\n  Object.defineProperty(AMOscillator.prototype, \"type\", {\n    /**\n     * The type of the carrier oscillator\n     */\n    get: function () {\n      return this._carrier.type;\n    },\n    set: function (type) {\n      this._carrier.type = type;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(AMOscillator.prototype, \"baseType\", {\n    get: function () {\n      return this._carrier.baseType;\n    },\n    set: function (baseType) {\n      this._carrier.baseType = baseType;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(AMOscillator.prototype, \"partialCount\", {\n    get: function () {\n      return this._carrier.partialCount;\n    },\n    set: function (partialCount) {\n      this._carrier.partialCount = partialCount;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(AMOscillator.prototype, \"modulationType\", {\n    /**\n     * The type of the modulator oscillator\n     */\n    get: function () {\n      return this._modulator.type;\n    },\n    set: function (type) {\n      this._modulator.type = type;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(AMOscillator.prototype, \"phase\", {\n    get: function () {\n      return this._carrier.phase;\n    },\n    set: function (phase) {\n      this._carrier.phase = phase;\n      this._modulator.phase = phase;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(AMOscillator.prototype, \"partials\", {\n    get: function () {\n      return this._carrier.partials;\n    },\n    set: function (partials) {\n      this._carrier.partials = partials;\n    },\n    enumerable: true,\n    configurable: true\n  });\n\n  AMOscillator.prototype.asArray = function (length) {\n    if (length === void 0) {\n      length = 1024;\n    }\n\n    return tslib_1.__awaiter(this, void 0, void 0, function () {\n      return tslib_1.__generator(this, function (_a) {\n        return [2\n        /*return*/\n        , generateWaveform(this, length)];\n      });\n    });\n  };\n  /**\n   * Clean up.\n   */\n\n\n  AMOscillator.prototype.dispose = function () {\n    _super.prototype.dispose.call(this);\n\n    this.frequency.dispose();\n    this.detune.dispose();\n    this.harmonicity.dispose();\n\n    this._carrier.dispose();\n\n    this._modulator.dispose();\n\n    this._modulationNode.dispose();\n\n    this._modulationScale.dispose();\n\n    return this;\n  };\n\n  return AMOscillator;\n}(Source);\n\nexport { AMOscillator };","map":{"version":3,"sources":["../../../../Tone/source/oscillator/AMOscillator.ts"],"names":[],"mappings":"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","sourceRoot":"","sourcesContent":["import * as tslib_1 from \"tslib\";\nimport { Gain } from \"../../core/context/Gain\";\nimport { optionsFromArguments } from \"../../core/util/Defaults\";\nimport { readOnly } from \"../../core/util/Interface\";\nimport { AudioToGain } from \"../../signal/AudioToGain\";\nimport { Multiply } from \"../../signal/Multiply\";\nimport { Source } from \"../Source\";\nimport { Oscillator } from \"./Oscillator\";\nimport { generateWaveform } from \"./OscillatorInterface\";\n/**\n * An amplitude modulated oscillator node. It is implemented with\n * two oscillators, one which modulators the other's amplitude\n * through a gain node.\n * ```\n *    +-------------+       +----------+\n *    | Carrier Osc +>------> GainNode |\n *    +-------------+       |          +--->Output\n *                      +---> gain     |\n * +---------------+    |   +----------+\n * | Modulator Osc +>---+\n * +---------------+\n * ```\n *\n * @example\n * import { AMOscillator } from \"tone\";\n * // a sine oscillator amplitude-modulated by a square wave\n * const amOsc = new AMOscillator(\"Ab3\", \"sine\", \"square\").toDestination().start().stop(\"+5\");\n * // schedule a series of notes\n * amOsc.frequency.setValueAtTime(\"F3\", \"+0.25\");\n * amOsc.frequency.setValueAtTime(\"C4\", \"+0.5\");\n * amOsc.frequency.setValueAtTime(\"Bb3\", \"+1\");\n * // schedule harmonicity changes along with those notes\n * amOsc.harmonicity.setValueAtTime(0.5, \"+0.25\");\n * amOsc.harmonicity.setValueAtTime(1, \"+1\");\n * amOsc.harmonicity.linearRampTo(1.1, 2, \"+1\");\n * // fade it out all the way at the end\n * amOsc.volume.exponentialRampTo(-Infinity, 3, \"+2,\");\n * @category Source\n */\nvar AMOscillator = /** @class */ (function (_super) {\n    tslib_1.__extends(AMOscillator, _super);\n    function AMOscillator() {\n        var _this = _super.call(this, optionsFromArguments(AMOscillator.getDefaults(), arguments, [\"frequency\", \"type\", \"modulationType\"])) || this;\n        _this.name = \"AMOscillator\";\n        /**\n         * convert the -1,1 output to 0,1\n         */\n        _this._modulationScale = new AudioToGain({ context: _this.context });\n        /**\n         * the node where the modulation happens\n         */\n        _this._modulationNode = new Gain({\n            context: _this.context,\n        });\n        var options = optionsFromArguments(AMOscillator.getDefaults(), arguments, [\"frequency\", \"type\", \"modulationType\"]);\n        _this._carrier = new Oscillator({\n            context: _this.context,\n            detune: options.detune,\n            frequency: options.frequency,\n            onstop: function () { return _this.onstop(_this); },\n            phase: options.phase,\n            type: options.type,\n        });\n        _this.frequency = _this._carrier.frequency,\n            _this.detune = _this._carrier.detune;\n        _this._modulator = new Oscillator({\n            context: _this.context,\n            phase: options.phase,\n            type: options.modulationType,\n        });\n        _this.harmonicity = new Multiply({\n            context: _this.context,\n            units: \"positive\",\n            value: options.harmonicity,\n        });\n        // connections\n        _this.frequency.chain(_this.harmonicity, _this._modulator.frequency);\n        _this._modulator.chain(_this._modulationScale, _this._modulationNode.gain);\n        _this._carrier.chain(_this._modulationNode, _this.output);\n        readOnly(_this, [\"frequency\", \"detune\", \"harmonicity\"]);\n        return _this;\n    }\n    AMOscillator.getDefaults = function () {\n        return Object.assign(Oscillator.getDefaults(), {\n            harmonicity: 1,\n            modulationType: \"square\",\n        });\n    };\n    /**\n     * start the oscillator\n     */\n    AMOscillator.prototype._start = function (time) {\n        this._modulator.start(time);\n        this._carrier.start(time);\n    };\n    /**\n     * stop the oscillator\n     */\n    AMOscillator.prototype._stop = function (time) {\n        this._modulator.stop(time);\n        this._carrier.stop(time);\n    };\n    AMOscillator.prototype._restart = function (time) {\n        this._modulator.restart(time);\n        this._carrier.restart(time);\n    };\n    Object.defineProperty(AMOscillator.prototype, \"type\", {\n        /**\n         * The type of the carrier oscillator\n         */\n        get: function () {\n            return this._carrier.type;\n        },\n        set: function (type) {\n            this._carrier.type = type;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(AMOscillator.prototype, \"baseType\", {\n        get: function () {\n            return this._carrier.baseType;\n        },\n        set: function (baseType) {\n            this._carrier.baseType = baseType;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(AMOscillator.prototype, \"partialCount\", {\n        get: function () {\n            return this._carrier.partialCount;\n        },\n        set: function (partialCount) {\n            this._carrier.partialCount = partialCount;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(AMOscillator.prototype, \"modulationType\", {\n        /**\n         * The type of the modulator oscillator\n         */\n        get: function () {\n            return this._modulator.type;\n        },\n        set: function (type) {\n            this._modulator.type = type;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(AMOscillator.prototype, \"phase\", {\n        get: function () {\n            return this._carrier.phase;\n        },\n        set: function (phase) {\n            this._carrier.phase = phase;\n            this._modulator.phase = phase;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(AMOscillator.prototype, \"partials\", {\n        get: function () {\n            return this._carrier.partials;\n        },\n        set: function (partials) {\n            this._carrier.partials = partials;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    AMOscillator.prototype.asArray = function (length) {\n        if (length === void 0) { length = 1024; }\n        return tslib_1.__awaiter(this, void 0, void 0, function () {\n            return tslib_1.__generator(this, function (_a) {\n                return [2 /*return*/, generateWaveform(this, length)];\n            });\n        });\n    };\n    /**\n     * Clean up.\n     */\n    AMOscillator.prototype.dispose = function () {\n        _super.prototype.dispose.call(this);\n        this.frequency.dispose();\n        this.detune.dispose();\n        this.harmonicity.dispose();\n        this._carrier.dispose();\n        this._modulator.dispose();\n        this._modulationNode.dispose();\n        this._modulationScale.dispose();\n        return this;\n    };\n    return AMOscillator;\n}(Source));\nexport { AMOscillator };\n//# sourceMappingURL=AMOscillator.js.map"]},"metadata":{},"sourceType":"module"}