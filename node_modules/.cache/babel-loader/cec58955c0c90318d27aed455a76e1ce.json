{"ast":null,"code":"import * as tslib_1 from \"tslib\";\nimport { Param } from \"../../core/context/Param\";\nimport { ToneAudioNode } from \"../../core/context/ToneAudioNode\";\nimport { optionsFromArguments } from \"../../core/util/Defaults\";\nimport { readOnly } from \"../../core/util/Interface\";\n/**\n * Compressor is a thin wrapper around the Web Audio\n * [DynamicsCompressorNode](http://webaudio.github.io/web-audio-api/#the-dynamicscompressornode-interface).\n * Compression reduces the volume of loud sounds or amplifies quiet sounds\n * by narrowing or \"compressing\" an audio signal's dynamic range.\n * Read more on [Wikipedia](https://en.wikipedia.org/wiki/Dynamic_range_compression).\n * @example\n * import { Compressor } from \"tone\";\n * const comp = new Compressor(-30, 3);\n * @category Component\n */\n\nvar Compressor =\n/** @class */\nfunction (_super) {\n  tslib_1.__extends(Compressor, _super);\n\n  function Compressor() {\n    var _this = _super.call(this, optionsFromArguments(Compressor.getDefaults(), arguments, [\"threshold\", \"ratio\"])) || this;\n\n    _this.name = \"Compressor\";\n    /**\n     * the compressor node\n     */\n\n    _this._compressor = _this.context.createDynamicsCompressor();\n    _this.input = _this._compressor;\n    _this.output = _this._compressor;\n    var options = optionsFromArguments(Compressor.getDefaults(), arguments, [\"threshold\", \"ratio\"]);\n    _this.threshold = new Param({\n      minValue: _this._compressor.threshold.minValue,\n      maxValue: _this._compressor.threshold.maxValue,\n      context: _this.context,\n      convert: false,\n      param: _this._compressor.threshold,\n      units: \"decibels\",\n      value: options.threshold\n    });\n    _this.attack = new Param({\n      minValue: _this._compressor.attack.minValue,\n      maxValue: _this._compressor.attack.maxValue,\n      context: _this.context,\n      param: _this._compressor.attack,\n      units: \"time\",\n      value: options.attack\n    });\n    _this.release = new Param({\n      minValue: _this._compressor.release.minValue,\n      maxValue: _this._compressor.release.maxValue,\n      context: _this.context,\n      param: _this._compressor.release,\n      units: \"time\",\n      value: options.release\n    });\n    _this.knee = new Param({\n      minValue: _this._compressor.knee.minValue,\n      maxValue: _this._compressor.knee.maxValue,\n      context: _this.context,\n      convert: false,\n      param: _this._compressor.knee,\n      units: \"decibels\",\n      value: options.knee\n    });\n    _this.ratio = new Param({\n      minValue: _this._compressor.ratio.minValue,\n      maxValue: _this._compressor.ratio.maxValue,\n      context: _this.context,\n      convert: false,\n      param: _this._compressor.ratio,\n      units: \"positive\",\n      value: options.ratio\n    }); // set the defaults\n\n    readOnly(_this, [\"knee\", \"release\", \"attack\", \"ratio\", \"threshold\"]);\n    return _this;\n  }\n\n  Compressor.getDefaults = function () {\n    return Object.assign(ToneAudioNode.getDefaults(), {\n      attack: 0.003,\n      knee: 30,\n      ratio: 12,\n      release: 0.25,\n      threshold: -24\n    });\n  };\n\n  Object.defineProperty(Compressor.prototype, \"reduction\", {\n    /**\n     * A read-only decibel value for metering purposes, representing the current amount of gain\n     * reduction that the compressor is applying to the signal. If fed no signal the value will be 0 (no gain reduction).\n     */\n    get: function () {\n      return this._compressor.reduction;\n    },\n    enumerable: true,\n    configurable: true\n  });\n\n  Compressor.prototype.dispose = function () {\n    _super.prototype.dispose.call(this);\n\n    this._compressor.disconnect();\n\n    this.attack.dispose();\n    this.release.dispose();\n    this.threshold.dispose();\n    this.ratio.dispose();\n    this.knee.dispose();\n    return this;\n  };\n\n  return Compressor;\n}(ToneAudioNode);\n\nexport { Compressor };","map":{"version":3,"sources":["../../../../Tone/component/dynamics/Compressor.ts"],"names":[],"mappings":"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","sourceRoot":"","sourcesContent":["import * as tslib_1 from \"tslib\";\nimport { Param } from \"../../core/context/Param\";\nimport { ToneAudioNode } from \"../../core/context/ToneAudioNode\";\nimport { optionsFromArguments } from \"../../core/util/Defaults\";\nimport { readOnly } from \"../../core/util/Interface\";\n/**\n * Compressor is a thin wrapper around the Web Audio\n * [DynamicsCompressorNode](http://webaudio.github.io/web-audio-api/#the-dynamicscompressornode-interface).\n * Compression reduces the volume of loud sounds or amplifies quiet sounds\n * by narrowing or \"compressing\" an audio signal's dynamic range.\n * Read more on [Wikipedia](https://en.wikipedia.org/wiki/Dynamic_range_compression).\n * @example\n * import { Compressor } from \"tone\";\n * const comp = new Compressor(-30, 3);\n * @category Component\n */\nvar Compressor = /** @class */ (function (_super) {\n    tslib_1.__extends(Compressor, _super);\n    function Compressor() {\n        var _this = _super.call(this, optionsFromArguments(Compressor.getDefaults(), arguments, [\"threshold\", \"ratio\"])) || this;\n        _this.name = \"Compressor\";\n        /**\n         * the compressor node\n         */\n        _this._compressor = _this.context.createDynamicsCompressor();\n        _this.input = _this._compressor;\n        _this.output = _this._compressor;\n        var options = optionsFromArguments(Compressor.getDefaults(), arguments, [\"threshold\", \"ratio\"]);\n        _this.threshold = new Param({\n            minValue: _this._compressor.threshold.minValue,\n            maxValue: _this._compressor.threshold.maxValue,\n            context: _this.context,\n            convert: false,\n            param: _this._compressor.threshold,\n            units: \"decibels\",\n            value: options.threshold,\n        });\n        _this.attack = new Param({\n            minValue: _this._compressor.attack.minValue,\n            maxValue: _this._compressor.attack.maxValue,\n            context: _this.context,\n            param: _this._compressor.attack,\n            units: \"time\",\n            value: options.attack,\n        });\n        _this.release = new Param({\n            minValue: _this._compressor.release.minValue,\n            maxValue: _this._compressor.release.maxValue,\n            context: _this.context,\n            param: _this._compressor.release,\n            units: \"time\",\n            value: options.release,\n        });\n        _this.knee = new Param({\n            minValue: _this._compressor.knee.minValue,\n            maxValue: _this._compressor.knee.maxValue,\n            context: _this.context,\n            convert: false,\n            param: _this._compressor.knee,\n            units: \"decibels\",\n            value: options.knee,\n        });\n        _this.ratio = new Param({\n            minValue: _this._compressor.ratio.minValue,\n            maxValue: _this._compressor.ratio.maxValue,\n            context: _this.context,\n            convert: false,\n            param: _this._compressor.ratio,\n            units: \"positive\",\n            value: options.ratio,\n        });\n        // set the defaults\n        readOnly(_this, [\"knee\", \"release\", \"attack\", \"ratio\", \"threshold\"]);\n        return _this;\n    }\n    Compressor.getDefaults = function () {\n        return Object.assign(ToneAudioNode.getDefaults(), {\n            attack: 0.003,\n            knee: 30,\n            ratio: 12,\n            release: 0.25,\n            threshold: -24,\n        });\n    };\n    Object.defineProperty(Compressor.prototype, \"reduction\", {\n        /**\n         * A read-only decibel value for metering purposes, representing the current amount of gain\n         * reduction that the compressor is applying to the signal. If fed no signal the value will be 0 (no gain reduction).\n         */\n        get: function () {\n            return this._compressor.reduction;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Compressor.prototype.dispose = function () {\n        _super.prototype.dispose.call(this);\n        this._compressor.disconnect();\n        this.attack.dispose();\n        this.release.dispose();\n        this.threshold.dispose();\n        this.ratio.dispose();\n        this.knee.dispose();\n        return this;\n    };\n    return Compressor;\n}(ToneAudioNode));\nexport { Compressor };\n//# sourceMappingURL=Compressor.js.map"]},"metadata":{},"sourceType":"module"}