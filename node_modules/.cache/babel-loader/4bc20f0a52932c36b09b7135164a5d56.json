{"ast":null,"code":"import * as tslib_1 from \"tslib\";\nimport { Effect } from \"./Effect\";\nimport { optionsFromArguments } from \"../core/util/Defaults\";\nimport { WaveShaper } from \"../signal/WaveShaper\";\n/**\n * Chebyshev is a waveshaper which is good\n * for making different types of distortion sounds.\n * Note that odd orders sound very different from even ones,\n * and order = 1 is no change.\n * Read more at [music.columbia.edu](http://music.columbia.edu/cmc/musicandcomputers/chapter4/04_06.php).\n * @example\n * import { Chebyshev, MonoSynth } from \"tone\";\n * // create a new cheby\n * const cheby = new Chebyshev(50).toDestination();\n * // create a monosynth connected to our cheby\n * const synth = new MonoSynth().connect(cheby);\n * synth.triggerAttackRelease(\"C2\", 0.4);\n * @category Effect\n */\n\nvar Chebyshev =\n/** @class */\nfunction (_super) {\n  tslib_1.__extends(Chebyshev, _super);\n\n  function Chebyshev() {\n    var _this = _super.call(this, optionsFromArguments(Chebyshev.getDefaults(), arguments, [\"order\"])) || this;\n\n    _this.name = \"Chebyshev\";\n    var options = optionsFromArguments(Chebyshev.getDefaults(), arguments, [\"order\"]);\n    _this._shaper = new WaveShaper({\n      context: _this.context,\n      length: 4096\n    });\n    _this._order = options.order;\n\n    _this.connectEffect(_this._shaper);\n\n    _this.order = options.order;\n    _this.oversample = options.oversample;\n    return _this;\n  }\n\n  Chebyshev.getDefaults = function () {\n    return Object.assign(Effect.getDefaults(), {\n      order: 1,\n      oversample: \"none\"\n    });\n  };\n  /**\n   * get the coefficient for that degree\n   * @param  x the x value\n   * @param  degree\n   * @param  memo memoize the computed value. this speeds up computation greatly.\n   */\n\n\n  Chebyshev.prototype._getCoefficient = function (x, degree, memo) {\n    if (memo.has(degree)) {\n      return memo.get(degree);\n    } else if (degree === 0) {\n      memo.set(degree, 0);\n    } else if (degree === 1) {\n      memo.set(degree, x);\n    } else {\n      memo.set(degree, 2 * x * this._getCoefficient(x, degree - 1, memo) - this._getCoefficient(x, degree - 2, memo));\n    }\n\n    return memo.get(degree);\n  };\n\n  Object.defineProperty(Chebyshev.prototype, \"order\", {\n    /**\n     * The order of the Chebyshev polynomial which creates the equation which is applied to the incoming\n     * signal through a Tone.WaveShaper. The equations are in the form:\n     * ```\n     * order 2: 2x^2 + 1\n     * order 3: 4x^3 + 3x\n     * ```\n     * @min 1\n     * @max 100\n     */\n    get: function () {\n      return this._order;\n    },\n    set: function (order) {\n      var _this = this;\n\n      this._order = order;\n\n      this._shaper.setMap(function (x) {\n        return _this._getCoefficient(x, order, new Map());\n      });\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(Chebyshev.prototype, \"oversample\", {\n    /**\n     * The oversampling of the effect. Can either be \"none\", \"2x\" or \"4x\".\n     */\n    get: function () {\n      return this._shaper.oversample;\n    },\n    set: function (oversampling) {\n      this._shaper.oversample = oversampling;\n    },\n    enumerable: true,\n    configurable: true\n  });\n\n  Chebyshev.prototype.dispose = function () {\n    _super.prototype.dispose.call(this);\n\n    this._shaper.dispose();\n\n    return this;\n  };\n\n  return Chebyshev;\n}(Effect);\n\nexport { Chebyshev };","map":{"version":3,"sources":["../../../Tone/effect/Chebyshev.ts"],"names":[],"mappings":"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","sourceRoot":"","sourcesContent":["import * as tslib_1 from \"tslib\";\nimport { Effect } from \"./Effect\";\nimport { optionsFromArguments } from \"../core/util/Defaults\";\nimport { WaveShaper } from \"../signal/WaveShaper\";\n/**\n * Chebyshev is a waveshaper which is good\n * for making different types of distortion sounds.\n * Note that odd orders sound very different from even ones,\n * and order = 1 is no change.\n * Read more at [music.columbia.edu](http://music.columbia.edu/cmc/musicandcomputers/chapter4/04_06.php).\n * @example\n * import { Chebyshev, MonoSynth } from \"tone\";\n * // create a new cheby\n * const cheby = new Chebyshev(50).toDestination();\n * // create a monosynth connected to our cheby\n * const synth = new MonoSynth().connect(cheby);\n * synth.triggerAttackRelease(\"C2\", 0.4);\n * @category Effect\n */\nvar Chebyshev = /** @class */ (function (_super) {\n    tslib_1.__extends(Chebyshev, _super);\n    function Chebyshev() {\n        var _this = _super.call(this, optionsFromArguments(Chebyshev.getDefaults(), arguments, [\"order\"])) || this;\n        _this.name = \"Chebyshev\";\n        var options = optionsFromArguments(Chebyshev.getDefaults(), arguments, [\"order\"]);\n        _this._shaper = new WaveShaper({\n            context: _this.context,\n            length: 4096\n        });\n        _this._order = options.order;\n        _this.connectEffect(_this._shaper);\n        _this.order = options.order;\n        _this.oversample = options.oversample;\n        return _this;\n    }\n    Chebyshev.getDefaults = function () {\n        return Object.assign(Effect.getDefaults(), {\n            order: 1,\n            oversample: \"none\"\n        });\n    };\n    /**\n     * get the coefficient for that degree\n     * @param  x the x value\n     * @param  degree\n     * @param  memo memoize the computed value. this speeds up computation greatly.\n     */\n    Chebyshev.prototype._getCoefficient = function (x, degree, memo) {\n        if (memo.has(degree)) {\n            return memo.get(degree);\n        }\n        else if (degree === 0) {\n            memo.set(degree, 0);\n        }\n        else if (degree === 1) {\n            memo.set(degree, x);\n        }\n        else {\n            memo.set(degree, 2 * x * this._getCoefficient(x, degree - 1, memo) - this._getCoefficient(x, degree - 2, memo));\n        }\n        return memo.get(degree);\n    };\n    Object.defineProperty(Chebyshev.prototype, \"order\", {\n        /**\n         * The order of the Chebyshev polynomial which creates the equation which is applied to the incoming\n         * signal through a Tone.WaveShaper. The equations are in the form:\n         * ```\n         * order 2: 2x^2 + 1\n         * order 3: 4x^3 + 3x\n         * ```\n         * @min 1\n         * @max 100\n         */\n        get: function () {\n            return this._order;\n        },\n        set: function (order) {\n            var _this = this;\n            this._order = order;\n            this._shaper.setMap((function (x) {\n                return _this._getCoefficient(x, order, new Map());\n            }));\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(Chebyshev.prototype, \"oversample\", {\n        /**\n         * The oversampling of the effect. Can either be \"none\", \"2x\" or \"4x\".\n         */\n        get: function () {\n            return this._shaper.oversample;\n        },\n        set: function (oversampling) {\n            this._shaper.oversample = oversampling;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Chebyshev.prototype.dispose = function () {\n        _super.prototype.dispose.call(this);\n        this._shaper.dispose();\n        return this;\n    };\n    return Chebyshev;\n}(Effect));\nexport { Chebyshev };\n//# sourceMappingURL=Chebyshev.js.map"]},"metadata":{},"sourceType":"module"}