{"ast":null,"code":"import * as tslib_1 from \"tslib\";\nimport { Gain } from \"../../core/context/Gain\";\nimport { ToneAudioNode } from \"../../core/context/ToneAudioNode\";\nimport { optionsFromArguments } from \"../../core/util/Defaults\";\nimport { readOnly } from \"../../core/util/Interface\";\n/**\n * Volume is a simple volume node, useful for creating a volume fader.\n *\n * @example\n * import { Oscillator, Volume } from \"tone\";\n * const vol = new Volume(-12).toDestination();\n * const osc = new Oscillator().connect(vol).start();\n * @category Component\n */\n\nvar Volume =\n/** @class */\nfunction (_super) {\n  tslib_1.__extends(Volume, _super);\n\n  function Volume() {\n    var _this = _super.call(this, optionsFromArguments(Volume.getDefaults(), arguments, [\"volume\"])) || this;\n\n    _this.name = \"Volume\";\n    var options = optionsFromArguments(Volume.getDefaults(), arguments, [\"volume\"]);\n    _this.input = _this.output = new Gain({\n      context: _this.context,\n      gain: options.volume,\n      units: \"decibels\"\n    });\n    _this.volume = _this.output.gain;\n    readOnly(_this, \"volume\");\n    _this._unmutedVolume = options.volume; // set the mute initially\n\n    _this.mute = options.mute;\n    return _this;\n  }\n\n  Volume.getDefaults = function () {\n    return Object.assign(ToneAudioNode.getDefaults(), {\n      mute: false,\n      volume: 0\n    });\n  };\n\n  Object.defineProperty(Volume.prototype, \"mute\", {\n    /**\n     * Mute the output.\n     * @example\n     * import { Oscillator, Volume } from \"tone\";\n     * const vol = new Volume(-12).toDestination();\n     * const osc = new Oscillator().connect(vol).start();\n     * // mute the output\n     * vol.mute = true;\n     */\n    get: function () {\n      return this.volume.value === -Infinity;\n    },\n    set: function (mute) {\n      if (!this.mute && mute) {\n        this._unmutedVolume = this.volume.value; // maybe it should ramp here?\n\n        this.volume.value = -Infinity;\n      } else if (this.mute && !mute) {\n        this.volume.value = this._unmutedVolume;\n      }\n    },\n    enumerable: true,\n    configurable: true\n  });\n  /**\n   * clean up\n   */\n\n  Volume.prototype.dispose = function () {\n    _super.prototype.dispose.call(this);\n\n    this.input.dispose();\n    this.volume.dispose();\n    return this;\n  };\n\n  return Volume;\n}(ToneAudioNode);\n\nexport { Volume };","map":{"version":3,"sources":["../../../../Tone/component/channel/Volume.ts"],"names":[],"mappings":";AAAA,SAAS,IAAT,QAAqB,yBAArB;AAEA,SAAS,aAAT,QAAoD,kCAApD;AAEA,SAAS,oBAAT,QAAqC,0BAArC;AACA,SAAS,QAAT,QAAyB,2BAAzB;AAOA;;;;;;;;;;AASA,IAAA,MAAA;AAAA;AAAA,UAAA,MAAA,EAAA;AAA4B,EAAA,OAAA,CAAA,SAAA,CAAA,MAAA,EAAA,MAAA;;AAkC3B,WAAA,MAAA,GAAA;AAAA,QAAA,KAAA,GAEC,MAAA,CAAA,IAAA,CAAA,IAAA,EAAM,oBAAoB,CAAC,MAAM,CAAC,WAAP,EAAD,EAAuB,SAAvB,EAAkC,CAAC,QAAD,CAAlC,CAA1B,KAAwE,IAFzE;;AAhCS,IAAA,KAAA,CAAA,IAAA,GAAe,QAAf;AAmCR,QAAM,OAAO,GAAG,oBAAoB,CAAC,MAAM,CAAC,WAAP,EAAD,EAAuB,SAAvB,EAAkC,CAAC,QAAD,CAAlC,CAApC;AAEA,IAAA,KAAI,CAAC,KAAL,GAAa,KAAI,CAAC,MAAL,GAAc,IAAI,IAAJ,CAAS;AACnC,MAAA,OAAO,EAAE,KAAI,CAAC,OADqB;AAEnC,MAAA,IAAI,EAAE,OAAO,CAAC,MAFqB;AAGnC,MAAA,KAAK,EAAE;AAH4B,KAAT,CAA3B;AAKA,IAAA,KAAI,CAAC,MAAL,GAAc,KAAI,CAAC,MAAL,CAAY,IAA1B;AACA,IAAA,QAAQ,CAAC,KAAD,EAAO,QAAP,CAAR;AACA,IAAA,KAAI,CAAC,cAAL,GAAsB,OAAO,CAAC,MAA9B,CAZD,CAcC;;AACA,IAAA,KAAI,CAAC,IAAL,GAAY,OAAO,CAAC,IAApB;;AACA;;AAEM,EAAA,MAAA,CAAA,WAAA,GAAP,YAAA;AACC,WAAO,MAAM,CAAC,MAAP,CAAc,aAAa,CAAC,WAAd,EAAd,EAA2C;AACjD,MAAA,IAAI,EAAE,KAD2C;AAEjD,MAAA,MAAM,EAAE;AAFyC,KAA3C,CAAP;AAIA,GALM;;AAgBP,EAAA,MAAA,CAAA,cAAA,CAAI,MAAA,CAAA,SAAJ,EAAI,MAAJ,EAAQ;AATR;;;;;;;;;SASA,YAAA;AACC,aAAO,KAAK,MAAL,CAAY,KAAZ,KAAsB,CAAC,QAA9B;AACA,KAFO;SAGR,UAAS,IAAT,EAAsB;AACrB,UAAI,CAAC,KAAK,IAAN,IAAc,IAAlB,EAAwB;AACvB,aAAK,cAAL,GAAsB,KAAK,MAAL,CAAY,KAAlC,CADuB,CAEvB;;AACA,aAAK,MAAL,CAAY,KAAZ,GAAoB,CAAC,QAArB;AACA,OAJD,MAIO,IAAI,KAAK,IAAL,IAAa,CAAC,IAAlB,EAAwB;AAC9B,aAAK,MAAL,CAAY,KAAZ,GAAoB,KAAK,cAAzB;AACA;AACD,KAXO;oBAAA;;AAAA,GAAR;AAaA;;;;AAGA,EAAA,MAAA,CAAA,SAAA,CAAA,OAAA,GAAA,YAAA;AACC,IAAA,MAAA,CAAA,SAAA,CAAM,OAAN,CAAa,IAAb,CAAa,IAAb;;AACA,SAAK,KAAL,CAAW,OAAX;AACA,SAAK,MAAL,CAAY,OAAZ;AACA,WAAO,IAAP;AACA,GALD;;AAMD,SAAA,MAAA;AAAC,CA1FD,CAA4B,aAA5B,CAAA","sourceRoot":"","sourcesContent":["import * as tslib_1 from \"tslib\";\nimport { Gain } from \"../../core/context/Gain\";\nimport { ToneAudioNode } from \"../../core/context/ToneAudioNode\";\nimport { optionsFromArguments } from \"../../core/util/Defaults\";\nimport { readOnly } from \"../../core/util/Interface\";\n/**\n * Volume is a simple volume node, useful for creating a volume fader.\n *\n * @example\n * import { Oscillator, Volume } from \"tone\";\n * const vol = new Volume(-12).toDestination();\n * const osc = new Oscillator().connect(vol).start();\n * @category Component\n */\nvar Volume = /** @class */ (function (_super) {\n    tslib_1.__extends(Volume, _super);\n    function Volume() {\n        var _this = _super.call(this, optionsFromArguments(Volume.getDefaults(), arguments, [\"volume\"])) || this;\n        _this.name = \"Volume\";\n        var options = optionsFromArguments(Volume.getDefaults(), arguments, [\"volume\"]);\n        _this.input = _this.output = new Gain({\n            context: _this.context,\n            gain: options.volume,\n            units: \"decibels\",\n        });\n        _this.volume = _this.output.gain;\n        readOnly(_this, \"volume\");\n        _this._unmutedVolume = options.volume;\n        // set the mute initially\n        _this.mute = options.mute;\n        return _this;\n    }\n    Volume.getDefaults = function () {\n        return Object.assign(ToneAudioNode.getDefaults(), {\n            mute: false,\n            volume: 0,\n        });\n    };\n    Object.defineProperty(Volume.prototype, \"mute\", {\n        /**\n         * Mute the output.\n         * @example\n         * import { Oscillator, Volume } from \"tone\";\n         * const vol = new Volume(-12).toDestination();\n         * const osc = new Oscillator().connect(vol).start();\n         * // mute the output\n         * vol.mute = true;\n         */\n        get: function () {\n            return this.volume.value === -Infinity;\n        },\n        set: function (mute) {\n            if (!this.mute && mute) {\n                this._unmutedVolume = this.volume.value;\n                // maybe it should ramp here?\n                this.volume.value = -Infinity;\n            }\n            else if (this.mute && !mute) {\n                this.volume.value = this._unmutedVolume;\n            }\n        },\n        enumerable: true,\n        configurable: true\n    });\n    /**\n     * clean up\n     */\n    Volume.prototype.dispose = function () {\n        _super.prototype.dispose.call(this);\n        this.input.dispose();\n        this.volume.dispose();\n        return this;\n    };\n    return Volume;\n}(ToneAudioNode));\nexport { Volume };\n//# sourceMappingURL=Volume.js.map"]},"metadata":{},"sourceType":"module"}