{"ast":null,"code":"import * as tslib_1 from \"tslib\";\nimport { connectSeries } from \"../core/context/ToneAudioNode\";\nimport { Gain } from \"../core/context/Gain\";\nimport { optionsFromArguments } from \"../core/util/Defaults\";\nimport { Negate } from \"../signal/Negate\";\nimport { Signal } from \"../signal/Signal\";\n/**\n * Subtract the signal connected to the input is subtracted from the signal connected\n * The subtrahend.\n *\n * @example\n * import { Signal, Subtract } from \"tone\";\n * // subtract a scalar from a signal\n * const sub = new Subtract(1);\n * const sig = new Signal(4).connect(sub);\n * // the output of sub is 3.\n * @example\n * import { Signal, Subtract } from \"tone\";\n * // subtract two signals\n * const sub = new Subtract();\n * const sigA = new Signal(10);\n * const sigB = new Signal(2.5);\n * sigA.connect(sub);\n * sigB.connect(sub.subtrahend);\n * // output of sub is 7.5\n * @category Signal\n */\n\nvar Subtract =\n/** @class */\nfunction (_super) {\n  tslib_1.__extends(Subtract, _super);\n\n  function Subtract() {\n    var _this = _super.call(this, Object.assign(optionsFromArguments(Subtract.getDefaults(), arguments, [\"value\"]))) || this;\n\n    _this.override = false;\n    _this.name = \"Subtract\";\n    /**\n     * the summing node\n     */\n\n    _this._sum = new Gain({\n      context: _this.context\n    });\n    _this.input = _this._sum;\n    _this.output = _this._sum;\n    /**\n     * Negate the input of the second input before connecting it to the summing node.\n     */\n\n    _this._neg = new Negate({\n      context: _this.context\n    });\n    /**\n     * The value which is subtracted from the main signal\n     */\n\n    _this.subtrahend = _this._param;\n    connectSeries(_this._constantSource, _this._neg, _this._sum);\n    return _this;\n  }\n\n  Subtract.getDefaults = function () {\n    return Object.assign(Signal.getDefaults(), {\n      value: 0\n    });\n  };\n\n  Subtract.prototype.dispose = function () {\n    _super.prototype.dispose.call(this);\n\n    this._neg.dispose();\n\n    this._sum.dispose();\n\n    return this;\n  };\n\n  return Subtract;\n}(Signal);\n\nexport { Subtract };","map":{"version":3,"sources":["../../../Tone/signal/Subtract.ts"],"names":[],"mappings":";AAAA,SAAS,aAAT,QAA8B,+BAA9B;AACA,SAAS,IAAT,QAAqB,sBAArB;AAEA,SAAS,oBAAT,QAAqC,uBAArC;AACA,SAAS,MAAT,QAAuB,kBAAvB;AACA,SAAS,MAAT,QAAsC,kBAAtC;AAEA;;;;;;;;;;;;;;;;;;;;;;AAqBA,IAAA,QAAA;AAAA;AAAA,UAAA,MAAA,EAAA;AAA8B,EAAA,OAAA,CAAA,SAAA,CAAA,QAAA,EAAA,MAAA;;AA6B7B,WAAA,QAAA,GAAA;AAAA,QAAA,KAAA,GACC,MAAA,CAAA,IAAA,CAAA,IAAA,EAAM,MAAM,CAAC,MAAP,CAAc,oBAAoB,CAAC,QAAQ,CAAC,WAAT,EAAD,EAAyB,SAAzB,EAAoC,CAAC,OAAD,CAApC,CAAlC,CAAN,KAAwF,IADzF;;AA3BA,IAAA,KAAA,CAAA,QAAA,GAAW,KAAX;AAES,IAAA,KAAA,CAAA,IAAA,GAAe,UAAf;AAET;;;;AAGQ,IAAA,KAAA,CAAA,IAAA,GAAa,IAAI,IAAJ,CAAS;AAAE,MAAA,OAAO,EAAE,KAAI,CAAC;AAAhB,KAAT,CAAb;AACC,IAAA,KAAA,CAAA,KAAA,GAAc,KAAI,CAAC,IAAnB;AACA,IAAA,KAAA,CAAA,MAAA,GAAe,KAAI,CAAC,IAApB;AAET;;;;AAGQ,IAAA,KAAA,CAAA,IAAA,GAAe,IAAI,MAAJ,CAAW;AAAE,MAAA,OAAO,EAAE,KAAI,CAAC;AAAhB,KAAX,CAAf;AAER;;;;AAGA,IAAA,KAAA,CAAA,UAAA,GAA8B,KAAI,CAAC,MAAnC;AAWC,IAAA,aAAa,CAAC,KAAI,CAAC,eAAN,EAAuB,KAAI,CAAC,IAA5B,EAAkC,KAAI,CAAC,IAAvC,CAAb;;AACA;;AAEM,EAAA,QAAA,CAAA,WAAA,GAAP,YAAA;AACC,WAAO,MAAM,CAAC,MAAP,CAAc,MAAM,CAAC,WAAP,EAAd,EAAoC;AAC1C,MAAA,KAAK,EAAE;AADmC,KAApC,CAAP;AAGA,GAJM;;AAMP,EAAA,QAAA,CAAA,SAAA,CAAA,OAAA,GAAA,YAAA;AACC,IAAA,MAAA,CAAA,SAAA,CAAM,OAAN,CAAa,IAAb,CAAa,IAAb;;AACA,SAAK,IAAL,CAAU,OAAV;;AACA,SAAK,IAAL,CAAU,OAAV;;AACA,WAAO,IAAP;AACA,GALD;;AAMD,SAAA,QAAA;AAAC,CA/CD,CAA8B,MAA9B,CAAA","sourceRoot":"","sourcesContent":["import * as tslib_1 from \"tslib\";\nimport { connectSeries } from \"../core/context/ToneAudioNode\";\nimport { Gain } from \"../core/context/Gain\";\nimport { optionsFromArguments } from \"../core/util/Defaults\";\nimport { Negate } from \"../signal/Negate\";\nimport { Signal } from \"../signal/Signal\";\n/**\n * Subtract the signal connected to the input is subtracted from the signal connected\n * The subtrahend.\n *\n * @example\n * import { Signal, Subtract } from \"tone\";\n * // subtract a scalar from a signal\n * const sub = new Subtract(1);\n * const sig = new Signal(4).connect(sub);\n * // the output of sub is 3.\n * @example\n * import { Signal, Subtract } from \"tone\";\n * // subtract two signals\n * const sub = new Subtract();\n * const sigA = new Signal(10);\n * const sigB = new Signal(2.5);\n * sigA.connect(sub);\n * sigB.connect(sub.subtrahend);\n * // output of sub is 7.5\n * @category Signal\n */\nvar Subtract = /** @class */ (function (_super) {\n    tslib_1.__extends(Subtract, _super);\n    function Subtract() {\n        var _this = _super.call(this, Object.assign(optionsFromArguments(Subtract.getDefaults(), arguments, [\"value\"]))) || this;\n        _this.override = false;\n        _this.name = \"Subtract\";\n        /**\n         * the summing node\n         */\n        _this._sum = new Gain({ context: _this.context });\n        _this.input = _this._sum;\n        _this.output = _this._sum;\n        /**\n         * Negate the input of the second input before connecting it to the summing node.\n         */\n        _this._neg = new Negate({ context: _this.context });\n        /**\n         * The value which is subtracted from the main signal\n         */\n        _this.subtrahend = _this._param;\n        connectSeries(_this._constantSource, _this._neg, _this._sum);\n        return _this;\n    }\n    Subtract.getDefaults = function () {\n        return Object.assign(Signal.getDefaults(), {\n            value: 0,\n        });\n    };\n    Subtract.prototype.dispose = function () {\n        _super.prototype.dispose.call(this);\n        this._neg.dispose();\n        this._sum.dispose();\n        return this;\n    };\n    return Subtract;\n}(Signal));\nexport { Subtract };\n//# sourceMappingURL=Subtract.js.map"]},"metadata":{},"sourceType":"module"}