{"ast":null,"code":"import * as tslib_1 from \"tslib\";\nimport { Param } from \"../core/context/Param\";\nimport { ToneAudioNode } from \"../core/context/ToneAudioNode\";\nimport { connect } from \"../core/context/ToneAudioNode\";\nimport { isAudioParam } from \"../core/util/AdvancedTypeCheck\";\nimport { optionsFromArguments } from \"../core/util/Defaults\";\nimport { ToneConstantSource } from \"./ToneConstantSource\";\n/**\n * A signal is an audio-rate value. Tone.Signal is a core component of the library.\n * Unlike a number, Signals can be scheduled with sample-level accuracy. Tone.Signal\n * has all of the methods available to native Web Audio\n * [AudioParam](http://webaudio.github.io/web-audio-api/#the-audioparam-interface)\n * as well as additional conveniences. Read more about working with signals\n * [here](https://github.com/Tonejs/Tone.js/wiki/Signals).\n *\n * @example\n * import { Oscillator, Signal } from \"tone\";\n * const osc = new Oscillator().toDestination().start();\n * // a scheduleable signal which can be connected to control an AudioParam or another Signal\n * const signal = new Signal({\n * \tvalue: \"C4\",\n * \tunits: \"frequency\"\n * }).connect(osc.frequency);\n * // the scheduled ramp controls the connected signal\n * signal.rampTo(\"C2\", 4, \"+0.5\");\n * @category Signal\n */\n\nvar Signal =\n/** @class */\nfunction (_super) {\n  tslib_1.__extends(Signal, _super);\n\n  function Signal() {\n    var _this = _super.call(this, optionsFromArguments(Signal.getDefaults(), arguments, [\"value\", \"units\"])) || this;\n\n    _this.name = \"Signal\";\n    /**\n     * Indicates if the value should be overridden on connection.\n     */\n\n    _this.override = true;\n    var options = optionsFromArguments(Signal.getDefaults(), arguments, [\"value\", \"units\"]);\n    _this.output = _this._constantSource = new ToneConstantSource({\n      context: _this.context,\n      convert: options.convert,\n      offset: options.value,\n      units: options.units,\n      minValue: options.minValue,\n      maxValue: options.maxValue\n    });\n\n    _this._constantSource.start(0);\n\n    _this.input = _this._param = _this._constantSource.offset;\n    return _this;\n  }\n\n  Signal.getDefaults = function () {\n    return Object.assign(ToneAudioNode.getDefaults(), {\n      convert: true,\n      units: \"number\",\n      value: 0\n    });\n  };\n\n  Signal.prototype.connect = function (destination, outputNum, inputNum) {\n    if (outputNum === void 0) {\n      outputNum = 0;\n    }\n\n    if (inputNum === void 0) {\n      inputNum = 0;\n    } // start it only when connected to something\n\n\n    connectSignal(this, destination, outputNum, inputNum);\n    return this;\n  };\n\n  Signal.prototype.dispose = function () {\n    _super.prototype.dispose.call(this);\n\n    this._param.dispose();\n\n    this._constantSource.dispose();\n\n    return this;\n  }; //-------------------------------------\n  // ABSTRACT PARAM INTERFACE\n  // just a proxy for the ConstantSourceNode's offset AudioParam\n  // all docs are generated from AbstractParam.ts\n  //-------------------------------------\n\n\n  Signal.prototype.setValueAtTime = function (value, time) {\n    this._param.setValueAtTime(value, time);\n\n    return this;\n  };\n\n  Signal.prototype.getValueAtTime = function (time) {\n    return this._param.getValueAtTime(time);\n  };\n\n  Signal.prototype.setRampPoint = function (time) {\n    this._param.setRampPoint(time);\n\n    return this;\n  };\n\n  Signal.prototype.linearRampToValueAtTime = function (value, time) {\n    this._param.linearRampToValueAtTime(value, time);\n\n    return this;\n  };\n\n  Signal.prototype.exponentialRampToValueAtTime = function (value, time) {\n    this._param.exponentialRampToValueAtTime(value, time);\n\n    return this;\n  };\n\n  Signal.prototype.exponentialRampTo = function (value, rampTime, startTime) {\n    this._param.exponentialRampTo(value, rampTime, startTime);\n\n    return this;\n  };\n\n  Signal.prototype.linearRampTo = function (value, rampTime, startTime) {\n    this._param.linearRampTo(value, rampTime, startTime);\n\n    return this;\n  };\n\n  Signal.prototype.targetRampTo = function (value, rampTime, startTime) {\n    this._param.targetRampTo(value, rampTime, startTime);\n\n    return this;\n  };\n\n  Signal.prototype.exponentialApproachValueAtTime = function (value, time, rampTime) {\n    this._param.exponentialApproachValueAtTime(value, time, rampTime);\n\n    return this;\n  };\n\n  Signal.prototype.setTargetAtTime = function (value, startTime, timeConstant) {\n    this._param.setTargetAtTime(value, startTime, timeConstant);\n\n    return this;\n  };\n\n  Signal.prototype.setValueCurveAtTime = function (values, startTime, duration, scaling) {\n    this._param.setValueCurveAtTime(values, startTime, duration, scaling);\n\n    return this;\n  };\n\n  Signal.prototype.cancelScheduledValues = function (time) {\n    this._param.cancelScheduledValues(time);\n\n    return this;\n  };\n\n  Signal.prototype.cancelAndHoldAtTime = function (time) {\n    this._param.cancelAndHoldAtTime(time);\n\n    return this;\n  };\n\n  Signal.prototype.rampTo = function (value, rampTime, startTime) {\n    this._param.rampTo(value, rampTime, startTime);\n\n    return this;\n  };\n\n  Object.defineProperty(Signal.prototype, \"value\", {\n    get: function () {\n      return this._param.value;\n    },\n    set: function (value) {\n      this._param.value = value;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(Signal.prototype, \"convert\", {\n    get: function () {\n      return this._param.convert;\n    },\n    set: function (convert) {\n      this._param.convert = convert;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(Signal.prototype, \"units\", {\n    get: function () {\n      return this._param.units;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(Signal.prototype, \"overridden\", {\n    get: function () {\n      return this._param.overridden;\n    },\n    set: function (overridden) {\n      this._param.overridden = overridden;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(Signal.prototype, \"maxValue\", {\n    get: function () {\n      return this._param.maxValue;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(Signal.prototype, \"minValue\", {\n    get: function () {\n      return this._param.minValue;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  /**\n   * See [[Param.apply]].\n   */\n\n  Signal.prototype.apply = function (param) {\n    this._param.apply(param);\n\n    return this;\n  };\n\n  return Signal;\n}(ToneAudioNode);\n\nexport { Signal };\n/**\n * When connecting from a signal, it's necessary to zero out the node destination\n * node if that node is also a signal. If the destination is not 0, then the values\n * will be summed. This method insures that the output of the destination signal will\n * be the same as the source signal, making the destination signal a pass through node.\n * @param signal The output signal to connect from\n * @param destination the destination to connect to\n * @param outputNum the optional output number\n * @param inputNum the input number\n */\n\nexport function connectSignal(signal, destination, outputNum, inputNum) {\n  if (destination instanceof Param || isAudioParam(destination) || destination instanceof Signal && destination.override) {\n    // cancel changes\n    destination.cancelScheduledValues(0); // reset the value\n\n    destination.setValueAtTime(0, 0); // mark the value as overridden\n\n    if (destination instanceof Signal) {\n      destination.overridden = true;\n    }\n  }\n\n  connect(signal, destination, outputNum, inputNum);\n}","map":{"version":3,"sources":["../../../Tone/signal/Signal.ts"],"names":[],"mappings":"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","sourceRoot":"","sourcesContent":["import * as tslib_1 from \"tslib\";\nimport { Param } from \"../core/context/Param\";\nimport { ToneAudioNode } from \"../core/context/ToneAudioNode\";\nimport { connect } from \"../core/context/ToneAudioNode\";\nimport { isAudioParam } from \"../core/util/AdvancedTypeCheck\";\nimport { optionsFromArguments } from \"../core/util/Defaults\";\nimport { ToneConstantSource } from \"./ToneConstantSource\";\n/**\n * A signal is an audio-rate value. Tone.Signal is a core component of the library.\n * Unlike a number, Signals can be scheduled with sample-level accuracy. Tone.Signal\n * has all of the methods available to native Web Audio\n * [AudioParam](http://webaudio.github.io/web-audio-api/#the-audioparam-interface)\n * as well as additional conveniences. Read more about working with signals\n * [here](https://github.com/Tonejs/Tone.js/wiki/Signals).\n *\n * @example\n * import { Oscillator, Signal } from \"tone\";\n * const osc = new Oscillator().toDestination().start();\n * // a scheduleable signal which can be connected to control an AudioParam or another Signal\n * const signal = new Signal({\n * \tvalue: \"C4\",\n * \tunits: \"frequency\"\n * }).connect(osc.frequency);\n * // the scheduled ramp controls the connected signal\n * signal.rampTo(\"C2\", 4, \"+0.5\");\n * @category Signal\n */\nvar Signal = /** @class */ (function (_super) {\n    tslib_1.__extends(Signal, _super);\n    function Signal() {\n        var _this = _super.call(this, optionsFromArguments(Signal.getDefaults(), arguments, [\"value\", \"units\"])) || this;\n        _this.name = \"Signal\";\n        /**\n         * Indicates if the value should be overridden on connection.\n         */\n        _this.override = true;\n        var options = optionsFromArguments(Signal.getDefaults(), arguments, [\"value\", \"units\"]);\n        _this.output = _this._constantSource = new ToneConstantSource({\n            context: _this.context,\n            convert: options.convert,\n            offset: options.value,\n            units: options.units,\n            minValue: options.minValue,\n            maxValue: options.maxValue,\n        });\n        _this._constantSource.start(0);\n        _this.input = _this._param = _this._constantSource.offset;\n        return _this;\n    }\n    Signal.getDefaults = function () {\n        return Object.assign(ToneAudioNode.getDefaults(), {\n            convert: true,\n            units: \"number\",\n            value: 0,\n        });\n    };\n    Signal.prototype.connect = function (destination, outputNum, inputNum) {\n        if (outputNum === void 0) { outputNum = 0; }\n        if (inputNum === void 0) { inputNum = 0; }\n        // start it only when connected to something\n        connectSignal(this, destination, outputNum, inputNum);\n        return this;\n    };\n    Signal.prototype.dispose = function () {\n        _super.prototype.dispose.call(this);\n        this._param.dispose();\n        this._constantSource.dispose();\n        return this;\n    };\n    //-------------------------------------\n    // ABSTRACT PARAM INTERFACE\n    // just a proxy for the ConstantSourceNode's offset AudioParam\n    // all docs are generated from AbstractParam.ts\n    //-------------------------------------\n    Signal.prototype.setValueAtTime = function (value, time) {\n        this._param.setValueAtTime(value, time);\n        return this;\n    };\n    Signal.prototype.getValueAtTime = function (time) {\n        return this._param.getValueAtTime(time);\n    };\n    Signal.prototype.setRampPoint = function (time) {\n        this._param.setRampPoint(time);\n        return this;\n    };\n    Signal.prototype.linearRampToValueAtTime = function (value, time) {\n        this._param.linearRampToValueAtTime(value, time);\n        return this;\n    };\n    Signal.prototype.exponentialRampToValueAtTime = function (value, time) {\n        this._param.exponentialRampToValueAtTime(value, time);\n        return this;\n    };\n    Signal.prototype.exponentialRampTo = function (value, rampTime, startTime) {\n        this._param.exponentialRampTo(value, rampTime, startTime);\n        return this;\n    };\n    Signal.prototype.linearRampTo = function (value, rampTime, startTime) {\n        this._param.linearRampTo(value, rampTime, startTime);\n        return this;\n    };\n    Signal.prototype.targetRampTo = function (value, rampTime, startTime) {\n        this._param.targetRampTo(value, rampTime, startTime);\n        return this;\n    };\n    Signal.prototype.exponentialApproachValueAtTime = function (value, time, rampTime) {\n        this._param.exponentialApproachValueAtTime(value, time, rampTime);\n        return this;\n    };\n    Signal.prototype.setTargetAtTime = function (value, startTime, timeConstant) {\n        this._param.setTargetAtTime(value, startTime, timeConstant);\n        return this;\n    };\n    Signal.prototype.setValueCurveAtTime = function (values, startTime, duration, scaling) {\n        this._param.setValueCurveAtTime(values, startTime, duration, scaling);\n        return this;\n    };\n    Signal.prototype.cancelScheduledValues = function (time) {\n        this._param.cancelScheduledValues(time);\n        return this;\n    };\n    Signal.prototype.cancelAndHoldAtTime = function (time) {\n        this._param.cancelAndHoldAtTime(time);\n        return this;\n    };\n    Signal.prototype.rampTo = function (value, rampTime, startTime) {\n        this._param.rampTo(value, rampTime, startTime);\n        return this;\n    };\n    Object.defineProperty(Signal.prototype, \"value\", {\n        get: function () {\n            return this._param.value;\n        },\n        set: function (value) {\n            this._param.value = value;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(Signal.prototype, \"convert\", {\n        get: function () {\n            return this._param.convert;\n        },\n        set: function (convert) {\n            this._param.convert = convert;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(Signal.prototype, \"units\", {\n        get: function () {\n            return this._param.units;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(Signal.prototype, \"overridden\", {\n        get: function () {\n            return this._param.overridden;\n        },\n        set: function (overridden) {\n            this._param.overridden = overridden;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(Signal.prototype, \"maxValue\", {\n        get: function () {\n            return this._param.maxValue;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(Signal.prototype, \"minValue\", {\n        get: function () {\n            return this._param.minValue;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    /**\n     * See [[Param.apply]].\n     */\n    Signal.prototype.apply = function (param) {\n        this._param.apply(param);\n        return this;\n    };\n    return Signal;\n}(ToneAudioNode));\nexport { Signal };\n/**\n * When connecting from a signal, it's necessary to zero out the node destination\n * node if that node is also a signal. If the destination is not 0, then the values\n * will be summed. This method insures that the output of the destination signal will\n * be the same as the source signal, making the destination signal a pass through node.\n * @param signal The output signal to connect from\n * @param destination the destination to connect to\n * @param outputNum the optional output number\n * @param inputNum the input number\n */\nexport function connectSignal(signal, destination, outputNum, inputNum) {\n    if (destination instanceof Param || isAudioParam(destination) ||\n        (destination instanceof Signal && destination.override)) {\n        // cancel changes\n        destination.cancelScheduledValues(0);\n        // reset the value\n        destination.setValueAtTime(0, 0);\n        // mark the value as overridden\n        if (destination instanceof Signal) {\n            destination.overridden = true;\n        }\n    }\n    connect(signal, destination, outputNum, inputNum);\n}\n//# sourceMappingURL=Signal.js.map"]},"metadata":{},"sourceType":"module"}