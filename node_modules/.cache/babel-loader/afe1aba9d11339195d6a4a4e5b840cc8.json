{"ast":null,"code":"import * as tslib_1 from \"tslib\";\nimport { Gain } from \"../../core/context/Gain\";\nimport { ToneAudioNode } from \"../../core/context/ToneAudioNode\";\nimport { optionsFromArguments } from \"../../core/util/Defaults\";\nimport { readOnly, writable } from \"../../core/util/Interface\";\nimport { Signal } from \"../../signal/Signal\";\nimport { Filter } from \"../filter/Filter\";\n/**\n * Split the incoming signal into three bands (low, mid, high)\n * with two crossover frequency controls.\n * ```\n *            +----------------------+\n *          +-> input < lowFrequency +------------------> low\n *          | +----------------------+\n *          |\n *          | +--------------------------------------+\n * input ---+-> lowFrequency < input < highFrequency +--> mid\n *          | +--------------------------------------+\n *          |\n *          | +-----------------------+\n *          +-> highFrequency < input +-----------------> high\n *            +-----------------------+\n * ```\n * @category Component\n */\n\nvar MultibandSplit =\n/** @class */\nfunction (_super) {\n  tslib_1.__extends(MultibandSplit, _super);\n\n  function MultibandSplit() {\n    var _this = _super.call(this, optionsFromArguments(MultibandSplit.getDefaults(), arguments, [\"lowFrequency\", \"highFrequency\"])) || this;\n\n    _this.name = \"MultibandSplit\";\n    /**\n     * the input\n     */\n\n    _this.input = new Gain({\n      context: _this.context\n    });\n    /**\n     * no output node, use either low, mid or high outputs\n     */\n\n    _this.output = undefined;\n    /**\n     * The low band.\n     */\n\n    _this.low = new Filter({\n      context: _this.context,\n      frequency: 0,\n      type: \"lowpass\"\n    });\n    /**\n     * the lower filter of the mid band\n     */\n\n    _this._lowMidFilter = new Filter({\n      context: _this.context,\n      frequency: 0,\n      type: \"highpass\"\n    });\n    /**\n     * The mid band output.\n     */\n\n    _this.mid = new Filter({\n      context: _this.context,\n      frequency: 0,\n      type: \"lowpass\"\n    });\n    /**\n     * The high band output.\n     */\n\n    _this.high = new Filter({\n      context: _this.context,\n      frequency: 0,\n      type: \"highpass\"\n    });\n    _this._internalChannels = [_this.low, _this.mid, _this.high];\n    var options = optionsFromArguments(MultibandSplit.getDefaults(), arguments, [\"lowFrequency\", \"highFrequency\"]);\n    _this.lowFrequency = new Signal({\n      context: _this.context,\n      units: \"frequency\",\n      value: options.lowFrequency\n    });\n    _this.highFrequency = new Signal({\n      context: _this.context,\n      units: \"frequency\",\n      value: options.highFrequency\n    });\n    _this.Q = new Signal({\n      context: _this.context,\n      units: \"positive\",\n      value: options.Q\n    });\n\n    _this.input.fan(_this.low, _this.high);\n\n    _this.input.chain(_this._lowMidFilter, _this.mid); // the frequency control signal\n\n\n    _this.lowFrequency.fan(_this.low.frequency, _this._lowMidFilter.frequency);\n\n    _this.highFrequency.fan(_this.mid.frequency, _this.high.frequency); // the Q value\n\n\n    _this.Q.connect(_this.low.Q);\n\n    _this.Q.connect(_this._lowMidFilter.Q);\n\n    _this.Q.connect(_this.mid.Q);\n\n    _this.Q.connect(_this.high.Q);\n\n    readOnly(_this, [\"high\", \"mid\", \"low\", \"highFrequency\", \"lowFrequency\"]);\n    return _this;\n  }\n\n  MultibandSplit.getDefaults = function () {\n    return Object.assign(ToneAudioNode.getDefaults(), {\n      Q: 1,\n      highFrequency: 2500,\n      lowFrequency: 400\n    });\n  };\n  /**\n   * Clean up.\n   */\n\n\n  MultibandSplit.prototype.dispose = function () {\n    _super.prototype.dispose.call(this);\n\n    writable(this, [\"high\", \"mid\", \"low\", \"highFrequency\", \"lowFrequency\"]);\n    this.low.dispose();\n\n    this._lowMidFilter.dispose();\n\n    this.mid.dispose();\n    this.high.dispose();\n    this.lowFrequency.dispose();\n    this.highFrequency.dispose();\n    this.Q.dispose();\n    return this;\n  };\n\n  return MultibandSplit;\n}(ToneAudioNode);\n\nexport { MultibandSplit };","map":{"version":3,"sources":["../../../../Tone/component/channel/MultibandSplit.ts"],"names":[],"mappings":"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","sourceRoot":"","sourcesContent":["import * as tslib_1 from \"tslib\";\nimport { Gain } from \"../../core/context/Gain\";\nimport { ToneAudioNode } from \"../../core/context/ToneAudioNode\";\nimport { optionsFromArguments } from \"../../core/util/Defaults\";\nimport { readOnly, writable } from \"../../core/util/Interface\";\nimport { Signal } from \"../../signal/Signal\";\nimport { Filter } from \"../filter/Filter\";\n/**\n * Split the incoming signal into three bands (low, mid, high)\n * with two crossover frequency controls.\n * ```\n *            +----------------------+\n *          +-> input < lowFrequency +------------------> low\n *          | +----------------------+\n *          |\n *          | +--------------------------------------+\n * input ---+-> lowFrequency < input < highFrequency +--> mid\n *          | +--------------------------------------+\n *          |\n *          | +-----------------------+\n *          +-> highFrequency < input +-----------------> high\n *            +-----------------------+\n * ```\n * @category Component\n */\nvar MultibandSplit = /** @class */ (function (_super) {\n    tslib_1.__extends(MultibandSplit, _super);\n    function MultibandSplit() {\n        var _this = _super.call(this, optionsFromArguments(MultibandSplit.getDefaults(), arguments, [\"lowFrequency\", \"highFrequency\"])) || this;\n        _this.name = \"MultibandSplit\";\n        /**\n         * the input\n         */\n        _this.input = new Gain({ context: _this.context });\n        /**\n         * no output node, use either low, mid or high outputs\n         */\n        _this.output = undefined;\n        /**\n         * The low band.\n         */\n        _this.low = new Filter({\n            context: _this.context,\n            frequency: 0,\n            type: \"lowpass\",\n        });\n        /**\n         * the lower filter of the mid band\n         */\n        _this._lowMidFilter = new Filter({\n            context: _this.context,\n            frequency: 0,\n            type: \"highpass\",\n        });\n        /**\n         * The mid band output.\n         */\n        _this.mid = new Filter({\n            context: _this.context,\n            frequency: 0,\n            type: \"lowpass\",\n        });\n        /**\n         * The high band output.\n         */\n        _this.high = new Filter({\n            context: _this.context,\n            frequency: 0,\n            type: \"highpass\",\n        });\n        _this._internalChannels = [_this.low, _this.mid, _this.high];\n        var options = optionsFromArguments(MultibandSplit.getDefaults(), arguments, [\"lowFrequency\", \"highFrequency\"]);\n        _this.lowFrequency = new Signal({\n            context: _this.context,\n            units: \"frequency\",\n            value: options.lowFrequency,\n        });\n        _this.highFrequency = new Signal({\n            context: _this.context,\n            units: \"frequency\",\n            value: options.highFrequency,\n        });\n        _this.Q = new Signal({\n            context: _this.context,\n            units: \"positive\",\n            value: options.Q,\n        });\n        _this.input.fan(_this.low, _this.high);\n        _this.input.chain(_this._lowMidFilter, _this.mid);\n        // the frequency control signal\n        _this.lowFrequency.fan(_this.low.frequency, _this._lowMidFilter.frequency);\n        _this.highFrequency.fan(_this.mid.frequency, _this.high.frequency);\n        // the Q value\n        _this.Q.connect(_this.low.Q);\n        _this.Q.connect(_this._lowMidFilter.Q);\n        _this.Q.connect(_this.mid.Q);\n        _this.Q.connect(_this.high.Q);\n        readOnly(_this, [\"high\", \"mid\", \"low\", \"highFrequency\", \"lowFrequency\"]);\n        return _this;\n    }\n    MultibandSplit.getDefaults = function () {\n        return Object.assign(ToneAudioNode.getDefaults(), {\n            Q: 1,\n            highFrequency: 2500,\n            lowFrequency: 400,\n        });\n    };\n    /**\n     * Clean up.\n     */\n    MultibandSplit.prototype.dispose = function () {\n        _super.prototype.dispose.call(this);\n        writable(this, [\"high\", \"mid\", \"low\", \"highFrequency\", \"lowFrequency\"]);\n        this.low.dispose();\n        this._lowMidFilter.dispose();\n        this.mid.dispose();\n        this.high.dispose();\n        this.lowFrequency.dispose();\n        this.highFrequency.dispose();\n        this.Q.dispose();\n        return this;\n    };\n    return MultibandSplit;\n}(ToneAudioNode));\nexport { MultibandSplit };\n//# sourceMappingURL=MultibandSplit.js.map"]},"metadata":{},"sourceType":"module"}