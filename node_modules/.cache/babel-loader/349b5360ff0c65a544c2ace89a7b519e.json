{"ast":null,"code":"import _objectSpread from \"/Users/erickoduniyi/Desktop/affective_chaos_control/Emulators/wind-field/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/objectSpread2\";\nimport { Transport } from 'tone';\nimport { BaseSubject } from './BaseSubject';\nimport { MachineStateMode } from '../interfaces';\nimport SynthSubject from './SynthSubject';\nexport class MachineSubject extends BaseSubject {\n  // public sound: Sound;\n  get subject() {\n    const slot = this.state.slots.find(slot => slot.active);\n\n    if (slot && slot.subject) {\n      return slot.subject;\n    }\n\n    return null;\n  }\n\n  get synth() {\n    const slot = this.state.slots.find(slot => slot.active);\n\n    if (slot && slot.synth) {\n      slot.synth.toDestination();\n      return slot.synth;\n    }\n\n    return null;\n  }\n\n  get sound() {\n    const slot = this.state.slots.find(slot => slot.active);\n\n    if (slot && slot.sound) {\n      return slot.sound;\n    }\n\n    return null;\n  }\n\n  constructor() {\n    super({\n      playing: false,\n      bpm: 120,\n      octave: 4,\n      note: null,\n      isReady: false,\n      mode: MachineStateMode.Tape,\n      slots: Array.from(Array(8).keys()).map((_, index) => {\n        const synth = new SynthSubject();\n        return {\n          active: index === 0,\n          subject: synth,\n          synth: synth.state.synth,\n          sound: synth.state.sound\n        };\n      })\n    });\n    this.store = 'machine-state';\n    this.init();\n  }\n\n  async init() {\n    this.patch({\n      isReady: true\n    });\n    Transport.bpm.value = 120;\n  }\n\n  async attack(key, octave) {\n    let note = `${key}${octave}`;\n    this.patch({\n      note\n    });\n\n    if (this.synth) {\n      this.synth.triggerAttack(note);\n    }\n  }\n\n  async release() {\n    if (this.synth && this.state.note) {\n      this.synth.triggerRelease();\n    }\n\n    this.patch({\n      note: null\n    });\n  }\n\n  play() {\n    Transport.start();\n    this.patch({\n      playing: Transport.state !== 'started' ? false : true\n    });\n  }\n\n  stop() {\n    Transport.stop();\n    this.patch({\n      playing: Transport.state !== 'started' ? false : true\n    });\n  }\n\n  updateEnvelope(knob, value) {\n    if (this.synth) {\n      let _this$synth$envelope = this.synth.envelope,\n          attack = _this$synth$envelope.attack,\n          decay = _this$synth$envelope.decay,\n          sustain = _this$synth$envelope.sustain,\n          release = _this$synth$envelope.release;\n\n      switch (knob) {\n        case 1:\n          attack = value / (360 / 2);\n          break;\n\n        case 2:\n          decay = value / (360 / 2);\n          break;\n\n        case 3:\n          sustain = value / (360 / 1);\n          break;\n\n        case 4:\n          release = value / (360 / 3);\n          break;\n      }\n\n      this.subject.setEnvelope({\n        attack,\n        decay,\n        sustain,\n        release\n      });\n    }\n  }\n\n  setKnobValue(knob, value) {\n    const mode = this.state.mode;\n\n    switch (mode) {\n      case MachineStateMode.Synth:\n        this.updateEnvelope(knob, value);\n        break;\n    }\n  }\n\n  setOctave(value) {\n    this.patch({\n      octave: value\n    });\n  }\n\n  setBpm(value) {\n    Transport.bpm.value = value;\n    this.patch({\n      bpm: value\n    });\n  }\n\n  setMode(value) {\n    this.patch({\n      mode: value\n    });\n  }\n\n  setSynth(index) {\n    const slots = this.state.slots.map((slot, slotIndex) => {\n      return _objectSpread({}, slot, {\n        active: slotIndex === index\n      });\n    });\n    this.patch({\n      slots\n    });\n  }\n\n}\nexport default new MachineSubject();","map":{"version":3,"sources":["/Users/erickoduniyi/Desktop/affective_chaos_control/Emulators/wind-field/src/engine/MachineSubject.ts"],"names":["Transport","BaseSubject","MachineStateMode","SynthSubject","MachineSubject","subject","slot","state","slots","find","active","synth","toDestination","sound","constructor","playing","bpm","octave","note","isReady","mode","Tape","Array","from","keys","map","_","index","store","init","patch","value","attack","key","triggerAttack","release","triggerRelease","play","start","stop","updateEnvelope","knob","envelope","decay","sustain","setEnvelope","setKnobValue","Synth","setOctave","setBpm","setMode","setSynth","slotIndex"],"mappings":"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","sourcesContent":["import { Synth, Transport } from 'tone';\nimport { BaseSubject } from './BaseSubject';\nimport { MachineState, MachineStateMode, SynthSubjectType } from '../interfaces';\nimport SynthSubject from './SynthSubject';\n\nexport class MachineSubject extends BaseSubject<MachineState> {\n  protected store: string = 'machine-state';\n\n  // public sound: Sound;\n\n  get subject() {\n    const slot: undefined | SynthSubjectType = this.state.slots.find((slot) => slot.active);\n    if (slot && slot.subject) {\n      return slot.subject;\n    }\n    return null;\n  }\n\n  get synth() {\n    const slot: undefined | SynthSubjectType = this.state.slots.find((slot) => slot.active);\n    if (slot && slot.synth) {\n      slot.synth.toDestination();\n      return slot.synth;\n    }\n    return null;\n  }\n\n  get sound() {\n    const slot: undefined | SynthSubjectType = this.state.slots.find((slot) => slot.active);\n    if (slot && slot.sound) {\n      return slot.sound;\n    }\n    return null;\n  }\n\n  constructor() {\n    super({\n      playing: false,\n      bpm: 120,\n      octave: 4,\n      note: null,\n      isReady: false,\n      mode: MachineStateMode.Tape,\n      slots: Array.from(Array(8).keys()).map((_: any, index: number) => {\n        const synth = new SynthSubject();\n        return {\n          active: index === 0,\n          subject: synth,\n          synth: synth.state.synth,\n          sound: synth.state.sound\n        };\n      })\n    });\n\n    this.init();\n  }\n\n  async init() {\n    this.patch({\n      isReady: true\n    });\n\n    Transport.bpm.value = 120;\n  }\n\n  async attack(key: string, octave: number) {\n    let note = `${key}${octave}`;\n    this.patch({\n      note\n    });\n    if (this.synth) {\n      this.synth.triggerAttack(note);\n    }\n  }\n\n  async release() {\n    if (this.synth && this.state.note) {\n      (this.synth as Synth).triggerRelease();\n    }\n    this.patch({\n      note: null\n    })\n  }\n\n  play() {\n    Transport.start();\n\n    this.patch({\n      playing: Transport.state !== 'started' ? false : true\n    })\n  }\n\n  stop() {\n    Transport.stop();\n\n    this.patch({\n      playing: Transport.state !== 'started' ? false : true\n    })\n  }\n\n  updateEnvelope(knob: number, value: number) {\n    if (this.synth) {\n      let { attack, decay, sustain, release } = this.synth.envelope;\n      switch (knob) {\n        case 1:\n          attack = value / (360 / 2);\n          break;\n        case 2:\n          decay = value / (360 / 2);\n          break;\n        case 3:\n          sustain = value / (360 / 1);\n          break;\n        case 4:\n          release = value / (360 / 3);\n          break;\n      }\n\n      this.subject.setEnvelope({\n        attack,\n        decay,\n        sustain,\n        release\n      });\n    }\n  }\n\n  setKnobValue(knob: number, value: number) {\n    const { mode } = this.state;\n    switch (mode) {\n      case MachineStateMode.Synth:\n        this.updateEnvelope(knob, value);\n        break;\n    }\n  }\n\n  setOctave(value: number) {\n    this.patch({\n      octave: value\n    })\n  }\n\n  setBpm(value: number) {\n    Transport.bpm.value = value;\n    this.patch({\n      bpm: value\n    })\n  }\n\n  setMode(value: MachineStateMode) {\n    this.patch({\n      mode: value\n    })\n  }\n\n  setSynth(index: number) {\n    const slots = this.state.slots.map((slot: SynthSubjectType, slotIndex: number) => {\n      return {\n        ...slot,\n        active: slotIndex === index\n      }\n    });\n    this.patch({\n      slots\n    })\n  }\n}\n\nexport default new MachineSubject();\n"]},"metadata":{},"sourceType":"module"}