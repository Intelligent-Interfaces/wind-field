{"ast":null,"code":"import * as tslib_1 from \"tslib\";\nimport { ToneAudioNode } from \"../../core/context/ToneAudioNode\";\nimport { optionsFromArguments } from \"../../core/util/Defaults\";\nimport { OnePoleFilter } from \"../filter/OnePoleFilter\";\nimport { Abs } from \"../../signal/Abs\";\n/**\n * Follower is a simple envelope follower.\n * It's implemented by applying a lowpass filter to the absolute value of the incoming signal.\n * ```\n *          +-----+    +---------------+\n * Input +--> Abs +----> OnePoleFilter +--> Output\n *          +-----+    +---------------+\n * ```\n * @category Component\n */\n\nvar Follower =\n/** @class */\nfunction (_super) {\n  tslib_1.__extends(Follower, _super);\n\n  function Follower() {\n    var _this = _super.call(this, optionsFromArguments(Follower.getDefaults(), arguments, [\"smoothing\"])) || this;\n\n    _this.name = \"Follower\";\n    var options = optionsFromArguments(Follower.getDefaults(), arguments, [\"smoothing\"]);\n    _this._abs = _this.input = new Abs({\n      context: _this.context\n    });\n    _this._lowpass = _this.output = new OnePoleFilter({\n      context: _this.context,\n      frequency: 1 / _this.toSeconds(options.smoothing),\n      type: \"lowpass\"\n    });\n\n    _this._abs.connect(_this._lowpass);\n\n    _this._smoothing = options.smoothing;\n    return _this;\n  }\n\n  Follower.getDefaults = function () {\n    return Object.assign(ToneAudioNode.getDefaults(), {\n      smoothing: 0.05\n    });\n  };\n\n  Object.defineProperty(Follower.prototype, \"smoothing\", {\n    /**\n     * The amount of time it takes a value change to arrive at the updated value.\n     */\n    get: function () {\n      return this._smoothing;\n    },\n    set: function (smoothing) {\n      this._smoothing = smoothing;\n      this._lowpass.frequency = 1 / this.toSeconds(this.smoothing);\n    },\n    enumerable: true,\n    configurable: true\n  });\n\n  Follower.prototype.dispose = function () {\n    _super.prototype.dispose.call(this);\n\n    this._abs.dispose();\n\n    this._lowpass.dispose();\n\n    return this;\n  };\n\n  return Follower;\n}(ToneAudioNode);\n\nexport { Follower };","map":{"version":3,"sources":["../../../../Tone/component/analysis/Follower.ts"],"names":[],"mappings":";AACA,SAAgC,aAAhC,QAA2E,kCAA3E;AACA,SAAS,oBAAT,QAAqC,0BAArC;AACA,SAAS,aAAT,QAA8B,yBAA9B;AACA,SAAS,GAAT,QAAoB,kBAApB;AAMA;;;;;;;;;;;AAUA,IAAA,QAAA;AAAA;AAAA,UAAA,MAAA,EAAA;AAA8B,EAAA,OAAA,CAAA,SAAA,CAAA,QAAA,EAAA,MAAA;;AA2B7B,WAAA,QAAA,GAAA;AAAA,QAAA,KAAA,GACC,MAAA,CAAA,IAAA,CAAA,IAAA,EAAM,oBAAoB,CAAC,QAAQ,CAAC,WAAT,EAAD,EAAyB,SAAzB,EAAoC,CAAC,WAAD,CAApC,CAA1B,KAA6E,IAD9E;;AAzBS,IAAA,KAAA,CAAA,IAAA,GAAe,UAAf;AA2BR,QAAM,OAAO,GAAG,oBAAoB,CAAC,QAAQ,CAAC,WAAT,EAAD,EAAyB,SAAzB,EAAoC,CAAC,WAAD,CAApC,CAApC;AAEA,IAAA,KAAI,CAAC,IAAL,GAAY,KAAI,CAAC,KAAL,GAAa,IAAI,GAAJ,CAAQ;AAAE,MAAA,OAAO,EAAE,KAAI,CAAC;AAAhB,KAAR,CAAzB;AACA,IAAA,KAAI,CAAC,QAAL,GAAgB,KAAI,CAAC,MAAL,GAAc,IAAI,aAAJ,CAAkB;AAC/C,MAAA,OAAO,EAAE,KAAI,CAAC,OADiC;AAE/C,MAAA,SAAS,EAAE,IAAI,KAAI,CAAC,SAAL,CAAe,OAAO,CAAC,SAAvB,CAFgC;AAG/C,MAAA,IAAI,EAAE;AAHyC,KAAlB,CAA9B;;AAKA,IAAA,KAAI,CAAC,IAAL,CAAU,OAAV,CAAkB,KAAI,CAAC,QAAvB;;AACA,IAAA,KAAI,CAAC,UAAL,GAAkB,OAAO,CAAC,SAA1B;;AACA;;AAEM,EAAA,QAAA,CAAA,WAAA,GAAP,YAAA;AACC,WAAO,MAAM,CAAC,MAAP,CAAc,aAAa,CAAC,WAAd,EAAd,EAA2C;AACjD,MAAA,SAAS,EAAE;AADsC,KAA3C,CAAP;AAGA,GAJM;;AASP,EAAA,MAAA,CAAA,cAAA,CAAI,QAAA,CAAA,SAAJ,EAAI,WAAJ,EAAa;AAHb;;;SAGA,YAAA;AACC,aAAO,KAAK,UAAZ;AACA,KAFY;SAGb,UAAc,SAAd,EAAuB;AACtB,WAAK,UAAL,GAAkB,SAAlB;AACA,WAAK,QAAL,CAAc,SAAd,GAA0B,IAAI,KAAK,SAAL,CAAe,KAAK,SAApB,CAA9B;AACA,KANY;oBAAA;;AAAA,GAAb;;AAQA,EAAA,QAAA,CAAA,SAAA,CAAA,OAAA,GAAA,YAAA;AACC,IAAA,MAAA,CAAA,SAAA,CAAM,OAAN,CAAa,IAAb,CAAa,IAAb;;AACA,SAAK,IAAL,CAAU,OAAV;;AACA,SAAK,QAAL,CAAc,OAAd;;AACA,WAAO,IAAP;AACA,GALD;;AAMD,SAAA,QAAA;AAAC,CAhED,CAA8B,aAA9B,CAAA","sourceRoot":"","sourcesContent":["import * as tslib_1 from \"tslib\";\nimport { ToneAudioNode } from \"../../core/context/ToneAudioNode\";\nimport { optionsFromArguments } from \"../../core/util/Defaults\";\nimport { OnePoleFilter } from \"../filter/OnePoleFilter\";\nimport { Abs } from \"../../signal/Abs\";\n/**\n * Follower is a simple envelope follower.\n * It's implemented by applying a lowpass filter to the absolute value of the incoming signal.\n * ```\n *          +-----+    +---------------+\n * Input +--> Abs +----> OnePoleFilter +--> Output\n *          +-----+    +---------------+\n * ```\n * @category Component\n */\nvar Follower = /** @class */ (function (_super) {\n    tslib_1.__extends(Follower, _super);\n    function Follower() {\n        var _this = _super.call(this, optionsFromArguments(Follower.getDefaults(), arguments, [\"smoothing\"])) || this;\n        _this.name = \"Follower\";\n        var options = optionsFromArguments(Follower.getDefaults(), arguments, [\"smoothing\"]);\n        _this._abs = _this.input = new Abs({ context: _this.context });\n        _this._lowpass = _this.output = new OnePoleFilter({\n            context: _this.context,\n            frequency: 1 / _this.toSeconds(options.smoothing),\n            type: \"lowpass\"\n        });\n        _this._abs.connect(_this._lowpass);\n        _this._smoothing = options.smoothing;\n        return _this;\n    }\n    Follower.getDefaults = function () {\n        return Object.assign(ToneAudioNode.getDefaults(), {\n            smoothing: 0.05\n        });\n    };\n    Object.defineProperty(Follower.prototype, \"smoothing\", {\n        /**\n         * The amount of time it takes a value change to arrive at the updated value.\n         */\n        get: function () {\n            return this._smoothing;\n        },\n        set: function (smoothing) {\n            this._smoothing = smoothing;\n            this._lowpass.frequency = 1 / this.toSeconds(this.smoothing);\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Follower.prototype.dispose = function () {\n        _super.prototype.dispose.call(this);\n        this._abs.dispose();\n        this._lowpass.dispose();\n        return this;\n    };\n    return Follower;\n}(ToneAudioNode));\nexport { Follower };\n//# sourceMappingURL=Follower.js.map"]},"metadata":{},"sourceType":"module"}