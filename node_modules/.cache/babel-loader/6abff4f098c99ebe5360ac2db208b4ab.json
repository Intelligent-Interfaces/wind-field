{"ast":null,"code":"import * as tslib_1 from \"tslib\";\nimport { Signal } from \"../signal/Signal\";\nimport { Multiply } from \"../signal/Multiply\";\nimport { Gain } from \"../core/context/Gain\";\nimport { Envelope } from \"../component/envelope/Envelope\";\nimport { ToneAudioNode } from \"../core/context/ToneAudioNode\";\nimport { Monophonic } from \"./Monophonic\";\nimport { OmniOscillator } from \"../source/oscillator/OmniOscillator\";\nimport { Source } from \"../source/Source\";\nimport { Synth } from \"./Synth\";\nimport { readOnly } from \"../core/util/Interface\";\nimport { omitFromObject, optionsFromArguments } from \"../core/util/Defaults\";\n/**\n * Base class for both AM and FM synths\n */\n\nvar ModulationSynth =\n/** @class */\nfunction (_super) {\n  tslib_1.__extends(ModulationSynth, _super);\n\n  function ModulationSynth() {\n    var _this = _super.call(this, optionsFromArguments(ModulationSynth.getDefaults(), arguments)) || this;\n\n    _this.name = \"ModulationSynth\";\n    var options = optionsFromArguments(ModulationSynth.getDefaults(), arguments);\n    _this._carrier = new Synth({\n      context: _this.context,\n      oscillator: options.oscillator,\n      envelope: options.envelope,\n      onsilence: function () {\n        return _this.onsilence(_this);\n      },\n      volume: -10\n    });\n    _this._modulator = new Synth({\n      context: _this.context,\n      oscillator: options.modulation,\n      envelope: options.modulationEnvelope,\n      volume: -10\n    });\n    _this.oscillator = _this._carrier.oscillator;\n    _this.envelope = _this._carrier.envelope;\n    _this.modulation = _this._modulator.oscillator;\n    _this.modulationEnvelope = _this._modulator.envelope;\n    _this.frequency = new Signal({\n      context: _this.context,\n      units: \"frequency\"\n    });\n    _this.detune = new Signal({\n      context: _this.context,\n      value: options.detune,\n      units: \"cents\"\n    });\n    _this.harmonicity = new Multiply({\n      context: _this.context,\n      value: options.harmonicity,\n      minValue: 0\n    });\n    _this._modulationNode = new Gain({\n      context: _this.context,\n      gain: 0\n    });\n    readOnly(_this, [\"frequency\", \"harmonicity\", \"oscillator\", \"envelope\", \"modulation\", \"modulationEnvelope\", \"detune\"]);\n    return _this;\n  }\n\n  ModulationSynth.getDefaults = function () {\n    return Object.assign(Monophonic.getDefaults(), {\n      harmonicity: 3,\n      oscillator: Object.assign(omitFromObject(OmniOscillator.getDefaults(), tslib_1.__spread(Object.keys(Source.getDefaults()), [\"frequency\", \"detune\"])), {\n        type: \"sine\"\n      }),\n      envelope: Object.assign(omitFromObject(Envelope.getDefaults(), Object.keys(ToneAudioNode.getDefaults())), {\n        attack: 0.01,\n        decay: 0.01,\n        sustain: 1,\n        release: 0.5\n      }),\n      modulation: Object.assign(omitFromObject(OmniOscillator.getDefaults(), tslib_1.__spread(Object.keys(Source.getDefaults()), [\"frequency\", \"detune\"])), {\n        type: \"square\"\n      }),\n      modulationEnvelope: Object.assign(omitFromObject(Envelope.getDefaults(), Object.keys(ToneAudioNode.getDefaults())), {\n        attack: 0.5,\n        decay: 0.0,\n        sustain: 1,\n        release: 0.5\n      })\n    });\n  };\n  /**\n   * Trigger the attack portion of the note\n   */\n\n\n  ModulationSynth.prototype._triggerEnvelopeAttack = function (time, velocity) {\n    // @ts-ignore\n    this._carrier._triggerEnvelopeAttack(time, velocity); // @ts-ignore\n\n\n    this._modulator._triggerEnvelopeAttack(time, velocity);\n  };\n  /**\n   * Trigger the release portion of the note\n   */\n\n\n  ModulationSynth.prototype._triggerEnvelopeRelease = function (time) {\n    // @ts-ignore\n    this._carrier._triggerEnvelopeRelease(time); // @ts-ignore\n\n\n    this._modulator._triggerEnvelopeRelease(time);\n\n    return this;\n  };\n\n  ModulationSynth.prototype.getLevelAtTime = function (time) {\n    time = this.toSeconds(time);\n    return this.envelope.getValueAtTime(time);\n  };\n\n  ModulationSynth.prototype.dispose = function () {\n    _super.prototype.dispose.call(this);\n\n    this._carrier.dispose();\n\n    this._modulator.dispose();\n\n    this.frequency.dispose();\n    this.detune.dispose();\n    this.harmonicity.dispose();\n\n    this._modulationNode.dispose();\n\n    return this;\n  };\n\n  return ModulationSynth;\n}(Monophonic);\n\nexport { ModulationSynth };","map":{"version":3,"sources":["../../../Tone/instrument/ModulationSynth.ts"],"names":[],"mappings":"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","sourceRoot":"","sourcesContent":["import * as tslib_1 from \"tslib\";\nimport { Signal } from \"../signal/Signal\";\nimport { Multiply } from \"../signal/Multiply\";\nimport { Gain } from \"../core/context/Gain\";\nimport { Envelope } from \"../component/envelope/Envelope\";\nimport { ToneAudioNode } from \"../core/context/ToneAudioNode\";\nimport { Monophonic } from \"./Monophonic\";\nimport { OmniOscillator } from \"../source/oscillator/OmniOscillator\";\nimport { Source } from \"../source/Source\";\nimport { Synth } from \"./Synth\";\nimport { readOnly } from \"../core/util/Interface\";\nimport { omitFromObject, optionsFromArguments } from \"../core/util/Defaults\";\n/**\n * Base class for both AM and FM synths\n */\nvar ModulationSynth = /** @class */ (function (_super) {\n    tslib_1.__extends(ModulationSynth, _super);\n    function ModulationSynth() {\n        var _this = _super.call(this, optionsFromArguments(ModulationSynth.getDefaults(), arguments)) || this;\n        _this.name = \"ModulationSynth\";\n        var options = optionsFromArguments(ModulationSynth.getDefaults(), arguments);\n        _this._carrier = new Synth({\n            context: _this.context,\n            oscillator: options.oscillator,\n            envelope: options.envelope,\n            onsilence: function () { return _this.onsilence(_this); },\n            volume: -10,\n        });\n        _this._modulator = new Synth({\n            context: _this.context,\n            oscillator: options.modulation,\n            envelope: options.modulationEnvelope,\n            volume: -10,\n        });\n        _this.oscillator = _this._carrier.oscillator;\n        _this.envelope = _this._carrier.envelope;\n        _this.modulation = _this._modulator.oscillator;\n        _this.modulationEnvelope = _this._modulator.envelope;\n        _this.frequency = new Signal({\n            context: _this.context,\n            units: \"frequency\",\n        });\n        _this.detune = new Signal({\n            context: _this.context,\n            value: options.detune,\n            units: \"cents\"\n        });\n        _this.harmonicity = new Multiply({\n            context: _this.context,\n            value: options.harmonicity,\n            minValue: 0,\n        });\n        _this._modulationNode = new Gain({\n            context: _this.context,\n            gain: 0,\n        });\n        readOnly(_this, [\"frequency\", \"harmonicity\", \"oscillator\", \"envelope\", \"modulation\", \"modulationEnvelope\", \"detune\"]);\n        return _this;\n    }\n    ModulationSynth.getDefaults = function () {\n        return Object.assign(Monophonic.getDefaults(), {\n            harmonicity: 3,\n            oscillator: Object.assign(omitFromObject(OmniOscillator.getDefaults(), tslib_1.__spread(Object.keys(Source.getDefaults()), [\n                \"frequency\",\n                \"detune\"\n            ])), {\n                type: \"sine\"\n            }),\n            envelope: Object.assign(omitFromObject(Envelope.getDefaults(), Object.keys(ToneAudioNode.getDefaults())), {\n                attack: 0.01,\n                decay: 0.01,\n                sustain: 1,\n                release: 0.5\n            }),\n            modulation: Object.assign(omitFromObject(OmniOscillator.getDefaults(), tslib_1.__spread(Object.keys(Source.getDefaults()), [\n                \"frequency\",\n                \"detune\"\n            ])), {\n                type: \"square\"\n            }),\n            modulationEnvelope: Object.assign(omitFromObject(Envelope.getDefaults(), Object.keys(ToneAudioNode.getDefaults())), {\n                attack: 0.5,\n                decay: 0.0,\n                sustain: 1,\n                release: 0.5\n            })\n        });\n    };\n    /**\n     * Trigger the attack portion of the note\n     */\n    ModulationSynth.prototype._triggerEnvelopeAttack = function (time, velocity) {\n        // @ts-ignore\n        this._carrier._triggerEnvelopeAttack(time, velocity);\n        // @ts-ignore\n        this._modulator._triggerEnvelopeAttack(time, velocity);\n    };\n    /**\n     * Trigger the release portion of the note\n     */\n    ModulationSynth.prototype._triggerEnvelopeRelease = function (time) {\n        // @ts-ignore\n        this._carrier._triggerEnvelopeRelease(time);\n        // @ts-ignore\n        this._modulator._triggerEnvelopeRelease(time);\n        return this;\n    };\n    ModulationSynth.prototype.getLevelAtTime = function (time) {\n        time = this.toSeconds(time);\n        return this.envelope.getValueAtTime(time);\n    };\n    ModulationSynth.prototype.dispose = function () {\n        _super.prototype.dispose.call(this);\n        this._carrier.dispose();\n        this._modulator.dispose();\n        this.frequency.dispose();\n        this.detune.dispose();\n        this.harmonicity.dispose();\n        this._modulationNode.dispose();\n        return this;\n    };\n    return ModulationSynth;\n}(Monophonic));\nexport { ModulationSynth };\n//# sourceMappingURL=ModulationSynth.js.map"]},"metadata":{},"sourceType":"module"}